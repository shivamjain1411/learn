var $eJUMF$path = require("path");
var $eJUMF$stream = require("stream");
var $eJUMF$parcelsourcemap = require("@parcel/source-map");
var $eJUMF$parcellogger = require("@parcel/logger");
var $eJUMF$crypto = require("crypto");
var $eJUMF$os = require("os");
var $eJUMF$util = require("util");
var $eJUMF$events = require("events");
var $eJUMF$fs = require("fs");
var $eJUMF$parcelcodeframe = require("@parcel/codeframe");
var $eJUMF$parcelmarkdownansi = require("@parcel/markdown-ansi");
var $eJUMF$chalk = require("chalk");
var $eJUMF$tty = require("tty");
var $eJUMF$assert = require("assert");
var $eJUMF$parceldiagnostic = require("@parcel/diagnostic");
var $eJUMF$url = require("url");
var $eJUMF$child_process = require("child_process");
var $eJUMF$buffer = require("buffer");
var $eJUMF$parcelrust = require("@parcel/rust");
var $eJUMF$http = require("http");
var $eJUMF$https = require("https");


function $parcel$export(e, n, v, s) {
  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});
}

      var $parcel$global = globalThis;
    
function $parcel$interopDefault(a) {
  return a && a.__esModule ? a.default : a;
}

var $parcel$modules = {};
var $parcel$inits = {};

var parcelRequire = $parcel$global["parcelRequire0b48"];

if (parcelRequire == null) {
  parcelRequire = function(id) {
    if (id in $parcel$modules) {
      return $parcel$modules[id].exports;
    }
    if (id in $parcel$inits) {
      var init = $parcel$inits[id];
      delete $parcel$inits[id];
      var module = {id: id, exports: {}};
      $parcel$modules[id] = module;
      init.call(module.exports, module, module.exports);
      return module.exports;
    }
    var err = new Error("Cannot find module '" + id + "'");
    err.code = 'MODULE_NOT_FOUND';
    throw err;
  };

  parcelRequire.register = function register(id, init) {
    $parcel$inits[id] = init;
  };

  $parcel$global["parcelRequire0b48"] = parcelRequire;
}

var parcelRegister = parcelRequire.register;
parcelRegister("aX5SS", function(module, exports) {
/**
 * Node.js module for Forge.
 *
 * @author Dave Longley
 *
 * Copyright 2011-2016 Digital Bazaar, Inc.
 */ module.exports = {
    // default options
    options: {
        usePureJavaScript: false
    }
};

});

parcelRegister("debD2", function(module, exports) {
/**
 * Node.js module for Forge message digests.
 *
 * @author Dave Longley
 *
 * Copyright 2011-2017 Digital Bazaar, Inc.
 */ 
var $aX5SS = parcelRequire("aX5SS");
module.exports = $aX5SS.md = $aX5SS.md || {};
$aX5SS.md.algorithms = $aX5SS.md.algorithms || {};

});

parcelRegister("bpwrg", function(module, exports) {
"use strict";


var $cVXfM = parcelRequire("cVXfM");

var $bWS3W = parcelRequire("bWS3W");

var $9kveb = parcelRequire("9kveb");

var $7nDuE = parcelRequire("7nDuE");
const $84eb312e83286da9$var$isObject = (val)=>val && typeof val === "object" && !Array.isArray(val);
/**
 * Creates a matcher function from one or more glob patterns. The
 * returned function takes a string to match as its first argument,
 * and returns true if the string is a match. The returned matcher
 * function also takes a boolean as the second argument that, when true,
 * returns an object with additional information.
 *
 * ```js
 * const picomatch = require('picomatch');
 * // picomatch(glob[, options]);
 *
 * const isMatch = picomatch('*.!(*a)');
 * console.log(isMatch('a.a')); //=> false
 * console.log(isMatch('a.b')); //=> true
 * ```
 * @name picomatch
 * @param {String|Array} `globs` One or more glob patterns.
 * @param {Object=} `options`
 * @return {Function=} Returns a matcher function.
 * @api public
 */ const $84eb312e83286da9$var$picomatch = (glob, options, returnState = false)=>{
    if (Array.isArray(glob)) {
        const fns = glob.map((input)=>$84eb312e83286da9$var$picomatch(input, options, returnState));
        const arrayMatcher = (str)=>{
            for (const isMatch of fns){
                const state = isMatch(str);
                if (state) return state;
            }
            return false;
        };
        return arrayMatcher;
    }
    const isState = $84eb312e83286da9$var$isObject(glob) && glob.tokens && glob.input;
    if (glob === "" || typeof glob !== "string" && !isState) throw new TypeError("Expected pattern to be a non-empty string");
    const opts = options || {};
    const posix = $9kveb.isWindows(options);
    const regex = isState ? $84eb312e83286da9$var$picomatch.compileRe(glob, options) : $84eb312e83286da9$var$picomatch.makeRe(glob, options, false, true);
    const state = regex.state;
    delete regex.state;
    let isIgnored = ()=>false;
    if (opts.ignore) {
        const ignoreOpts = {
            ...options,
            ignore: null,
            onMatch: null,
            onResult: null
        };
        isIgnored = $84eb312e83286da9$var$picomatch(opts.ignore, ignoreOpts, returnState);
    }
    const matcher = (input, returnObject = false)=>{
        const { isMatch: isMatch, match: match, output: output } = $84eb312e83286da9$var$picomatch.test(input, regex, options, {
            glob: glob,
            posix: posix
        });
        const result = {
            glob: glob,
            state: state,
            regex: regex,
            posix: posix,
            input: input,
            output: output,
            match: match,
            isMatch: isMatch
        };
        if (typeof opts.onResult === "function") opts.onResult(result);
        if (isMatch === false) {
            result.isMatch = false;
            return returnObject ? result : false;
        }
        if (isIgnored(input)) {
            if (typeof opts.onIgnore === "function") opts.onIgnore(result);
            result.isMatch = false;
            return returnObject ? result : false;
        }
        if (typeof opts.onMatch === "function") opts.onMatch(result);
        return returnObject ? result : true;
    };
    if (returnState) matcher.state = state;
    return matcher;
};
/**
 * Test `input` with the given `regex`. This is used by the main
 * `picomatch()` function to test the input string.
 *
 * ```js
 * const picomatch = require('picomatch');
 * // picomatch.test(input, regex[, options]);
 *
 * console.log(picomatch.test('foo/bar', /^(?:([^/]*?)\/([^/]*?))$/));
 * // { isMatch: true, match: [ 'foo/', 'foo', 'bar' ], output: 'foo/bar' }
 * ```
 * @param {String} `input` String to test.
 * @param {RegExp} `regex`
 * @return {Object} Returns an object with matching info.
 * @api public
 */ $84eb312e83286da9$var$picomatch.test = (input, regex, options, { glob: glob, posix: posix } = {})=>{
    if (typeof input !== "string") throw new TypeError("Expected input to be a string");
    if (input === "") return {
        isMatch: false,
        output: ""
    };
    const opts = options || {};
    const format = opts.format || (posix ? $9kveb.toPosixSlashes : null);
    let match = input === glob;
    let output = match && format ? format(input) : input;
    if (match === false) {
        output = format ? format(input) : input;
        match = output === glob;
    }
    if (match === false || opts.capture === true) {
        if (opts.matchBase === true || opts.basename === true) match = $84eb312e83286da9$var$picomatch.matchBase(input, regex, options, posix);
        else match = regex.exec(output);
    }
    return {
        isMatch: Boolean(match),
        match: match,
        output: output
    };
};
/**
 * Match the basename of a filepath.
 *
 * ```js
 * const picomatch = require('picomatch');
 * // picomatch.matchBase(input, glob[, options]);
 * console.log(picomatch.matchBase('foo/bar.js', '*.js'); // true
 * ```
 * @param {String} `input` String to test.
 * @param {RegExp|String} `glob` Glob pattern or regex created by [.makeRe](#makeRe).
 * @return {Boolean}
 * @api public
 */ $84eb312e83286da9$var$picomatch.matchBase = (input, glob, options, posix = $9kveb.isWindows(options))=>{
    const regex = glob instanceof RegExp ? glob : $84eb312e83286da9$var$picomatch.makeRe(glob, options);
    return regex.test($eJUMF$path.basename(input));
};
/**
 * Returns true if **any** of the given glob `patterns` match the specified `string`.
 *
 * ```js
 * const picomatch = require('picomatch');
 * // picomatch.isMatch(string, patterns[, options]);
 *
 * console.log(picomatch.isMatch('a.a', ['b.*', '*.a'])); //=> true
 * console.log(picomatch.isMatch('a.a', 'b.*')); //=> false
 * ```
 * @param {String|Array} str The string to test.
 * @param {String|Array} patterns One or more glob patterns to use for matching.
 * @param {Object} [options] See available [options](#options).
 * @return {Boolean} Returns true if any patterns match `str`
 * @api public
 */ $84eb312e83286da9$var$picomatch.isMatch = (str, patterns, options)=>$84eb312e83286da9$var$picomatch(patterns, options)(str);
/**
 * Parse a glob pattern to create the source string for a regular
 * expression.
 *
 * ```js
 * const picomatch = require('picomatch');
 * const result = picomatch.parse(pattern[, options]);
 * ```
 * @param {String} `pattern`
 * @param {Object} `options`
 * @return {Object} Returns an object with useful properties and output to be used as a regex source string.
 * @api public
 */ $84eb312e83286da9$var$picomatch.parse = (pattern, options)=>{
    if (Array.isArray(pattern)) return pattern.map((p)=>$84eb312e83286da9$var$picomatch.parse(p, options));
    return $bWS3W(pattern, {
        ...options,
        fastpaths: false
    });
};
/**
 * Scan a glob pattern to separate the pattern into segments.
 *
 * ```js
 * const picomatch = require('picomatch');
 * // picomatch.scan(input[, options]);
 *
 * const result = picomatch.scan('!./foo/*.js');
 * console.log(result);
 * { prefix: '!./',
 *   input: '!./foo/*.js',
 *   start: 3,
 *   base: 'foo',
 *   glob: '*.js',
 *   isBrace: false,
 *   isBracket: false,
 *   isGlob: true,
 *   isExtglob: false,
 *   isGlobstar: false,
 *   negated: true }
 * ```
 * @param {String} `input` Glob pattern to scan.
 * @param {Object} `options`
 * @return {Object} Returns an object with
 * @api public
 */ $84eb312e83286da9$var$picomatch.scan = (input, options)=>$cVXfM(input, options);
/**
 * Compile a regular expression from the `state` object returned by the
 * [parse()](#parse) method.
 *
 * @param {Object} `state`
 * @param {Object} `options`
 * @param {Boolean} `returnOutput` Intended for implementors, this argument allows you to return the raw output from the parser.
 * @param {Boolean} `returnState` Adds the state to a `state` property on the returned regex. Useful for implementors and debugging.
 * @return {RegExp}
 * @api public
 */ $84eb312e83286da9$var$picomatch.compileRe = (state, options, returnOutput = false, returnState = false)=>{
    if (returnOutput === true) return state.output;
    const opts = options || {};
    const prepend = opts.contains ? "" : "^";
    const append = opts.contains ? "" : "$";
    let source = `${prepend}(?:${state.output})${append}`;
    if (state && state.negated === true) source = `^(?!${source}).*$`;
    const regex = $84eb312e83286da9$var$picomatch.toRegex(source, options);
    if (returnState === true) regex.state = state;
    return regex;
};
/**
 * Create a regular expression from a parsed glob pattern.
 *
 * ```js
 * const picomatch = require('picomatch');
 * const state = picomatch.parse('*.js');
 * // picomatch.compileRe(state[, options]);
 *
 * console.log(picomatch.compileRe(state));
 * //=> /^(?:(?!\.)(?=.)[^/]*?\.js)$/
 * ```
 * @param {String} `state` The object returned from the `.parse` method.
 * @param {Object} `options`
 * @param {Boolean} `returnOutput` Implementors may use this argument to return the compiled output, instead of a regular expression. This is not exposed on the options to prevent end-users from mutating the result.
 * @param {Boolean} `returnState` Implementors may use this argument to return the state from the parsed glob with the returned regular expression.
 * @return {RegExp} Returns a regex created from the given pattern.
 * @api public
 */ $84eb312e83286da9$var$picomatch.makeRe = (input, options = {}, returnOutput = false, returnState = false)=>{
    if (!input || typeof input !== "string") throw new TypeError("Expected a non-empty string");
    let parsed = {
        negated: false,
        fastpaths: true
    };
    if (options.fastpaths !== false && (input[0] === "." || input[0] === "*")) parsed.output = $bWS3W.fastpaths(input, options);
    if (!parsed.output) parsed = $bWS3W(input, options);
    return $84eb312e83286da9$var$picomatch.compileRe(parsed, options, returnOutput, returnState);
};
/**
 * Create a regular expression from the given regex source string.
 *
 * ```js
 * const picomatch = require('picomatch');
 * // picomatch.toRegex(source[, options]);
 *
 * const { output } = picomatch.parse('*.js');
 * console.log(picomatch.toRegex(output));
 * //=> /^(?:(?!\.)(?=.)[^/]*?\.js)$/
 * ```
 * @param {String} `source` Regular expression source string.
 * @param {Object} `options`
 * @return {RegExp}
 * @api public
 */ $84eb312e83286da9$var$picomatch.toRegex = (source, options)=>{
    try {
        const opts = options || {};
        return new RegExp(source, opts.flags || (opts.nocase ? "i" : ""));
    } catch (err) {
        if (options && options.debug === true) throw err;
        return /$^/;
    }
};
/**
 * Picomatch constants.
 * @return {Object}
 */ $84eb312e83286da9$var$picomatch.constants = $7nDuE;
/**
 * Expose "picomatch"
 */ module.exports = $84eb312e83286da9$var$picomatch;

});
parcelRegister("cVXfM", function(module, exports) {
"use strict";

var $9kveb = parcelRequire("9kveb");

var $7nDuE = parcelRequire("7nDuE");
var $96a8c569ca8cf0ca$require$CHAR_ASTERISK = $7nDuE.CHAR_ASTERISK;
var $96a8c569ca8cf0ca$require$CHAR_AT = $7nDuE.CHAR_AT;
var $96a8c569ca8cf0ca$require$CHAR_BACKWARD_SLASH = $7nDuE.CHAR_BACKWARD_SLASH;
var $96a8c569ca8cf0ca$require$CHAR_COMMA = $7nDuE.CHAR_COMMA;
var $96a8c569ca8cf0ca$require$CHAR_DOT = $7nDuE.CHAR_DOT;
var $96a8c569ca8cf0ca$require$CHAR_EXCLAMATION_MARK = $7nDuE.CHAR_EXCLAMATION_MARK;
var $96a8c569ca8cf0ca$require$CHAR_FORWARD_SLASH = $7nDuE.CHAR_FORWARD_SLASH;
var $96a8c569ca8cf0ca$require$CHAR_LEFT_CURLY_BRACE = $7nDuE.CHAR_LEFT_CURLY_BRACE;
var $96a8c569ca8cf0ca$require$CHAR_LEFT_PARENTHESES = $7nDuE.CHAR_LEFT_PARENTHESES;
var $96a8c569ca8cf0ca$require$CHAR_LEFT_SQUARE_BRACKET = $7nDuE.CHAR_LEFT_SQUARE_BRACKET;
var $96a8c569ca8cf0ca$require$CHAR_PLUS = $7nDuE.CHAR_PLUS;
var $96a8c569ca8cf0ca$require$CHAR_QUESTION_MARK = $7nDuE.CHAR_QUESTION_MARK;
var $96a8c569ca8cf0ca$require$CHAR_RIGHT_CURLY_BRACE = $7nDuE.CHAR_RIGHT_CURLY_BRACE;
var $96a8c569ca8cf0ca$require$CHAR_RIGHT_PARENTHESES = $7nDuE.CHAR_RIGHT_PARENTHESES;
var $96a8c569ca8cf0ca$require$CHAR_RIGHT_SQUARE_BRACKET = $7nDuE.CHAR_RIGHT_SQUARE_BRACKET;
const $96a8c569ca8cf0ca$var$isPathSeparator = (code)=>{
    return code === $96a8c569ca8cf0ca$require$CHAR_FORWARD_SLASH || code === $96a8c569ca8cf0ca$require$CHAR_BACKWARD_SLASH;
};
const $96a8c569ca8cf0ca$var$depth = (token)=>{
    if (token.isPrefix !== true) token.depth = token.isGlobstar ? Infinity : 1;
};
/**
 * Quickly scans a glob pattern and returns an object with a handful of
 * useful properties, like `isGlob`, `path` (the leading non-glob, if it exists),
 * `glob` (the actual pattern), `negated` (true if the path starts with `!` but not
 * with `!(`) and `negatedExtglob` (true if the path starts with `!(`).
 *
 * ```js
 * const pm = require('picomatch');
 * console.log(pm.scan('foo/bar/*.js'));
 * { isGlob: true, input: 'foo/bar/*.js', base: 'foo/bar', glob: '*.js' }
 * ```
 * @param {String} `str`
 * @param {Object} `options`
 * @return {Object} Returns an object with tokens and regex source string.
 * @api public
 */ const $96a8c569ca8cf0ca$var$scan = (input, options)=>{
    const opts = options || {};
    const length = input.length - 1;
    const scanToEnd = opts.parts === true || opts.scanToEnd === true;
    const slashes = [];
    const tokens = [];
    const parts = [];
    let str = input;
    let index = -1;
    let start = 0;
    let lastIndex = 0;
    let isBrace = false;
    let isBracket = false;
    let isGlob = false;
    let isExtglob = false;
    let isGlobstar = false;
    let braceEscaped = false;
    let backslashes = false;
    let negated = false;
    let negatedExtglob = false;
    let finished = false;
    let braces = 0;
    let prev;
    let code;
    let token = {
        value: "",
        depth: 0,
        isGlob: false
    };
    const eos = ()=>index >= length;
    const peek = ()=>str.charCodeAt(index + 1);
    const advance = ()=>{
        prev = code;
        return str.charCodeAt(++index);
    };
    while(index < length){
        code = advance();
        let next;
        if (code === $96a8c569ca8cf0ca$require$CHAR_BACKWARD_SLASH) {
            backslashes = token.backslashes = true;
            code = advance();
            if (code === $96a8c569ca8cf0ca$require$CHAR_LEFT_CURLY_BRACE) braceEscaped = true;
            continue;
        }
        if (braceEscaped === true || code === $96a8c569ca8cf0ca$require$CHAR_LEFT_CURLY_BRACE) {
            braces++;
            while(eos() !== true && (code = advance())){
                if (code === $96a8c569ca8cf0ca$require$CHAR_BACKWARD_SLASH) {
                    backslashes = token.backslashes = true;
                    advance();
                    continue;
                }
                if (code === $96a8c569ca8cf0ca$require$CHAR_LEFT_CURLY_BRACE) {
                    braces++;
                    continue;
                }
                if (braceEscaped !== true && code === $96a8c569ca8cf0ca$require$CHAR_DOT && (code = advance()) === $96a8c569ca8cf0ca$require$CHAR_DOT) {
                    isBrace = token.isBrace = true;
                    isGlob = token.isGlob = true;
                    finished = true;
                    if (scanToEnd === true) continue;
                    break;
                }
                if (braceEscaped !== true && code === $96a8c569ca8cf0ca$require$CHAR_COMMA) {
                    isBrace = token.isBrace = true;
                    isGlob = token.isGlob = true;
                    finished = true;
                    if (scanToEnd === true) continue;
                    break;
                }
                if (code === $96a8c569ca8cf0ca$require$CHAR_RIGHT_CURLY_BRACE) {
                    braces--;
                    if (braces === 0) {
                        braceEscaped = false;
                        isBrace = token.isBrace = true;
                        finished = true;
                        break;
                    }
                }
            }
            if (scanToEnd === true) continue;
            break;
        }
        if (code === $96a8c569ca8cf0ca$require$CHAR_FORWARD_SLASH) {
            slashes.push(index);
            tokens.push(token);
            token = {
                value: "",
                depth: 0,
                isGlob: false
            };
            if (finished === true) continue;
            if (prev === $96a8c569ca8cf0ca$require$CHAR_DOT && index === start + 1) {
                start += 2;
                continue;
            }
            lastIndex = index + 1;
            continue;
        }
        if (opts.noext !== true) {
            const isExtglobChar = code === $96a8c569ca8cf0ca$require$CHAR_PLUS || code === $96a8c569ca8cf0ca$require$CHAR_AT || code === $96a8c569ca8cf0ca$require$CHAR_ASTERISK || code === $96a8c569ca8cf0ca$require$CHAR_QUESTION_MARK || code === $96a8c569ca8cf0ca$require$CHAR_EXCLAMATION_MARK;
            if (isExtglobChar === true && peek() === $96a8c569ca8cf0ca$require$CHAR_LEFT_PARENTHESES) {
                isGlob = token.isGlob = true;
                isExtglob = token.isExtglob = true;
                finished = true;
                if (code === $96a8c569ca8cf0ca$require$CHAR_EXCLAMATION_MARK && index === start) negatedExtglob = true;
                if (scanToEnd === true) {
                    while(eos() !== true && (code = advance())){
                        if (code === $96a8c569ca8cf0ca$require$CHAR_BACKWARD_SLASH) {
                            backslashes = token.backslashes = true;
                            code = advance();
                            continue;
                        }
                        if (code === $96a8c569ca8cf0ca$require$CHAR_RIGHT_PARENTHESES) {
                            isGlob = token.isGlob = true;
                            finished = true;
                            break;
                        }
                    }
                    continue;
                }
                break;
            }
        }
        if (code === $96a8c569ca8cf0ca$require$CHAR_ASTERISK) {
            if (prev === $96a8c569ca8cf0ca$require$CHAR_ASTERISK) isGlobstar = token.isGlobstar = true;
            isGlob = token.isGlob = true;
            finished = true;
            if (scanToEnd === true) continue;
            break;
        }
        if (code === $96a8c569ca8cf0ca$require$CHAR_QUESTION_MARK) {
            isGlob = token.isGlob = true;
            finished = true;
            if (scanToEnd === true) continue;
            break;
        }
        if (code === $96a8c569ca8cf0ca$require$CHAR_LEFT_SQUARE_BRACKET) {
            while(eos() !== true && (next = advance())){
                if (next === $96a8c569ca8cf0ca$require$CHAR_BACKWARD_SLASH) {
                    backslashes = token.backslashes = true;
                    advance();
                    continue;
                }
                if (next === $96a8c569ca8cf0ca$require$CHAR_RIGHT_SQUARE_BRACKET) {
                    isBracket = token.isBracket = true;
                    isGlob = token.isGlob = true;
                    finished = true;
                    break;
                }
            }
            if (scanToEnd === true) continue;
            break;
        }
        if (opts.nonegate !== true && code === $96a8c569ca8cf0ca$require$CHAR_EXCLAMATION_MARK && index === start) {
            negated = token.negated = true;
            start++;
            continue;
        }
        if (opts.noparen !== true && code === $96a8c569ca8cf0ca$require$CHAR_LEFT_PARENTHESES) {
            isGlob = token.isGlob = true;
            if (scanToEnd === true) {
                while(eos() !== true && (code = advance())){
                    if (code === $96a8c569ca8cf0ca$require$CHAR_LEFT_PARENTHESES) {
                        backslashes = token.backslashes = true;
                        code = advance();
                        continue;
                    }
                    if (code === $96a8c569ca8cf0ca$require$CHAR_RIGHT_PARENTHESES) {
                        finished = true;
                        break;
                    }
                }
                continue;
            }
            break;
        }
        if (isGlob === true) {
            finished = true;
            if (scanToEnd === true) continue;
            break;
        }
    }
    if (opts.noext === true) {
        isExtglob = false;
        isGlob = false;
    }
    let base = str;
    let prefix = "";
    let glob = "";
    if (start > 0) {
        prefix = str.slice(0, start);
        str = str.slice(start);
        lastIndex -= start;
    }
    if (base && isGlob === true && lastIndex > 0) {
        base = str.slice(0, lastIndex);
        glob = str.slice(lastIndex);
    } else if (isGlob === true) {
        base = "";
        glob = str;
    } else base = str;
    if (base && base !== "" && base !== "/" && base !== str) {
        if ($96a8c569ca8cf0ca$var$isPathSeparator(base.charCodeAt(base.length - 1))) base = base.slice(0, -1);
    }
    if (opts.unescape === true) {
        if (glob) glob = $9kveb.removeBackslashes(glob);
        if (base && backslashes === true) base = $9kveb.removeBackslashes(base);
    }
    const state = {
        prefix: prefix,
        input: input,
        start: start,
        base: base,
        glob: glob,
        isBrace: isBrace,
        isBracket: isBracket,
        isGlob: isGlob,
        isExtglob: isExtglob,
        isGlobstar: isGlobstar,
        negated: negated,
        negatedExtglob: negatedExtglob
    };
    if (opts.tokens === true) {
        state.maxDepth = 0;
        if (!$96a8c569ca8cf0ca$var$isPathSeparator(code)) tokens.push(token);
        state.tokens = tokens;
    }
    if (opts.parts === true || opts.tokens === true) {
        let prevIndex;
        for(let idx = 0; idx < slashes.length; idx++){
            const n = prevIndex ? prevIndex + 1 : start;
            const i = slashes[idx];
            const value = input.slice(n, i);
            if (opts.tokens) {
                if (idx === 0 && start !== 0) {
                    tokens[idx].isPrefix = true;
                    tokens[idx].value = prefix;
                } else tokens[idx].value = value;
                $96a8c569ca8cf0ca$var$depth(tokens[idx]);
                state.maxDepth += tokens[idx].depth;
            }
            if (idx !== 0 || value !== "") parts.push(value);
            prevIndex = i;
        }
        if (prevIndex && prevIndex + 1 < input.length) {
            const value = input.slice(prevIndex + 1);
            parts.push(value);
            if (opts.tokens) {
                tokens[tokens.length - 1].value = value;
                $96a8c569ca8cf0ca$var$depth(tokens[tokens.length - 1]);
                state.maxDepth += tokens[tokens.length - 1].depth;
            }
        }
        state.slashes = slashes;
        state.parts = parts;
    }
    return state;
};
module.exports = $96a8c569ca8cf0ca$var$scan;

});
parcelRegister("9kveb", function(module, exports) {

$parcel$export(module.exports, "isObject", () => $6cae347cab102e18$export$a6cdc56e425d0d0a, (v) => $6cae347cab102e18$export$a6cdc56e425d0d0a = v);
$parcel$export(module.exports, "hasRegexChars", () => $6cae347cab102e18$export$6540a013a39bb50d, (v) => $6cae347cab102e18$export$6540a013a39bb50d = v);
$parcel$export(module.exports, "escapeRegex", () => $6cae347cab102e18$export$104ed90cc1a13451, (v) => $6cae347cab102e18$export$104ed90cc1a13451 = v);
$parcel$export(module.exports, "toPosixSlashes", () => $6cae347cab102e18$export$e610e037975797ee, (v) => $6cae347cab102e18$export$e610e037975797ee = v);
$parcel$export(module.exports, "removeBackslashes", () => $6cae347cab102e18$export$f403de0a7ba7a743, (v) => $6cae347cab102e18$export$f403de0a7ba7a743 = v);
$parcel$export(module.exports, "supportsLookbehinds", () => $6cae347cab102e18$export$bcf709e5e3483cdb, (v) => $6cae347cab102e18$export$bcf709e5e3483cdb = v);
$parcel$export(module.exports, "isWindows", () => $6cae347cab102e18$export$f993c945890e93ba, (v) => $6cae347cab102e18$export$f993c945890e93ba = v);
$parcel$export(module.exports, "escapeLast", () => $6cae347cab102e18$export$13d0f4185f159c8, (v) => $6cae347cab102e18$export$13d0f4185f159c8 = v);
$parcel$export(module.exports, "removePrefix", () => $6cae347cab102e18$export$f2888183a34644d4, (v) => $6cae347cab102e18$export$f2888183a34644d4 = v);
$parcel$export(module.exports, "wrapOutput", () => $6cae347cab102e18$export$25bddda26836484b, (v) => $6cae347cab102e18$export$25bddda26836484b = v);
var $6cae347cab102e18$export$a6cdc56e425d0d0a;
var $6cae347cab102e18$export$6540a013a39bb50d;
var $6cae347cab102e18$export$a92319f7ab133839;
var $6cae347cab102e18$export$104ed90cc1a13451;
var $6cae347cab102e18$export$e610e037975797ee;
var $6cae347cab102e18$export$f403de0a7ba7a743;
var $6cae347cab102e18$export$bcf709e5e3483cdb;
var $6cae347cab102e18$export$f993c945890e93ba;
var $6cae347cab102e18$export$13d0f4185f159c8;
var $6cae347cab102e18$export$f2888183a34644d4;
var $6cae347cab102e18$export$25bddda26836484b;
"use strict";

const $6cae347cab102e18$var$win32 = process.platform === "win32";

var $7nDuE = parcelRequire("7nDuE");
var $6cae347cab102e18$require$REGEX_BACKSLASH = $7nDuE.REGEX_BACKSLASH;
var $6cae347cab102e18$require$REGEX_REMOVE_BACKSLASH = $7nDuE.REGEX_REMOVE_BACKSLASH;
var $6cae347cab102e18$require$REGEX_SPECIAL_CHARS = $7nDuE.REGEX_SPECIAL_CHARS;
var $6cae347cab102e18$require$REGEX_SPECIAL_CHARS_GLOBAL = $7nDuE.REGEX_SPECIAL_CHARS_GLOBAL;
$6cae347cab102e18$export$a6cdc56e425d0d0a = (val)=>val !== null && typeof val === "object" && !Array.isArray(val);
$6cae347cab102e18$export$6540a013a39bb50d = (str)=>$6cae347cab102e18$require$REGEX_SPECIAL_CHARS.test(str);
$6cae347cab102e18$export$a92319f7ab133839 = (str)=>str.length === 1 && $6cae347cab102e18$export$6540a013a39bb50d(str);
$6cae347cab102e18$export$104ed90cc1a13451 = (str)=>str.replace($6cae347cab102e18$require$REGEX_SPECIAL_CHARS_GLOBAL, "\\$1");
$6cae347cab102e18$export$e610e037975797ee = (str)=>str.replace($6cae347cab102e18$require$REGEX_BACKSLASH, "/");
$6cae347cab102e18$export$f403de0a7ba7a743 = (str)=>{
    return str.replace($6cae347cab102e18$require$REGEX_REMOVE_BACKSLASH, (match)=>{
        return match === "\\" ? "" : match;
    });
};
$6cae347cab102e18$export$bcf709e5e3483cdb = ()=>{
    const segs = process.version.slice(1).split(".").map(Number);
    if (segs.length === 3 && segs[0] >= 9 || segs[0] === 8 && segs[1] >= 10) return true;
    return false;
};
$6cae347cab102e18$export$f993c945890e93ba = (options)=>{
    if (options && typeof options.windows === "boolean") return options.windows;
    return $6cae347cab102e18$var$win32 === true || $eJUMF$path.sep === "\\";
};
$6cae347cab102e18$export$13d0f4185f159c8 = (input, char, lastIdx)=>{
    const idx = input.lastIndexOf(char, lastIdx);
    if (idx === -1) return input;
    if (input[idx - 1] === "\\") return $6cae347cab102e18$export$13d0f4185f159c8(input, char, idx - 1);
    return `${input.slice(0, idx)}\\${input.slice(idx)}`;
};
$6cae347cab102e18$export$f2888183a34644d4 = (input, state = {})=>{
    let output = input;
    if (output.startsWith("./")) {
        output = output.slice(2);
        state.prefix = "./";
    }
    return output;
};
$6cae347cab102e18$export$25bddda26836484b = (input, state = {}, options = {})=>{
    const prepend = options.contains ? "" : "^";
    const append = options.contains ? "" : "$";
    let output = `${prepend}(?:${input})${append}`;
    if (state.negated === true) output = `(?:^(?!${output}).*$)`;
    return output;
};

});
parcelRegister("7nDuE", function(module, exports) {
"use strict";

const $55f950f22c20c933$var$WIN_SLASH = "\\\\/";
const $55f950f22c20c933$var$WIN_NO_SLASH = `[^${$55f950f22c20c933$var$WIN_SLASH}]`;
/**
 * Posix glob regex
 */ const $55f950f22c20c933$var$DOT_LITERAL = "\\.";
const $55f950f22c20c933$var$PLUS_LITERAL = "\\+";
const $55f950f22c20c933$var$QMARK_LITERAL = "\\?";
const $55f950f22c20c933$var$SLASH_LITERAL = "\\/";
const $55f950f22c20c933$var$ONE_CHAR = "(?=.)";
const $55f950f22c20c933$var$QMARK = "[^/]";
const $55f950f22c20c933$var$END_ANCHOR = `(?:${$55f950f22c20c933$var$SLASH_LITERAL}|$)`;
const $55f950f22c20c933$var$START_ANCHOR = `(?:^|${$55f950f22c20c933$var$SLASH_LITERAL})`;
const $55f950f22c20c933$var$DOTS_SLASH = `${$55f950f22c20c933$var$DOT_LITERAL}{1,2}${$55f950f22c20c933$var$END_ANCHOR}`;
const $55f950f22c20c933$var$NO_DOT = `(?!${$55f950f22c20c933$var$DOT_LITERAL})`;
const $55f950f22c20c933$var$NO_DOTS = `(?!${$55f950f22c20c933$var$START_ANCHOR}${$55f950f22c20c933$var$DOTS_SLASH})`;
const $55f950f22c20c933$var$NO_DOT_SLASH = `(?!${$55f950f22c20c933$var$DOT_LITERAL}{0,1}${$55f950f22c20c933$var$END_ANCHOR})`;
const $55f950f22c20c933$var$NO_DOTS_SLASH = `(?!${$55f950f22c20c933$var$DOTS_SLASH})`;
const $55f950f22c20c933$var$QMARK_NO_DOT = `[^.${$55f950f22c20c933$var$SLASH_LITERAL}]`;
const $55f950f22c20c933$var$STAR = `${$55f950f22c20c933$var$QMARK}*?`;
const $55f950f22c20c933$var$POSIX_CHARS = {
    DOT_LITERAL: $55f950f22c20c933$var$DOT_LITERAL,
    PLUS_LITERAL: $55f950f22c20c933$var$PLUS_LITERAL,
    QMARK_LITERAL: $55f950f22c20c933$var$QMARK_LITERAL,
    SLASH_LITERAL: $55f950f22c20c933$var$SLASH_LITERAL,
    ONE_CHAR: $55f950f22c20c933$var$ONE_CHAR,
    QMARK: $55f950f22c20c933$var$QMARK,
    END_ANCHOR: $55f950f22c20c933$var$END_ANCHOR,
    DOTS_SLASH: $55f950f22c20c933$var$DOTS_SLASH,
    NO_DOT: $55f950f22c20c933$var$NO_DOT,
    NO_DOTS: $55f950f22c20c933$var$NO_DOTS,
    NO_DOT_SLASH: $55f950f22c20c933$var$NO_DOT_SLASH,
    NO_DOTS_SLASH: $55f950f22c20c933$var$NO_DOTS_SLASH,
    QMARK_NO_DOT: $55f950f22c20c933$var$QMARK_NO_DOT,
    STAR: $55f950f22c20c933$var$STAR,
    START_ANCHOR: $55f950f22c20c933$var$START_ANCHOR
};
/**
 * Windows glob regex
 */ const $55f950f22c20c933$var$WINDOWS_CHARS = {
    ...$55f950f22c20c933$var$POSIX_CHARS,
    SLASH_LITERAL: `[${$55f950f22c20c933$var$WIN_SLASH}]`,
    QMARK: $55f950f22c20c933$var$WIN_NO_SLASH,
    STAR: `${$55f950f22c20c933$var$WIN_NO_SLASH}*?`,
    DOTS_SLASH: `${$55f950f22c20c933$var$DOT_LITERAL}{1,2}(?:[${$55f950f22c20c933$var$WIN_SLASH}]|$)`,
    NO_DOT: `(?!${$55f950f22c20c933$var$DOT_LITERAL})`,
    NO_DOTS: `(?!(?:^|[${$55f950f22c20c933$var$WIN_SLASH}])${$55f950f22c20c933$var$DOT_LITERAL}{1,2}(?:[${$55f950f22c20c933$var$WIN_SLASH}]|$))`,
    NO_DOT_SLASH: `(?!${$55f950f22c20c933$var$DOT_LITERAL}{0,1}(?:[${$55f950f22c20c933$var$WIN_SLASH}]|$))`,
    NO_DOTS_SLASH: `(?!${$55f950f22c20c933$var$DOT_LITERAL}{1,2}(?:[${$55f950f22c20c933$var$WIN_SLASH}]|$))`,
    QMARK_NO_DOT: `[^.${$55f950f22c20c933$var$WIN_SLASH}]`,
    START_ANCHOR: `(?:^|[${$55f950f22c20c933$var$WIN_SLASH}])`,
    END_ANCHOR: `(?:[${$55f950f22c20c933$var$WIN_SLASH}]|$)`
};
/**
 * POSIX Bracket Regex
 */ const $55f950f22c20c933$var$POSIX_REGEX_SOURCE = {
    alnum: "a-zA-Z0-9",
    alpha: "a-zA-Z",
    ascii: "\\x00-\\x7F",
    blank: " \\t",
    cntrl: "\\x00-\\x1F\\x7F",
    digit: "0-9",
    graph: "\\x21-\\x7E",
    lower: "a-z",
    print: "\\x20-\\x7E ",
    punct: "\\-!\"#$%&'()\\*+,./:;<=>?@[\\]^_`{|}~",
    space: " \\t\\r\\n\\v\\f",
    upper: "A-Z",
    word: "A-Za-z0-9_",
    xdigit: "A-Fa-f0-9"
};
module.exports = {
    MAX_LENGTH: 65536,
    POSIX_REGEX_SOURCE: $55f950f22c20c933$var$POSIX_REGEX_SOURCE,
    // regular expressions
    REGEX_BACKSLASH: /\\(?![*+?^${}(|)[\]])/g,
    REGEX_NON_SPECIAL_CHARS: /^[^@![\].,$*+?^{}()|\\/]+/,
    REGEX_SPECIAL_CHARS: /[-*+?.^${}(|)[\]]/,
    REGEX_SPECIAL_CHARS_BACKREF: /(\\?)((\W)(\3*))/g,
    REGEX_SPECIAL_CHARS_GLOBAL: /([-*+?.^${}(|)[\]])/g,
    REGEX_REMOVE_BACKSLASH: /(?:\[.*?[^\\]\]|\\(?=.))/g,
    // Replace globs with equivalent patterns to reduce parsing time.
    REPLACEMENTS: {
        "***": "*",
        "**/**": "**",
        "**/**/**": "**"
    },
    // Digits
    CHAR_0: 48,
    /* 0 */ CHAR_9: 57,
    /* 9 */ // Alphabet chars.
    CHAR_UPPERCASE_A: 65,
    /* A */ CHAR_LOWERCASE_A: 97,
    /* a */ CHAR_UPPERCASE_Z: 90,
    /* Z */ CHAR_LOWERCASE_Z: 122,
    /* z */ CHAR_LEFT_PARENTHESES: 40,
    /* ( */ CHAR_RIGHT_PARENTHESES: 41,
    /* ) */ CHAR_ASTERISK: 42,
    /* * */ // Non-alphabetic chars.
    CHAR_AMPERSAND: 38,
    /* & */ CHAR_AT: 64,
    /* @ */ CHAR_BACKWARD_SLASH: 92,
    /* \ */ CHAR_CARRIAGE_RETURN: 13,
    /* \r */ CHAR_CIRCUMFLEX_ACCENT: 94,
    /* ^ */ CHAR_COLON: 58,
    /* : */ CHAR_COMMA: 44,
    /* , */ CHAR_DOT: 46,
    /* . */ CHAR_DOUBLE_QUOTE: 34,
    /* " */ CHAR_EQUAL: 61,
    /* = */ CHAR_EXCLAMATION_MARK: 33,
    /* ! */ CHAR_FORM_FEED: 12,
    /* \f */ CHAR_FORWARD_SLASH: 47,
    /* / */ CHAR_GRAVE_ACCENT: 96,
    /* ` */ CHAR_HASH: 35,
    /* # */ CHAR_HYPHEN_MINUS: 45,
    /* - */ CHAR_LEFT_ANGLE_BRACKET: 60,
    /* < */ CHAR_LEFT_CURLY_BRACE: 123,
    /* { */ CHAR_LEFT_SQUARE_BRACKET: 91,
    /* [ */ CHAR_LINE_FEED: 10,
    /* \n */ CHAR_NO_BREAK_SPACE: 160,
    /* \u00A0 */ CHAR_PERCENT: 37,
    /* % */ CHAR_PLUS: 43,
    /* + */ CHAR_QUESTION_MARK: 63,
    /* ? */ CHAR_RIGHT_ANGLE_BRACKET: 62,
    /* > */ CHAR_RIGHT_CURLY_BRACE: 125,
    /* } */ CHAR_RIGHT_SQUARE_BRACKET: 93,
    /* ] */ CHAR_SEMICOLON: 59,
    /* ; */ CHAR_SINGLE_QUOTE: 39,
    /* ' */ CHAR_SPACE: 32,
    /*   */ CHAR_TAB: 9,
    /* \t */ CHAR_UNDERSCORE: 95,
    /* _ */ CHAR_VERTICAL_LINE: 124,
    /* | */ CHAR_ZERO_WIDTH_NOBREAK_SPACE: 65279,
    /* \uFEFF */ SEP: $eJUMF$path.sep,
    /**
   * Create EXTGLOB_CHARS
   */ extglobChars (chars) {
        return {
            "!": {
                type: "negate",
                open: "(?:(?!(?:",
                close: `))${chars.STAR})`
            },
            "?": {
                type: "qmark",
                open: "(?:",
                close: ")?"
            },
            "+": {
                type: "plus",
                open: "(?:",
                close: ")+"
            },
            "*": {
                type: "star",
                open: "(?:",
                close: ")*"
            },
            "@": {
                type: "at",
                open: "(?:",
                close: ")"
            }
        };
    },
    /**
   * Create GLOB_CHARS
   */ globChars (win32) {
        return win32 === true ? $55f950f22c20c933$var$WINDOWS_CHARS : $55f950f22c20c933$var$POSIX_CHARS;
    }
};

});



parcelRegister("bWS3W", function(module, exports) {
"use strict";

var $7nDuE = parcelRequire("7nDuE");

var $9kveb = parcelRequire("9kveb");
/**
 * Constants
 */ const { MAX_LENGTH: $8b2f0c2eaecf2312$var$MAX_LENGTH, POSIX_REGEX_SOURCE: $8b2f0c2eaecf2312$var$POSIX_REGEX_SOURCE, REGEX_NON_SPECIAL_CHARS: $8b2f0c2eaecf2312$var$REGEX_NON_SPECIAL_CHARS, REGEX_SPECIAL_CHARS_BACKREF: $8b2f0c2eaecf2312$var$REGEX_SPECIAL_CHARS_BACKREF, REPLACEMENTS: $8b2f0c2eaecf2312$var$REPLACEMENTS } = $7nDuE;
/**
 * Helpers
 */ const $8b2f0c2eaecf2312$var$expandRange = (args, options)=>{
    if (typeof options.expandRange === "function") return options.expandRange(...args, options);
    args.sort();
    const value = `[${args.join("-")}]`;
    try {
        /* eslint-disable-next-line no-new */ new RegExp(value);
    } catch (ex) {
        return args.map((v)=>$9kveb.escapeRegex(v)).join("..");
    }
    return value;
};
/**
 * Create the message for a syntax error
 */ const $8b2f0c2eaecf2312$var$syntaxError = (type, char)=>{
    return `Missing ${type}: "${char}" - use "\\\\${char}" to match literal characters`;
};
/**
 * Parse the given input string.
 * @param {String} input
 * @param {Object} options
 * @return {Object}
 */ const $8b2f0c2eaecf2312$var$parse = (input, options)=>{
    if (typeof input !== "string") throw new TypeError("Expected a string");
    input = $8b2f0c2eaecf2312$var$REPLACEMENTS[input] || input;
    const opts = {
        ...options
    };
    const max = typeof opts.maxLength === "number" ? Math.min($8b2f0c2eaecf2312$var$MAX_LENGTH, opts.maxLength) : $8b2f0c2eaecf2312$var$MAX_LENGTH;
    let len = input.length;
    if (len > max) throw new SyntaxError(`Input length: ${len}, exceeds maximum allowed length: ${max}`);
    const bos = {
        type: "bos",
        value: "",
        output: opts.prepend || ""
    };
    const tokens = [
        bos
    ];
    const capture = opts.capture ? "" : "?:";
    const win32 = $9kveb.isWindows(options);
    // create constants based on platform, for windows or posix
    const PLATFORM_CHARS = $7nDuE.globChars(win32);
    const EXTGLOB_CHARS = $7nDuE.extglobChars(PLATFORM_CHARS);
    const { DOT_LITERAL: DOT_LITERAL, PLUS_LITERAL: PLUS_LITERAL, SLASH_LITERAL: SLASH_LITERAL, ONE_CHAR: ONE_CHAR, DOTS_SLASH: DOTS_SLASH, NO_DOT: NO_DOT, NO_DOT_SLASH: NO_DOT_SLASH, NO_DOTS_SLASH: NO_DOTS_SLASH, QMARK: QMARK, QMARK_NO_DOT: QMARK_NO_DOT, STAR: STAR, START_ANCHOR: START_ANCHOR } = PLATFORM_CHARS;
    const globstar = (opts)=>{
        return `(${capture}(?:(?!${START_ANCHOR}${opts.dot ? DOTS_SLASH : DOT_LITERAL}).)*?)`;
    };
    const nodot = opts.dot ? "" : NO_DOT;
    const qmarkNoDot = opts.dot ? QMARK : QMARK_NO_DOT;
    let star = opts.bash === true ? globstar(opts) : STAR;
    if (opts.capture) star = `(${star})`;
    // minimatch options support
    if (typeof opts.noext === "boolean") opts.noextglob = opts.noext;
    const state = {
        input: input,
        index: -1,
        start: 0,
        dot: opts.dot === true,
        consumed: "",
        output: "",
        prefix: "",
        backtrack: false,
        negated: false,
        brackets: 0,
        braces: 0,
        parens: 0,
        quotes: 0,
        globstar: false,
        tokens: tokens
    };
    input = $9kveb.removePrefix(input, state);
    len = input.length;
    const extglobs = [];
    const braces = [];
    const stack = [];
    let prev = bos;
    let value;
    /**
   * Tokenizing helpers
   */ const eos = ()=>state.index === len - 1;
    const peek = state.peek = (n = 1)=>input[state.index + n];
    const advance = state.advance = ()=>input[++state.index] || "";
    const remaining = ()=>input.slice(state.index + 1);
    const consume = (value = "", num = 0)=>{
        state.consumed += value;
        state.index += num;
    };
    const append = (token)=>{
        state.output += token.output != null ? token.output : token.value;
        consume(token.value);
    };
    const negate = ()=>{
        let count = 1;
        while(peek() === "!" && (peek(2) !== "(" || peek(3) === "?")){
            advance();
            state.start++;
            count++;
        }
        if (count % 2 === 0) return false;
        state.negated = true;
        state.start++;
        return true;
    };
    const increment = (type)=>{
        state[type]++;
        stack.push(type);
    };
    const decrement = (type)=>{
        state[type]--;
        stack.pop();
    };
    /**
   * Push tokens onto the tokens array. This helper speeds up
   * tokenizing by 1) helping us avoid backtracking as much as possible,
   * and 2) helping us avoid creating extra tokens when consecutive
   * characters are plain text. This improves performance and simplifies
   * lookbehinds.
   */ const push = (tok)=>{
        if (prev.type === "globstar") {
            const isBrace = state.braces > 0 && (tok.type === "comma" || tok.type === "brace");
            const isExtglob = tok.extglob === true || extglobs.length && (tok.type === "pipe" || tok.type === "paren");
            if (tok.type !== "slash" && tok.type !== "paren" && !isBrace && !isExtglob) {
                state.output = state.output.slice(0, -prev.output.length);
                prev.type = "star";
                prev.value = "*";
                prev.output = star;
                state.output += prev.output;
            }
        }
        if (extglobs.length && tok.type !== "paren") extglobs[extglobs.length - 1].inner += tok.value;
        if (tok.value || tok.output) append(tok);
        if (prev && prev.type === "text" && tok.type === "text") {
            prev.value += tok.value;
            prev.output = (prev.output || "") + tok.value;
            return;
        }
        tok.prev = prev;
        tokens.push(tok);
        prev = tok;
    };
    const extglobOpen = (type, value)=>{
        const token = {
            ...EXTGLOB_CHARS[value],
            conditions: 1,
            inner: ""
        };
        token.prev = prev;
        token.parens = state.parens;
        token.output = state.output;
        const output = (opts.capture ? "(" : "") + token.open;
        increment("parens");
        push({
            type: type,
            value: value,
            output: state.output ? "" : ONE_CHAR
        });
        push({
            type: "paren",
            extglob: true,
            value: advance(),
            output: output
        });
        extglobs.push(token);
    };
    const extglobClose = (token)=>{
        let output = token.close + (opts.capture ? ")" : "");
        let rest;
        if (token.type === "negate") {
            let extglobStar = star;
            if (token.inner && token.inner.length > 1 && token.inner.includes("/")) extglobStar = globstar(opts);
            if (extglobStar !== star || eos() || /^\)+$/.test(remaining())) output = token.close = `)$))${extglobStar}`;
            if (token.inner.includes("*") && (rest = remaining()) && /^\.[^\\/.]+$/.test(rest)) {
                // Any non-magical string (`.ts`) or even nested expression (`.{ts,tsx}`) can follow after the closing parenthesis.
                // In this case, we need to parse the string and use it in the output of the original pattern.
                // Suitable patterns: `/!(*.d).ts`, `/!(*.d).{ts,tsx}`, `**/!(*-dbg).@(js)`.
                //
                // Disabling the `fastpaths` option due to a problem with parsing strings as `.ts` in the pattern like `**/!(*.d).ts`.
                const expression = $8b2f0c2eaecf2312$var$parse(rest, {
                    ...options,
                    fastpaths: false
                }).output;
                output = token.close = `)${expression})${extglobStar})`;
            }
            if (token.prev.type === "bos") state.negatedExtglob = true;
        }
        push({
            type: "paren",
            extglob: true,
            value: value,
            output: output
        });
        decrement("parens");
    };
    /**
   * Fast paths
   */ if (opts.fastpaths !== false && !/(^[*!]|[/()[\]{}"])/.test(input)) {
        let backslashes = false;
        let output = input.replace($8b2f0c2eaecf2312$var$REGEX_SPECIAL_CHARS_BACKREF, (m, esc, chars, first, rest, index)=>{
            if (first === "\\") {
                backslashes = true;
                return m;
            }
            if (first === "?") {
                if (esc) return esc + first + (rest ? QMARK.repeat(rest.length) : "");
                if (index === 0) return qmarkNoDot + (rest ? QMARK.repeat(rest.length) : "");
                return QMARK.repeat(chars.length);
            }
            if (first === ".") return DOT_LITERAL.repeat(chars.length);
            if (first === "*") {
                if (esc) return esc + first + (rest ? star : "");
                return star;
            }
            return esc ? m : `\\${m}`;
        });
        if (backslashes === true) {
            if (opts.unescape === true) output = output.replace(/\\/g, "");
            else output = output.replace(/\\+/g, (m)=>{
                return m.length % 2 === 0 ? "\\\\" : m ? "\\" : "";
            });
        }
        if (output === input && opts.contains === true) {
            state.output = input;
            return state;
        }
        state.output = $9kveb.wrapOutput(output, state, options);
        return state;
    }
    /**
   * Tokenize input until we reach end-of-string
   */ while(!eos()){
        value = advance();
        if (value === "\0") continue;
        /**
     * Escaped characters
     */ if (value === "\\") {
            const next = peek();
            if (next === "/" && opts.bash !== true) continue;
            if (next === "." || next === ";") continue;
            if (!next) {
                value += "\\";
                push({
                    type: "text",
                    value: value
                });
                continue;
            }
            // collapse slashes to reduce potential for exploits
            const match = /^\\+/.exec(remaining());
            let slashes = 0;
            if (match && match[0].length > 2) {
                slashes = match[0].length;
                state.index += slashes;
                if (slashes % 2 !== 0) value += "\\";
            }
            if (opts.unescape === true) value = advance();
            else value += advance();
            if (state.brackets === 0) {
                push({
                    type: "text",
                    value: value
                });
                continue;
            }
        }
        /**
     * If we're inside a regex character class, continue
     * until we reach the closing bracket.
     */ if (state.brackets > 0 && (value !== "]" || prev.value === "[" || prev.value === "[^")) {
            if (opts.posix !== false && value === ":") {
                const inner = prev.value.slice(1);
                if (inner.includes("[")) {
                    prev.posix = true;
                    if (inner.includes(":")) {
                        const idx = prev.value.lastIndexOf("[");
                        const pre = prev.value.slice(0, idx);
                        const rest = prev.value.slice(idx + 2);
                        const posix = $8b2f0c2eaecf2312$var$POSIX_REGEX_SOURCE[rest];
                        if (posix) {
                            prev.value = pre + posix;
                            state.backtrack = true;
                            advance();
                            if (!bos.output && tokens.indexOf(prev) === 1) bos.output = ONE_CHAR;
                            continue;
                        }
                    }
                }
            }
            if (value === "[" && peek() !== ":" || value === "-" && peek() === "]") value = `\\${value}`;
            if (value === "]" && (prev.value === "[" || prev.value === "[^")) value = `\\${value}`;
            if (opts.posix === true && value === "!" && prev.value === "[") value = "^";
            prev.value += value;
            append({
                value: value
            });
            continue;
        }
        /**
     * If we're inside a quoted string, continue
     * until we reach the closing double quote.
     */ if (state.quotes === 1 && value !== '"') {
            value = $9kveb.escapeRegex(value);
            prev.value += value;
            append({
                value: value
            });
            continue;
        }
        /**
     * Double quotes
     */ if (value === '"') {
            state.quotes = state.quotes === 1 ? 0 : 1;
            if (opts.keepQuotes === true) push({
                type: "text",
                value: value
            });
            continue;
        }
        /**
     * Parentheses
     */ if (value === "(") {
            increment("parens");
            push({
                type: "paren",
                value: value
            });
            continue;
        }
        if (value === ")") {
            if (state.parens === 0 && opts.strictBrackets === true) throw new SyntaxError($8b2f0c2eaecf2312$var$syntaxError("opening", "("));
            const extglob = extglobs[extglobs.length - 1];
            if (extglob && state.parens === extglob.parens + 1) {
                extglobClose(extglobs.pop());
                continue;
            }
            push({
                type: "paren",
                value: value,
                output: state.parens ? ")" : "\\)"
            });
            decrement("parens");
            continue;
        }
        /**
     * Square brackets
     */ if (value === "[") {
            if (opts.nobracket === true || !remaining().includes("]")) {
                if (opts.nobracket !== true && opts.strictBrackets === true) throw new SyntaxError($8b2f0c2eaecf2312$var$syntaxError("closing", "]"));
                value = `\\${value}`;
            } else increment("brackets");
            push({
                type: "bracket",
                value: value
            });
            continue;
        }
        if (value === "]") {
            if (opts.nobracket === true || prev && prev.type === "bracket" && prev.value.length === 1) {
                push({
                    type: "text",
                    value: value,
                    output: `\\${value}`
                });
                continue;
            }
            if (state.brackets === 0) {
                if (opts.strictBrackets === true) throw new SyntaxError($8b2f0c2eaecf2312$var$syntaxError("opening", "["));
                push({
                    type: "text",
                    value: value,
                    output: `\\${value}`
                });
                continue;
            }
            decrement("brackets");
            const prevValue = prev.value.slice(1);
            if (prev.posix !== true && prevValue[0] === "^" && !prevValue.includes("/")) value = `/${value}`;
            prev.value += value;
            append({
                value: value
            });
            // when literal brackets are explicitly disabled
            // assume we should match with a regex character class
            if (opts.literalBrackets === false || $9kveb.hasRegexChars(prevValue)) continue;
            const escaped = $9kveb.escapeRegex(prev.value);
            state.output = state.output.slice(0, -prev.value.length);
            // when literal brackets are explicitly enabled
            // assume we should escape the brackets to match literal characters
            if (opts.literalBrackets === true) {
                state.output += escaped;
                prev.value = escaped;
                continue;
            }
            // when the user specifies nothing, try to match both
            prev.value = `(${capture}${escaped}|${prev.value})`;
            state.output += prev.value;
            continue;
        }
        /**
     * Braces
     */ if (value === "{" && opts.nobrace !== true) {
            increment("braces");
            const open = {
                type: "brace",
                value: value,
                output: "(",
                outputIndex: state.output.length,
                tokensIndex: state.tokens.length
            };
            braces.push(open);
            push(open);
            continue;
        }
        if (value === "}") {
            const brace = braces[braces.length - 1];
            if (opts.nobrace === true || !brace) {
                push({
                    type: "text",
                    value: value,
                    output: value
                });
                continue;
            }
            let output = ")";
            if (brace.dots === true) {
                const arr = tokens.slice();
                const range = [];
                for(let i = arr.length - 1; i >= 0; i--){
                    tokens.pop();
                    if (arr[i].type === "brace") break;
                    if (arr[i].type !== "dots") range.unshift(arr[i].value);
                }
                output = $8b2f0c2eaecf2312$var$expandRange(range, opts);
                state.backtrack = true;
            }
            if (brace.comma !== true && brace.dots !== true) {
                const out = state.output.slice(0, brace.outputIndex);
                const toks = state.tokens.slice(brace.tokensIndex);
                brace.value = brace.output = "\\{";
                value = output = "\\}";
                state.output = out;
                for (const t of toks)state.output += t.output || t.value;
            }
            push({
                type: "brace",
                value: value,
                output: output
            });
            decrement("braces");
            braces.pop();
            continue;
        }
        /**
     * Pipes
     */ if (value === "|") {
            if (extglobs.length > 0) extglobs[extglobs.length - 1].conditions++;
            push({
                type: "text",
                value: value
            });
            continue;
        }
        /**
     * Commas
     */ if (value === ",") {
            let output = value;
            const brace = braces[braces.length - 1];
            if (brace && stack[stack.length - 1] === "braces") {
                brace.comma = true;
                output = "|";
            }
            push({
                type: "comma",
                value: value,
                output: output
            });
            continue;
        }
        /**
     * Slashes
     */ if (value === "/") {
            // if the beginning of the glob is "./", advance the start
            // to the current index, and don't add the "./" characters
            // to the state. This greatly simplifies lookbehinds when
            // checking for BOS characters like "!" and "." (not "./")
            if (prev.type === "dot" && state.index === state.start + 1) {
                state.start = state.index + 1;
                state.consumed = "";
                state.output = "";
                tokens.pop();
                prev = bos; // reset "prev" to the first token
                continue;
            }
            push({
                type: "slash",
                value: value,
                output: SLASH_LITERAL
            });
            continue;
        }
        /**
     * Dots
     */ if (value === ".") {
            if (state.braces > 0 && prev.type === "dot") {
                if (prev.value === ".") prev.output = DOT_LITERAL;
                const brace = braces[braces.length - 1];
                prev.type = "dots";
                prev.output += value;
                prev.value += value;
                brace.dots = true;
                continue;
            }
            if (state.braces + state.parens === 0 && prev.type !== "bos" && prev.type !== "slash") {
                push({
                    type: "text",
                    value: value,
                    output: DOT_LITERAL
                });
                continue;
            }
            push({
                type: "dot",
                value: value,
                output: DOT_LITERAL
            });
            continue;
        }
        /**
     * Question marks
     */ if (value === "?") {
            const isGroup = prev && prev.value === "(";
            if (!isGroup && opts.noextglob !== true && peek() === "(" && peek(2) !== "?") {
                extglobOpen("qmark", value);
                continue;
            }
            if (prev && prev.type === "paren") {
                const next = peek();
                let output = value;
                if (next === "<" && !$9kveb.supportsLookbehinds()) throw new Error("Node.js v10 or higher is required for regex lookbehinds");
                if (prev.value === "(" && !/[!=<:]/.test(next) || next === "<" && !/<([!=]|\w+>)/.test(remaining())) output = `\\${value}`;
                push({
                    type: "text",
                    value: value,
                    output: output
                });
                continue;
            }
            if (opts.dot !== true && (prev.type === "slash" || prev.type === "bos")) {
                push({
                    type: "qmark",
                    value: value,
                    output: QMARK_NO_DOT
                });
                continue;
            }
            push({
                type: "qmark",
                value: value,
                output: QMARK
            });
            continue;
        }
        /**
     * Exclamation
     */ if (value === "!") {
            if (opts.noextglob !== true && peek() === "(") {
                if (peek(2) !== "?" || !/[!=<:]/.test(peek(3))) {
                    extglobOpen("negate", value);
                    continue;
                }
            }
            if (opts.nonegate !== true && state.index === 0) {
                negate();
                continue;
            }
        }
        /**
     * Plus
     */ if (value === "+") {
            if (opts.noextglob !== true && peek() === "(" && peek(2) !== "?") {
                extglobOpen("plus", value);
                continue;
            }
            if (prev && prev.value === "(" || opts.regex === false) {
                push({
                    type: "plus",
                    value: value,
                    output: PLUS_LITERAL
                });
                continue;
            }
            if (prev && (prev.type === "bracket" || prev.type === "paren" || prev.type === "brace") || state.parens > 0) {
                push({
                    type: "plus",
                    value: value
                });
                continue;
            }
            push({
                type: "plus",
                value: PLUS_LITERAL
            });
            continue;
        }
        /**
     * Plain text
     */ if (value === "@") {
            if (opts.noextglob !== true && peek() === "(" && peek(2) !== "?") {
                push({
                    type: "at",
                    extglob: true,
                    value: value,
                    output: ""
                });
                continue;
            }
            push({
                type: "text",
                value: value
            });
            continue;
        }
        /**
     * Plain text
     */ if (value !== "*") {
            if (value === "$" || value === "^") value = `\\${value}`;
            const match = $8b2f0c2eaecf2312$var$REGEX_NON_SPECIAL_CHARS.exec(remaining());
            if (match) {
                value += match[0];
                state.index += match[0].length;
            }
            push({
                type: "text",
                value: value
            });
            continue;
        }
        /**
     * Stars
     */ if (prev && (prev.type === "globstar" || prev.star === true)) {
            prev.type = "star";
            prev.star = true;
            prev.value += value;
            prev.output = star;
            state.backtrack = true;
            state.globstar = true;
            consume(value);
            continue;
        }
        let rest = remaining();
        if (opts.noextglob !== true && /^\([^?]/.test(rest)) {
            extglobOpen("star", value);
            continue;
        }
        if (prev.type === "star") {
            if (opts.noglobstar === true) {
                consume(value);
                continue;
            }
            const prior = prev.prev;
            const before = prior.prev;
            const isStart = prior.type === "slash" || prior.type === "bos";
            const afterStar = before && (before.type === "star" || before.type === "globstar");
            if (opts.bash === true && (!isStart || rest[0] && rest[0] !== "/")) {
                push({
                    type: "star",
                    value: value,
                    output: ""
                });
                continue;
            }
            const isBrace = state.braces > 0 && (prior.type === "comma" || prior.type === "brace");
            const isExtglob = extglobs.length && (prior.type === "pipe" || prior.type === "paren");
            if (!isStart && prior.type !== "paren" && !isBrace && !isExtglob) {
                push({
                    type: "star",
                    value: value,
                    output: ""
                });
                continue;
            }
            // strip consecutive `/**/`
            while(rest.slice(0, 3) === "/**"){
                const after = input[state.index + 4];
                if (after && after !== "/") break;
                rest = rest.slice(3);
                consume("/**", 3);
            }
            if (prior.type === "bos" && eos()) {
                prev.type = "globstar";
                prev.value += value;
                prev.output = globstar(opts);
                state.output = prev.output;
                state.globstar = true;
                consume(value);
                continue;
            }
            if (prior.type === "slash" && prior.prev.type !== "bos" && !afterStar && eos()) {
                state.output = state.output.slice(0, -(prior.output + prev.output).length);
                prior.output = `(?:${prior.output}`;
                prev.type = "globstar";
                prev.output = globstar(opts) + (opts.strictSlashes ? ")" : "|$)");
                prev.value += value;
                state.globstar = true;
                state.output += prior.output + prev.output;
                consume(value);
                continue;
            }
            if (prior.type === "slash" && prior.prev.type !== "bos" && rest[0] === "/") {
                const end = rest[1] !== void 0 ? "|$" : "";
                state.output = state.output.slice(0, -(prior.output + prev.output).length);
                prior.output = `(?:${prior.output}`;
                prev.type = "globstar";
                prev.output = `${globstar(opts)}${SLASH_LITERAL}|${SLASH_LITERAL}${end})`;
                prev.value += value;
                state.output += prior.output + prev.output;
                state.globstar = true;
                consume(value + advance());
                push({
                    type: "slash",
                    value: "/",
                    output: ""
                });
                continue;
            }
            if (prior.type === "bos" && rest[0] === "/") {
                prev.type = "globstar";
                prev.value += value;
                prev.output = `(?:^|${SLASH_LITERAL}|${globstar(opts)}${SLASH_LITERAL})`;
                state.output = prev.output;
                state.globstar = true;
                consume(value + advance());
                push({
                    type: "slash",
                    value: "/",
                    output: ""
                });
                continue;
            }
            // remove single star from output
            state.output = state.output.slice(0, -prev.output.length);
            // reset previous token to globstar
            prev.type = "globstar";
            prev.output = globstar(opts);
            prev.value += value;
            // reset output with globstar
            state.output += prev.output;
            state.globstar = true;
            consume(value);
            continue;
        }
        const token = {
            type: "star",
            value: value,
            output: star
        };
        if (opts.bash === true) {
            token.output = ".*?";
            if (prev.type === "bos" || prev.type === "slash") token.output = nodot + token.output;
            push(token);
            continue;
        }
        if (prev && (prev.type === "bracket" || prev.type === "paren") && opts.regex === true) {
            token.output = value;
            push(token);
            continue;
        }
        if (state.index === state.start || prev.type === "slash" || prev.type === "dot") {
            if (prev.type === "dot") {
                state.output += NO_DOT_SLASH;
                prev.output += NO_DOT_SLASH;
            } else if (opts.dot === true) {
                state.output += NO_DOTS_SLASH;
                prev.output += NO_DOTS_SLASH;
            } else {
                state.output += nodot;
                prev.output += nodot;
            }
            if (peek() !== "*") {
                state.output += ONE_CHAR;
                prev.output += ONE_CHAR;
            }
        }
        push(token);
    }
    while(state.brackets > 0){
        if (opts.strictBrackets === true) throw new SyntaxError($8b2f0c2eaecf2312$var$syntaxError("closing", "]"));
        state.output = $9kveb.escapeLast(state.output, "[");
        decrement("brackets");
    }
    while(state.parens > 0){
        if (opts.strictBrackets === true) throw new SyntaxError($8b2f0c2eaecf2312$var$syntaxError("closing", ")"));
        state.output = $9kveb.escapeLast(state.output, "(");
        decrement("parens");
    }
    while(state.braces > 0){
        if (opts.strictBrackets === true) throw new SyntaxError($8b2f0c2eaecf2312$var$syntaxError("closing", "}"));
        state.output = $9kveb.escapeLast(state.output, "{");
        decrement("braces");
    }
    if (opts.strictSlashes !== true && (prev.type === "star" || prev.type === "bracket")) push({
        type: "maybe_slash",
        value: "",
        output: `${SLASH_LITERAL}?`
    });
    // rebuild the output if we had to backtrack at any point
    if (state.backtrack === true) {
        state.output = "";
        for (const token of state.tokens){
            state.output += token.output != null ? token.output : token.value;
            if (token.suffix) state.output += token.suffix;
        }
    }
    return state;
};
/**
 * Fast paths for creating regular expressions for common glob patterns.
 * This can significantly speed up processing and has very little downside
 * impact when none of the fast paths match.
 */ $8b2f0c2eaecf2312$var$parse.fastpaths = (input, options)=>{
    const opts = {
        ...options
    };
    const max = typeof opts.maxLength === "number" ? Math.min($8b2f0c2eaecf2312$var$MAX_LENGTH, opts.maxLength) : $8b2f0c2eaecf2312$var$MAX_LENGTH;
    const len = input.length;
    if (len > max) throw new SyntaxError(`Input length: ${len}, exceeds maximum allowed length: ${max}`);
    input = $8b2f0c2eaecf2312$var$REPLACEMENTS[input] || input;
    const win32 = $9kveb.isWindows(options);
    // create constants based on platform, for windows or posix
    const { DOT_LITERAL: DOT_LITERAL, SLASH_LITERAL: SLASH_LITERAL, ONE_CHAR: ONE_CHAR, DOTS_SLASH: DOTS_SLASH, NO_DOT: NO_DOT, NO_DOTS: NO_DOTS, NO_DOTS_SLASH: NO_DOTS_SLASH, STAR: STAR, START_ANCHOR: START_ANCHOR } = $7nDuE.globChars(win32);
    const nodot = opts.dot ? NO_DOTS : NO_DOT;
    const slashDot = opts.dot ? NO_DOTS_SLASH : NO_DOT;
    const capture = opts.capture ? "" : "?:";
    const state = {
        negated: false,
        prefix: ""
    };
    let star = opts.bash === true ? ".*?" : STAR;
    if (opts.capture) star = `(${star})`;
    const globstar = (opts)=>{
        if (opts.noglobstar === true) return star;
        return `(${capture}(?:(?!${START_ANCHOR}${opts.dot ? DOTS_SLASH : DOT_LITERAL}).)*?)`;
    };
    const create = (str)=>{
        switch(str){
            case "*":
                return `${nodot}${ONE_CHAR}${star}`;
            case ".*":
                return `${DOT_LITERAL}${ONE_CHAR}${star}`;
            case "*.*":
                return `${nodot}${star}${DOT_LITERAL}${ONE_CHAR}${star}`;
            case "*/*":
                return `${nodot}${star}${SLASH_LITERAL}${ONE_CHAR}${slashDot}${star}`;
            case "**":
                return nodot + globstar(opts);
            case "**/*":
                return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL})?${slashDot}${ONE_CHAR}${star}`;
            case "**/*.*":
                return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL})?${slashDot}${star}${DOT_LITERAL}${ONE_CHAR}${star}`;
            case "**/.*":
                return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL})?${DOT_LITERAL}${ONE_CHAR}${star}`;
            default:
                {
                    const match = /^(.*?)\.(\w+)$/.exec(str);
                    if (!match) return;
                    const source = create(match[1]);
                    if (!source) return;
                    return source + DOT_LITERAL + match[2];
                }
        }
    };
    const output = $9kveb.removePrefix(input, state);
    let source = create(output);
    if (source && opts.strictSlashes !== true) source += `${SLASH_LITERAL}?`;
    return source;
};
module.exports = $8b2f0c2eaecf2312$var$parse;

});


parcelRegister("kevix", function(module, exports) {
"use strict";

module.exports = (parcelRequire("30l15"));

module.exports.async = (parcelRequire("hepwo"));

module.exports.stream = (parcelRequire("9ai43"));

module.exports.prettyError = (parcelRequire("bmucT"));

});
parcelRegister("30l15", function(module, exports) {
"use strict";
module.exports = $2301aca2166185e5$var$parseString;

var $2nj4a = parcelRequire("2nj4a");

var $bmucT = parcelRequire("bmucT");
function $2301aca2166185e5$var$parseString(str) {
    if ($parcel$global.Buffer && $parcel$global.Buffer.isBuffer(str)) str = str.toString("utf8");
    const parser = new $2nj4a();
    try {
        parser.parse(str);
        return parser.finish();
    } catch (err) {
        throw $bmucT(err, str);
    }
}

});
parcelRegister("2nj4a", function(module, exports) {
"use strict";

/* eslint-disable no-new-wrappers, no-eval, camelcase, operator-linebreak */ module.exports = makeParserClass((parcelRequire("ibqqh")));
module.exports.makeParserClass = makeParserClass;
class TomlError extends Error {
    constructor(msg){
        super(msg);
        this.name = "TomlError";
        /* istanbul ignore next */ if (Error.captureStackTrace) Error.captureStackTrace(this, TomlError);
        this.fromTOML = true;
        this.wrapped = null;
    }
}
TomlError.wrap = (err)=>{
    const terr = new TomlError(err.message);
    terr.code = err.code;
    terr.wrapped = err;
    return terr;
};
module.exports.TomlError = TomlError;

var $24H0e = parcelRequire("24H0e");

var $hEXiP = parcelRequire("hEXiP");

var $cdqCB = parcelRequire("cdqCB");

var $hjWfG = parcelRequire("hjWfG");
const CTRL_I = 0x09;
const CTRL_J = 0x0A;
const CTRL_M = 0x0D;
const CTRL_CHAR_BOUNDARY = 0x1F // the last non-character in the latin1 region of unicode, except DEL
;
const CHAR_SP = 0x20;
const CHAR_QUOT = 0x22;
const CHAR_NUM = 0x23;
const CHAR_APOS = 0x27;
const CHAR_PLUS = 0x2B;
const CHAR_COMMA = 0x2C;
const CHAR_HYPHEN = 0x2D;
const CHAR_PERIOD = 0x2E;
const CHAR_0 = 0x30;
const CHAR_1 = 0x31;
const CHAR_7 = 0x37;
const CHAR_9 = 0x39;
const CHAR_COLON = 0x3A;
const CHAR_EQUALS = 0x3D;
const CHAR_A = 0x41;
const CHAR_E = 0x45;
const CHAR_F = 0x46;
const CHAR_T = 0x54;
const CHAR_U = 0x55;
const CHAR_Z = 0x5A;
const CHAR_LOWBAR = 0x5F;
const CHAR_a = 0x61;
const CHAR_b = 0x62;
const CHAR_e = 0x65;
const CHAR_f = 0x66;
const CHAR_i = 0x69;
const CHAR_l = 0x6C;
const CHAR_n = 0x6E;
const CHAR_o = 0x6F;
const CHAR_r = 0x72;
const CHAR_s = 0x73;
const CHAR_t = 0x74;
const CHAR_u = 0x75;
const CHAR_x = 0x78;
const CHAR_z = 0x7A;
const CHAR_LCUB = 0x7B;
const CHAR_RCUB = 0x7D;
const CHAR_LSQB = 0x5B;
const CHAR_BSOL = 0x5C;
const CHAR_RSQB = 0x5D;
const CHAR_DEL = 0x7F;
const SURROGATE_FIRST = 0xD800;
const SURROGATE_LAST = 0xDFFF;
const escapes = {
    [CHAR_b]: "\b",
    [CHAR_t]: "	",
    [CHAR_n]: "\n",
    [CHAR_f]: "\f",
    [CHAR_r]: "\r",
    [CHAR_QUOT]: '"',
    [CHAR_BSOL]: "\\"
};
function isDigit(cp) {
    return cp >= CHAR_0 && cp <= CHAR_9;
}
function isHexit(cp) {
    return cp >= CHAR_A && cp <= CHAR_F || cp >= CHAR_a && cp <= CHAR_f || cp >= CHAR_0 && cp <= CHAR_9;
}
function isBit(cp) {
    return cp === CHAR_1 || cp === CHAR_0;
}
function isOctit(cp) {
    return cp >= CHAR_0 && cp <= CHAR_7;
}
function isAlphaNumQuoteHyphen(cp) {
    return cp >= CHAR_A && cp <= CHAR_Z || cp >= CHAR_a && cp <= CHAR_z || cp >= CHAR_0 && cp <= CHAR_9 || cp === CHAR_APOS || cp === CHAR_QUOT || cp === CHAR_LOWBAR || cp === CHAR_HYPHEN;
}
function isAlphaNumHyphen(cp) {
    return cp >= CHAR_A && cp <= CHAR_Z || cp >= CHAR_a && cp <= CHAR_z || cp >= CHAR_0 && cp <= CHAR_9 || cp === CHAR_LOWBAR || cp === CHAR_HYPHEN;
}
const _type = Symbol("type");
const _declared = Symbol("declared");
const hasOwnProperty = Object.prototype.hasOwnProperty;
const defineProperty = Object.defineProperty;
const descriptor = {
    configurable: true,
    enumerable: true,
    writable: true,
    value: undefined
};
function hasKey(obj, key) {
    if (hasOwnProperty.call(obj, key)) return true;
    if (key === "__proto__") defineProperty(obj, "__proto__", descriptor);
    return false;
}
const INLINE_TABLE = Symbol("inline-table");
function InlineTable() {
    return Object.defineProperties({}, {
        [_type]: {
            value: INLINE_TABLE
        }
    });
}
function isInlineTable(obj) {
    if (obj === null || typeof obj !== "object") return false;
    return obj[_type] === INLINE_TABLE;
}
const TABLE = Symbol("table");
function Table() {
    return Object.defineProperties({}, {
        [_type]: {
            value: TABLE
        },
        [_declared]: {
            value: false,
            writable: true
        }
    });
}
function isTable(obj) {
    if (obj === null || typeof obj !== "object") return false;
    return obj[_type] === TABLE;
}
const _contentType = Symbol("content-type");
const INLINE_LIST = Symbol("inline-list");
function InlineList(type) {
    return Object.defineProperties([], {
        [_type]: {
            value: INLINE_LIST
        },
        [_contentType]: {
            value: type
        }
    });
}
function isInlineList(obj) {
    if (obj === null || typeof obj !== "object") return false;
    return obj[_type] === INLINE_LIST;
}
const LIST = Symbol("list");
function List() {
    return Object.defineProperties([], {
        [_type]: {
            value: LIST
        }
    });
}
function isList(obj) {
    if (obj === null || typeof obj !== "object") return false;
    return obj[_type] === LIST;
}
// in an eval, to let bundlers not slurp in a util proxy
let _custom;
try {
    const utilInspect = eval("require('util').inspect");
    _custom = utilInspect.custom;
} catch (_) {
/* eval require not available in transpiled bundle */ }
/* istanbul ignore next */ const _inspect = _custom || "inspect";
class BoxedBigInt {
    constructor(value){
        try {
            this.value = $parcel$global.BigInt.asIntN(64, value);
        } catch (_) {
            /* istanbul ignore next */ this.value = null;
        }
        Object.defineProperty(this, _type, {
            value: INTEGER
        });
    }
    isNaN() {
        return this.value === null;
    }
    /* istanbul ignore next */ toString() {
        return String(this.value);
    }
    /* istanbul ignore next */ [_inspect]() {
        return `[BigInt: ${this.toString()}]}`;
    }
    valueOf() {
        return this.value;
    }
}
const INTEGER = Symbol("integer");
function Integer(value) {
    let num = Number(value);
    // -0 is a float thing, not an int thing
    if (Object.is(num, -0)) num = 0;
    /* istanbul ignore else */ if ($parcel$global.BigInt && !Number.isSafeInteger(num)) return new BoxedBigInt(value);
    else /* istanbul ignore next */ return Object.defineProperties(new Number(num), {
        isNaN: {
            value: function() {
                return isNaN(this);
            }
        },
        [_type]: {
            value: INTEGER
        },
        [_inspect]: {
            value: ()=>`[Integer: ${value}]`
        }
    });
}
function isInteger(obj) {
    if (obj === null || typeof obj !== "object") return false;
    return obj[_type] === INTEGER;
}
const FLOAT = Symbol("float");
function Float(value) {
    /* istanbul ignore next */ return Object.defineProperties(new Number(value), {
        [_type]: {
            value: FLOAT
        },
        [_inspect]: {
            value: ()=>`[Float: ${value}]`
        }
    });
}
function isFloat(obj) {
    if (obj === null || typeof obj !== "object") return false;
    return obj[_type] === FLOAT;
}
function tomlType(value) {
    const type = typeof value;
    if (type === "object") {
        /* istanbul ignore if */ if (value === null) return "null";
        if (value instanceof Date) return "datetime";
        /* istanbul ignore else */ if (_type in value) switch(value[_type]){
            case INLINE_TABLE:
                return "inline-table";
            case INLINE_LIST:
                return "inline-list";
            /* istanbul ignore next */ case TABLE:
                return "table";
            /* istanbul ignore next */ case LIST:
                return "list";
            case FLOAT:
                return "float";
            case INTEGER:
                return "integer";
        }
    }
    return type;
}
function makeParserClass(Parser) {
    class TOMLParser extends Parser {
        constructor(){
            super();
            this.ctx = this.obj = Table();
        }
        /* MATCH HELPER */ atEndOfWord() {
            return this.char === CHAR_NUM || this.char === CTRL_I || this.char === CHAR_SP || this.atEndOfLine();
        }
        atEndOfLine() {
            return this.char === Parser.END || this.char === CTRL_J || this.char === CTRL_M;
        }
        parseStart() {
            if (this.char === Parser.END) return null;
            else if (this.char === CHAR_LSQB) return this.call(this.parseTableOrList);
            else if (this.char === CHAR_NUM) return this.call(this.parseComment);
            else if (this.char === CTRL_J || this.char === CHAR_SP || this.char === CTRL_I || this.char === CTRL_M) return null;
            else if (isAlphaNumQuoteHyphen(this.char)) return this.callNow(this.parseAssignStatement);
            else throw this.error(new TomlError(`Unknown character "${this.char}"`));
        }
        // HELPER, this strips any whitespace and comments to the end of the line
        // then RETURNS. Last state in a production.
        parseWhitespaceToEOL() {
            if (this.char === CHAR_SP || this.char === CTRL_I || this.char === CTRL_M) return null;
            else if (this.char === CHAR_NUM) return this.goto(this.parseComment);
            else if (this.char === Parser.END || this.char === CTRL_J) return this.return();
            else throw this.error(new TomlError("Unexpected character, expected only whitespace or comments till end of line"));
        }
        /* ASSIGNMENT: key = value */ parseAssignStatement() {
            return this.callNow(this.parseAssign, this.recordAssignStatement);
        }
        recordAssignStatement(kv) {
            let target = this.ctx;
            let finalKey = kv.key.pop();
            for (let kw of kv.key){
                if (hasKey(target, kw) && (!isTable(target[kw]) || target[kw][_declared])) throw this.error(new TomlError("Can't redefine existing key"));
                target = target[kw] = target[kw] || Table();
            }
            if (hasKey(target, finalKey)) throw this.error(new TomlError("Can't redefine existing key"));
            // unbox our numbers
            if (isInteger(kv.value) || isFloat(kv.value)) target[finalKey] = kv.value.valueOf();
            else target[finalKey] = kv.value;
            return this.goto(this.parseWhitespaceToEOL);
        }
        /* ASSSIGNMENT expression, key = value possibly inside an inline table */ parseAssign() {
            return this.callNow(this.parseKeyword, this.recordAssignKeyword);
        }
        recordAssignKeyword(key) {
            if (this.state.resultTable) this.state.resultTable.push(key);
            else this.state.resultTable = [
                key
            ];
            return this.goto(this.parseAssignKeywordPreDot);
        }
        parseAssignKeywordPreDot() {
            if (this.char === CHAR_PERIOD) return this.next(this.parseAssignKeywordPostDot);
            else if (this.char !== CHAR_SP && this.char !== CTRL_I) return this.goto(this.parseAssignEqual);
        }
        parseAssignKeywordPostDot() {
            if (this.char !== CHAR_SP && this.char !== CTRL_I) return this.callNow(this.parseKeyword, this.recordAssignKeyword);
        }
        parseAssignEqual() {
            if (this.char === CHAR_EQUALS) return this.next(this.parseAssignPreValue);
            else throw this.error(new TomlError('Invalid character, expected "="'));
        }
        parseAssignPreValue() {
            if (this.char === CHAR_SP || this.char === CTRL_I) return null;
            else return this.callNow(this.parseValue, this.recordAssignValue);
        }
        recordAssignValue(value) {
            return this.returnNow({
                key: this.state.resultTable,
                value: value
            });
        }
        /* COMMENTS: #...eol */ parseComment() {
            do {
                if (this.char === Parser.END || this.char === CTRL_J) return this.return();
            }while (this.nextChar());
        }
        /* TABLES AND LISTS, [foo] and [[foo]] */ parseTableOrList() {
            if (this.char === CHAR_LSQB) this.next(this.parseList);
            else return this.goto(this.parseTable);
        }
        /* TABLE [foo.bar.baz] */ parseTable() {
            this.ctx = this.obj;
            return this.goto(this.parseTableNext);
        }
        parseTableNext() {
            if (this.char === CHAR_SP || this.char === CTRL_I) return null;
            else return this.callNow(this.parseKeyword, this.parseTableMore);
        }
        parseTableMore(keyword) {
            if (this.char === CHAR_SP || this.char === CTRL_I) return null;
            else if (this.char === CHAR_RSQB) {
                if (hasKey(this.ctx, keyword) && (!isTable(this.ctx[keyword]) || this.ctx[keyword][_declared])) throw this.error(new TomlError("Can't redefine existing key"));
                else {
                    this.ctx = this.ctx[keyword] = this.ctx[keyword] || Table();
                    this.ctx[_declared] = true;
                }
                return this.next(this.parseWhitespaceToEOL);
            } else if (this.char === CHAR_PERIOD) {
                if (!hasKey(this.ctx, keyword)) this.ctx = this.ctx[keyword] = Table();
                else if (isTable(this.ctx[keyword])) this.ctx = this.ctx[keyword];
                else if (isList(this.ctx[keyword])) this.ctx = this.ctx[keyword][this.ctx[keyword].length - 1];
                else throw this.error(new TomlError("Can't redefine existing key"));
                return this.next(this.parseTableNext);
            } else throw this.error(new TomlError("Unexpected character, expected whitespace, . or ]"));
        }
        /* LIST [[a.b.c]] */ parseList() {
            this.ctx = this.obj;
            return this.goto(this.parseListNext);
        }
        parseListNext() {
            if (this.char === CHAR_SP || this.char === CTRL_I) return null;
            else return this.callNow(this.parseKeyword, this.parseListMore);
        }
        parseListMore(keyword) {
            if (this.char === CHAR_SP || this.char === CTRL_I) return null;
            else if (this.char === CHAR_RSQB) {
                if (!hasKey(this.ctx, keyword)) this.ctx[keyword] = List();
                if (isInlineList(this.ctx[keyword])) throw this.error(new TomlError("Can't extend an inline array"));
                else if (isList(this.ctx[keyword])) {
                    const next = Table();
                    this.ctx[keyword].push(next);
                    this.ctx = next;
                } else throw this.error(new TomlError("Can't redefine an existing key"));
                return this.next(this.parseListEnd);
            } else if (this.char === CHAR_PERIOD) {
                if (!hasKey(this.ctx, keyword)) this.ctx = this.ctx[keyword] = Table();
                else if (isInlineList(this.ctx[keyword])) throw this.error(new TomlError("Can't extend an inline array"));
                else if (isInlineTable(this.ctx[keyword])) throw this.error(new TomlError("Can't extend an inline table"));
                else if (isList(this.ctx[keyword])) this.ctx = this.ctx[keyword][this.ctx[keyword].length - 1];
                else if (isTable(this.ctx[keyword])) this.ctx = this.ctx[keyword];
                else throw this.error(new TomlError("Can't redefine an existing key"));
                return this.next(this.parseListNext);
            } else throw this.error(new TomlError("Unexpected character, expected whitespace, . or ]"));
        }
        parseListEnd(keyword) {
            if (this.char === CHAR_RSQB) return this.next(this.parseWhitespaceToEOL);
            else throw this.error(new TomlError("Unexpected character, expected whitespace, . or ]"));
        }
        /* VALUE string, number, boolean, inline list, inline object */ parseValue() {
            if (this.char === Parser.END) throw this.error(new TomlError("Key without value"));
            else if (this.char === CHAR_QUOT) return this.next(this.parseDoubleString);
            if (this.char === CHAR_APOS) return this.next(this.parseSingleString);
            else if (this.char === CHAR_HYPHEN || this.char === CHAR_PLUS) return this.goto(this.parseNumberSign);
            else if (this.char === CHAR_i) return this.next(this.parseInf);
            else if (this.char === CHAR_n) return this.next(this.parseNan);
            else if (isDigit(this.char)) return this.goto(this.parseNumberOrDateTime);
            else if (this.char === CHAR_t || this.char === CHAR_f) return this.goto(this.parseBoolean);
            else if (this.char === CHAR_LSQB) return this.call(this.parseInlineList, this.recordValue);
            else if (this.char === CHAR_LCUB) return this.call(this.parseInlineTable, this.recordValue);
            else throw this.error(new TomlError("Unexpected character, expecting string, number, datetime, boolean, inline array or inline table"));
        }
        recordValue(value) {
            return this.returnNow(value);
        }
        parseInf() {
            if (this.char === CHAR_n) return this.next(this.parseInf2);
            else throw this.error(new TomlError('Unexpected character, expected "inf", "+inf" or "-inf"'));
        }
        parseInf2() {
            if (this.char === CHAR_f) {
                if (this.state.buf === "-") return this.return(-Infinity);
                else return this.return(Infinity);
            } else throw this.error(new TomlError('Unexpected character, expected "inf", "+inf" or "-inf"'));
        }
        parseNan() {
            if (this.char === CHAR_a) return this.next(this.parseNan2);
            else throw this.error(new TomlError('Unexpected character, expected "nan"'));
        }
        parseNan2() {
            if (this.char === CHAR_n) return this.return(NaN);
            else throw this.error(new TomlError('Unexpected character, expected "nan"'));
        }
        /* KEYS, barewords or basic, literal, or dotted */ parseKeyword() {
            if (this.char === CHAR_QUOT) return this.next(this.parseBasicString);
            else if (this.char === CHAR_APOS) return this.next(this.parseLiteralString);
            else return this.goto(this.parseBareKey);
        }
        /* KEYS: barewords */ parseBareKey() {
            do {
                if (this.char === Parser.END) throw this.error(new TomlError("Key ended without value"));
                else if (isAlphaNumHyphen(this.char)) this.consume();
                else if (this.state.buf.length === 0) throw this.error(new TomlError("Empty bare keys are not allowed"));
                else return this.returnNow();
            }while (this.nextChar());
        }
        /* STRINGS, single quoted (literal) */ parseSingleString() {
            if (this.char === CHAR_APOS) return this.next(this.parseLiteralMultiStringMaybe);
            else return this.goto(this.parseLiteralString);
        }
        parseLiteralString() {
            do {
                if (this.char === CHAR_APOS) return this.return();
                else if (this.atEndOfLine()) throw this.error(new TomlError("Unterminated string"));
                else if (this.char === CHAR_DEL || this.char <= CTRL_CHAR_BOUNDARY && this.char !== CTRL_I) throw this.errorControlCharInString();
                else this.consume();
            }while (this.nextChar());
        }
        parseLiteralMultiStringMaybe() {
            if (this.char === CHAR_APOS) return this.next(this.parseLiteralMultiString);
            else return this.returnNow();
        }
        parseLiteralMultiString() {
            if (this.char === CTRL_M) return null;
            else if (this.char === CTRL_J) return this.next(this.parseLiteralMultiStringContent);
            else return this.goto(this.parseLiteralMultiStringContent);
        }
        parseLiteralMultiStringContent() {
            do {
                if (this.char === CHAR_APOS) return this.next(this.parseLiteralMultiEnd);
                else if (this.char === Parser.END) throw this.error(new TomlError("Unterminated multi-line string"));
                else if (this.char === CHAR_DEL || this.char <= CTRL_CHAR_BOUNDARY && this.char !== CTRL_I && this.char !== CTRL_J && this.char !== CTRL_M) throw this.errorControlCharInString();
                else this.consume();
            }while (this.nextChar());
        }
        parseLiteralMultiEnd() {
            if (this.char === CHAR_APOS) return this.next(this.parseLiteralMultiEnd2);
            else {
                this.state.buf += "'";
                return this.goto(this.parseLiteralMultiStringContent);
            }
        }
        parseLiteralMultiEnd2() {
            if (this.char === CHAR_APOS) return this.return();
            else {
                this.state.buf += "''";
                return this.goto(this.parseLiteralMultiStringContent);
            }
        }
        /* STRINGS double quoted */ parseDoubleString() {
            if (this.char === CHAR_QUOT) return this.next(this.parseMultiStringMaybe);
            else return this.goto(this.parseBasicString);
        }
        parseBasicString() {
            do {
                if (this.char === CHAR_BSOL) return this.call(this.parseEscape, this.recordEscapeReplacement);
                else if (this.char === CHAR_QUOT) return this.return();
                else if (this.atEndOfLine()) throw this.error(new TomlError("Unterminated string"));
                else if (this.char === CHAR_DEL || this.char <= CTRL_CHAR_BOUNDARY && this.char !== CTRL_I) throw this.errorControlCharInString();
                else this.consume();
            }while (this.nextChar());
        }
        recordEscapeReplacement(replacement) {
            this.state.buf += replacement;
            return this.goto(this.parseBasicString);
        }
        parseMultiStringMaybe() {
            if (this.char === CHAR_QUOT) return this.next(this.parseMultiString);
            else return this.returnNow();
        }
        parseMultiString() {
            if (this.char === CTRL_M) return null;
            else if (this.char === CTRL_J) return this.next(this.parseMultiStringContent);
            else return this.goto(this.parseMultiStringContent);
        }
        parseMultiStringContent() {
            do {
                if (this.char === CHAR_BSOL) return this.call(this.parseMultiEscape, this.recordMultiEscapeReplacement);
                else if (this.char === CHAR_QUOT) return this.next(this.parseMultiEnd);
                else if (this.char === Parser.END) throw this.error(new TomlError("Unterminated multi-line string"));
                else if (this.char === CHAR_DEL || this.char <= CTRL_CHAR_BOUNDARY && this.char !== CTRL_I && this.char !== CTRL_J && this.char !== CTRL_M) throw this.errorControlCharInString();
                else this.consume();
            }while (this.nextChar());
        }
        errorControlCharInString() {
            let displayCode = "\\u00";
            if (this.char < 16) displayCode += "0";
            displayCode += this.char.toString(16);
            return this.error(new TomlError(`Control characters (codes < 0x1f and 0x7f) are not allowed in strings, use ${displayCode} instead`));
        }
        recordMultiEscapeReplacement(replacement) {
            this.state.buf += replacement;
            return this.goto(this.parseMultiStringContent);
        }
        parseMultiEnd() {
            if (this.char === CHAR_QUOT) return this.next(this.parseMultiEnd2);
            else {
                this.state.buf += '"';
                return this.goto(this.parseMultiStringContent);
            }
        }
        parseMultiEnd2() {
            if (this.char === CHAR_QUOT) return this.return();
            else {
                this.state.buf += '""';
                return this.goto(this.parseMultiStringContent);
            }
        }
        parseMultiEscape() {
            if (this.char === CTRL_M || this.char === CTRL_J) return this.next(this.parseMultiTrim);
            else if (this.char === CHAR_SP || this.char === CTRL_I) return this.next(this.parsePreMultiTrim);
            else return this.goto(this.parseEscape);
        }
        parsePreMultiTrim() {
            if (this.char === CHAR_SP || this.char === CTRL_I) return null;
            else if (this.char === CTRL_M || this.char === CTRL_J) return this.next(this.parseMultiTrim);
            else throw this.error(new TomlError("Can't escape whitespace"));
        }
        parseMultiTrim() {
            // explicitly whitespace here, END should follow the same path as chars
            if (this.char === CTRL_J || this.char === CHAR_SP || this.char === CTRL_I || this.char === CTRL_M) return null;
            else return this.returnNow();
        }
        parseEscape() {
            if (this.char in escapes) return this.return(escapes[this.char]);
            else if (this.char === CHAR_u) return this.call(this.parseSmallUnicode, this.parseUnicodeReturn);
            else if (this.char === CHAR_U) return this.call(this.parseLargeUnicode, this.parseUnicodeReturn);
            else throw this.error(new TomlError("Unknown escape character: " + this.char));
        }
        parseUnicodeReturn(char) {
            try {
                const codePoint = parseInt(char, 16);
                if (codePoint >= SURROGATE_FIRST && codePoint <= SURROGATE_LAST) throw this.error(new TomlError("Invalid unicode, character in range 0xD800 - 0xDFFF is reserved"));
                return this.returnNow(String.fromCodePoint(codePoint));
            } catch (err) {
                throw this.error(TomlError.wrap(err));
            }
        }
        parseSmallUnicode() {
            if (!isHexit(this.char)) throw this.error(new TomlError("Invalid character in unicode sequence, expected hex"));
            else {
                this.consume();
                if (this.state.buf.length >= 4) return this.return();
            }
        }
        parseLargeUnicode() {
            if (!isHexit(this.char)) throw this.error(new TomlError("Invalid character in unicode sequence, expected hex"));
            else {
                this.consume();
                if (this.state.buf.length >= 8) return this.return();
            }
        }
        /* NUMBERS */ parseNumberSign() {
            this.consume();
            return this.next(this.parseMaybeSignedInfOrNan);
        }
        parseMaybeSignedInfOrNan() {
            if (this.char === CHAR_i) return this.next(this.parseInf);
            else if (this.char === CHAR_n) return this.next(this.parseNan);
            else return this.callNow(this.parseNoUnder, this.parseNumberIntegerStart);
        }
        parseNumberIntegerStart() {
            if (this.char === CHAR_0) {
                this.consume();
                return this.next(this.parseNumberIntegerExponentOrDecimal);
            } else return this.goto(this.parseNumberInteger);
        }
        parseNumberIntegerExponentOrDecimal() {
            if (this.char === CHAR_PERIOD) {
                this.consume();
                return this.call(this.parseNoUnder, this.parseNumberFloat);
            } else if (this.char === CHAR_E || this.char === CHAR_e) {
                this.consume();
                return this.next(this.parseNumberExponentSign);
            } else return this.returnNow(Integer(this.state.buf));
        }
        parseNumberInteger() {
            if (isDigit(this.char)) this.consume();
            else if (this.char === CHAR_LOWBAR) return this.call(this.parseNoUnder);
            else if (this.char === CHAR_E || this.char === CHAR_e) {
                this.consume();
                return this.next(this.parseNumberExponentSign);
            } else if (this.char === CHAR_PERIOD) {
                this.consume();
                return this.call(this.parseNoUnder, this.parseNumberFloat);
            } else {
                const result = Integer(this.state.buf);
                /* istanbul ignore if */ if (result.isNaN()) throw this.error(new TomlError("Invalid number"));
                else return this.returnNow(result);
            }
        }
        parseNoUnder() {
            if (this.char === CHAR_LOWBAR || this.char === CHAR_PERIOD || this.char === CHAR_E || this.char === CHAR_e) throw this.error(new TomlError("Unexpected character, expected digit"));
            else if (this.atEndOfWord()) throw this.error(new TomlError("Incomplete number"));
            return this.returnNow();
        }
        parseNumberFloat() {
            if (this.char === CHAR_LOWBAR) return this.call(this.parseNoUnder, this.parseNumberFloat);
            else if (isDigit(this.char)) this.consume();
            else if (this.char === CHAR_E || this.char === CHAR_e) {
                this.consume();
                return this.next(this.parseNumberExponentSign);
            } else return this.returnNow(Float(this.state.buf));
        }
        parseNumberExponentSign() {
            if (isDigit(this.char)) return this.goto(this.parseNumberExponent);
            else if (this.char === CHAR_HYPHEN || this.char === CHAR_PLUS) {
                this.consume();
                this.call(this.parseNoUnder, this.parseNumberExponent);
            } else throw this.error(new TomlError("Unexpected character, expected -, + or digit"));
        }
        parseNumberExponent() {
            if (isDigit(this.char)) this.consume();
            else if (this.char === CHAR_LOWBAR) return this.call(this.parseNoUnder);
            else return this.returnNow(Float(this.state.buf));
        }
        /* NUMBERS or DATETIMES  */ parseNumberOrDateTime() {
            if (this.char === CHAR_0) {
                this.consume();
                return this.next(this.parseNumberBaseOrDateTime);
            } else return this.goto(this.parseNumberOrDateTimeOnly);
        }
        parseNumberOrDateTimeOnly() {
            // note, if two zeros are in a row then it MUST be a date
            if (this.char === CHAR_LOWBAR) return this.call(this.parseNoUnder, this.parseNumberInteger);
            else if (isDigit(this.char)) {
                this.consume();
                if (this.state.buf.length > 4) this.next(this.parseNumberInteger);
            } else if (this.char === CHAR_E || this.char === CHAR_e) {
                this.consume();
                return this.next(this.parseNumberExponentSign);
            } else if (this.char === CHAR_PERIOD) {
                this.consume();
                return this.call(this.parseNoUnder, this.parseNumberFloat);
            } else if (this.char === CHAR_HYPHEN) return this.goto(this.parseDateTime);
            else if (this.char === CHAR_COLON) return this.goto(this.parseOnlyTimeHour);
            else return this.returnNow(Integer(this.state.buf));
        }
        parseDateTimeOnly() {
            if (this.state.buf.length < 4) {
                if (isDigit(this.char)) return this.consume();
                else if (this.char === CHAR_COLON) return this.goto(this.parseOnlyTimeHour);
                else throw this.error(new TomlError("Expected digit while parsing year part of a date"));
            } else {
                if (this.char === CHAR_HYPHEN) return this.goto(this.parseDateTime);
                else throw this.error(new TomlError("Expected hyphen (-) while parsing year part of date"));
            }
        }
        parseNumberBaseOrDateTime() {
            if (this.char === CHAR_b) {
                this.consume();
                return this.call(this.parseNoUnder, this.parseIntegerBin);
            } else if (this.char === CHAR_o) {
                this.consume();
                return this.call(this.parseNoUnder, this.parseIntegerOct);
            } else if (this.char === CHAR_x) {
                this.consume();
                return this.call(this.parseNoUnder, this.parseIntegerHex);
            } else if (this.char === CHAR_PERIOD) return this.goto(this.parseNumberInteger);
            else if (isDigit(this.char)) return this.goto(this.parseDateTimeOnly);
            else return this.returnNow(Integer(this.state.buf));
        }
        parseIntegerHex() {
            if (isHexit(this.char)) this.consume();
            else if (this.char === CHAR_LOWBAR) return this.call(this.parseNoUnder);
            else {
                const result = Integer(this.state.buf);
                /* istanbul ignore if */ if (result.isNaN()) throw this.error(new TomlError("Invalid number"));
                else return this.returnNow(result);
            }
        }
        parseIntegerOct() {
            if (isOctit(this.char)) this.consume();
            else if (this.char === CHAR_LOWBAR) return this.call(this.parseNoUnder);
            else {
                const result = Integer(this.state.buf);
                /* istanbul ignore if */ if (result.isNaN()) throw this.error(new TomlError("Invalid number"));
                else return this.returnNow(result);
            }
        }
        parseIntegerBin() {
            if (isBit(this.char)) this.consume();
            else if (this.char === CHAR_LOWBAR) return this.call(this.parseNoUnder);
            else {
                const result = Integer(this.state.buf);
                /* istanbul ignore if */ if (result.isNaN()) throw this.error(new TomlError("Invalid number"));
                else return this.returnNow(result);
            }
        }
        /* DATETIME */ parseDateTime() {
            // we enter here having just consumed the year and about to consume the hyphen
            if (this.state.buf.length < 4) throw this.error(new TomlError("Years less than 1000 must be zero padded to four characters"));
            this.state.result = this.state.buf;
            this.state.buf = "";
            return this.next(this.parseDateMonth);
        }
        parseDateMonth() {
            if (this.char === CHAR_HYPHEN) {
                if (this.state.buf.length < 2) throw this.error(new TomlError("Months less than 10 must be zero padded to two characters"));
                this.state.result += "-" + this.state.buf;
                this.state.buf = "";
                return this.next(this.parseDateDay);
            } else if (isDigit(this.char)) this.consume();
            else throw this.error(new TomlError("Incomplete datetime"));
        }
        parseDateDay() {
            if (this.char === CHAR_T || this.char === CHAR_SP) {
                if (this.state.buf.length < 2) throw this.error(new TomlError("Days less than 10 must be zero padded to two characters"));
                this.state.result += "-" + this.state.buf;
                this.state.buf = "";
                return this.next(this.parseStartTimeHour);
            } else if (this.atEndOfWord()) return this.return($cdqCB(this.state.result + "-" + this.state.buf));
            else if (isDigit(this.char)) this.consume();
            else throw this.error(new TomlError("Incomplete datetime"));
        }
        parseStartTimeHour() {
            if (this.atEndOfWord()) return this.returnNow($cdqCB(this.state.result));
            else return this.goto(this.parseTimeHour);
        }
        parseTimeHour() {
            if (this.char === CHAR_COLON) {
                if (this.state.buf.length < 2) throw this.error(new TomlError("Hours less than 10 must be zero padded to two characters"));
                this.state.result += "T" + this.state.buf;
                this.state.buf = "";
                return this.next(this.parseTimeMin);
            } else if (isDigit(this.char)) this.consume();
            else throw this.error(new TomlError("Incomplete datetime"));
        }
        parseTimeMin() {
            if (this.state.buf.length < 2 && isDigit(this.char)) this.consume();
            else if (this.state.buf.length === 2 && this.char === CHAR_COLON) {
                this.state.result += ":" + this.state.buf;
                this.state.buf = "";
                return this.next(this.parseTimeSec);
            } else throw this.error(new TomlError("Incomplete datetime"));
        }
        parseTimeSec() {
            if (isDigit(this.char)) {
                this.consume();
                if (this.state.buf.length === 2) {
                    this.state.result += ":" + this.state.buf;
                    this.state.buf = "";
                    return this.next(this.parseTimeZoneOrFraction);
                }
            } else throw this.error(new TomlError("Incomplete datetime"));
        }
        parseOnlyTimeHour() {
            /* istanbul ignore else */ if (this.char === CHAR_COLON) {
                if (this.state.buf.length < 2) throw this.error(new TomlError("Hours less than 10 must be zero padded to two characters"));
                this.state.result = this.state.buf;
                this.state.buf = "";
                return this.next(this.parseOnlyTimeMin);
            } else throw this.error(new TomlError("Incomplete time"));
        }
        parseOnlyTimeMin() {
            if (this.state.buf.length < 2 && isDigit(this.char)) this.consume();
            else if (this.state.buf.length === 2 && this.char === CHAR_COLON) {
                this.state.result += ":" + this.state.buf;
                this.state.buf = "";
                return this.next(this.parseOnlyTimeSec);
            } else throw this.error(new TomlError("Incomplete time"));
        }
        parseOnlyTimeSec() {
            if (isDigit(this.char)) {
                this.consume();
                if (this.state.buf.length === 2) return this.next(this.parseOnlyTimeFractionMaybe);
            } else throw this.error(new TomlError("Incomplete time"));
        }
        parseOnlyTimeFractionMaybe() {
            this.state.result += ":" + this.state.buf;
            if (this.char === CHAR_PERIOD) {
                this.state.buf = "";
                this.next(this.parseOnlyTimeFraction);
            } else return this.return($hjWfG(this.state.result));
        }
        parseOnlyTimeFraction() {
            if (isDigit(this.char)) this.consume();
            else if (this.atEndOfWord()) {
                if (this.state.buf.length === 0) throw this.error(new TomlError("Expected digit in milliseconds"));
                return this.returnNow($hjWfG(this.state.result + "." + this.state.buf));
            } else throw this.error(new TomlError("Unexpected character in datetime, expected period (.), minus (-), plus (+) or Z"));
        }
        parseTimeZoneOrFraction() {
            if (this.char === CHAR_PERIOD) {
                this.consume();
                this.next(this.parseDateTimeFraction);
            } else if (this.char === CHAR_HYPHEN || this.char === CHAR_PLUS) {
                this.consume();
                this.next(this.parseTimeZoneHour);
            } else if (this.char === CHAR_Z) {
                this.consume();
                return this.return($24H0e(this.state.result + this.state.buf));
            } else if (this.atEndOfWord()) return this.returnNow($hEXiP(this.state.result + this.state.buf));
            else throw this.error(new TomlError("Unexpected character in datetime, expected period (.), minus (-), plus (+) or Z"));
        }
        parseDateTimeFraction() {
            if (isDigit(this.char)) this.consume();
            else if (this.state.buf.length === 1) throw this.error(new TomlError("Expected digit in milliseconds"));
            else if (this.char === CHAR_HYPHEN || this.char === CHAR_PLUS) {
                this.consume();
                this.next(this.parseTimeZoneHour);
            } else if (this.char === CHAR_Z) {
                this.consume();
                return this.return($24H0e(this.state.result + this.state.buf));
            } else if (this.atEndOfWord()) return this.returnNow($hEXiP(this.state.result + this.state.buf));
            else throw this.error(new TomlError("Unexpected character in datetime, expected period (.), minus (-), plus (+) or Z"));
        }
        parseTimeZoneHour() {
            if (isDigit(this.char)) {
                this.consume();
                // FIXME: No more regexps
                if (/\d\d$/.test(this.state.buf)) return this.next(this.parseTimeZoneSep);
            } else throw this.error(new TomlError("Unexpected character in datetime, expected digit"));
        }
        parseTimeZoneSep() {
            if (this.char === CHAR_COLON) {
                this.consume();
                this.next(this.parseTimeZoneMin);
            } else throw this.error(new TomlError("Unexpected character in datetime, expected colon"));
        }
        parseTimeZoneMin() {
            if (isDigit(this.char)) {
                this.consume();
                if (/\d\d$/.test(this.state.buf)) return this.return($24H0e(this.state.result + this.state.buf));
            } else throw this.error(new TomlError("Unexpected character in datetime, expected digit"));
        }
        /* BOOLEAN */ parseBoolean() {
            /* istanbul ignore else */ if (this.char === CHAR_t) {
                this.consume();
                return this.next(this.parseTrue_r);
            } else if (this.char === CHAR_f) {
                this.consume();
                return this.next(this.parseFalse_a);
            }
        }
        parseTrue_r() {
            if (this.char === CHAR_r) {
                this.consume();
                return this.next(this.parseTrue_u);
            } else throw this.error(new TomlError("Invalid boolean, expected true or false"));
        }
        parseTrue_u() {
            if (this.char === CHAR_u) {
                this.consume();
                return this.next(this.parseTrue_e);
            } else throw this.error(new TomlError("Invalid boolean, expected true or false"));
        }
        parseTrue_e() {
            if (this.char === CHAR_e) return this.return(true);
            else throw this.error(new TomlError("Invalid boolean, expected true or false"));
        }
        parseFalse_a() {
            if (this.char === CHAR_a) {
                this.consume();
                return this.next(this.parseFalse_l);
            } else throw this.error(new TomlError("Invalid boolean, expected true or false"));
        }
        parseFalse_l() {
            if (this.char === CHAR_l) {
                this.consume();
                return this.next(this.parseFalse_s);
            } else throw this.error(new TomlError("Invalid boolean, expected true or false"));
        }
        parseFalse_s() {
            if (this.char === CHAR_s) {
                this.consume();
                return this.next(this.parseFalse_e);
            } else throw this.error(new TomlError("Invalid boolean, expected true or false"));
        }
        parseFalse_e() {
            if (this.char === CHAR_e) return this.return(false);
            else throw this.error(new TomlError("Invalid boolean, expected true or false"));
        }
        /* INLINE LISTS */ parseInlineList() {
            if (this.char === CHAR_SP || this.char === CTRL_I || this.char === CTRL_M || this.char === CTRL_J) return null;
            else if (this.char === Parser.END) throw this.error(new TomlError("Unterminated inline array"));
            else if (this.char === CHAR_NUM) return this.call(this.parseComment);
            else if (this.char === CHAR_RSQB) return this.return(this.state.resultArr || InlineList());
            else return this.callNow(this.parseValue, this.recordInlineListValue);
        }
        recordInlineListValue(value) {
            if (this.state.resultArr) {
                const listType = this.state.resultArr[_contentType];
                const valueType = tomlType(value);
                if (listType !== valueType) throw this.error(new TomlError(`Inline lists must be a single type, not a mix of ${listType} and ${valueType}`));
            } else this.state.resultArr = InlineList(tomlType(value));
            if (isFloat(value) || isInteger(value)) // unbox now that we've verified they're ok
            this.state.resultArr.push(value.valueOf());
            else this.state.resultArr.push(value);
            return this.goto(this.parseInlineListNext);
        }
        parseInlineListNext() {
            if (this.char === CHAR_SP || this.char === CTRL_I || this.char === CTRL_M || this.char === CTRL_J) return null;
            else if (this.char === CHAR_NUM) return this.call(this.parseComment);
            else if (this.char === CHAR_COMMA) return this.next(this.parseInlineList);
            else if (this.char === CHAR_RSQB) return this.goto(this.parseInlineList);
            else throw this.error(new TomlError("Invalid character, expected whitespace, comma (,) or close bracket (])"));
        }
        /* INLINE TABLE */ parseInlineTable() {
            if (this.char === CHAR_SP || this.char === CTRL_I) return null;
            else if (this.char === Parser.END || this.char === CHAR_NUM || this.char === CTRL_J || this.char === CTRL_M) throw this.error(new TomlError("Unterminated inline array"));
            else if (this.char === CHAR_RCUB) return this.return(this.state.resultTable || InlineTable());
            else {
                if (!this.state.resultTable) this.state.resultTable = InlineTable();
                return this.callNow(this.parseAssign, this.recordInlineTableValue);
            }
        }
        recordInlineTableValue(kv) {
            let target = this.state.resultTable;
            let finalKey = kv.key.pop();
            for (let kw of kv.key){
                if (hasKey(target, kw) && (!isTable(target[kw]) || target[kw][_declared])) throw this.error(new TomlError("Can't redefine existing key"));
                target = target[kw] = target[kw] || Table();
            }
            if (hasKey(target, finalKey)) throw this.error(new TomlError("Can't redefine existing key"));
            if (isInteger(kv.value) || isFloat(kv.value)) target[finalKey] = kv.value.valueOf();
            else target[finalKey] = kv.value;
            return this.goto(this.parseInlineTableNext);
        }
        parseInlineTableNext() {
            if (this.char === CHAR_SP || this.char === CTRL_I) return null;
            else if (this.char === Parser.END || this.char === CHAR_NUM || this.char === CTRL_J || this.char === CTRL_M) throw this.error(new TomlError("Unterminated inline array"));
            else if (this.char === CHAR_COMMA) return this.next(this.parseInlineTable);
            else if (this.char === CHAR_RCUB) return this.goto(this.parseInlineTable);
            else throw this.error(new TomlError("Invalid character, expected whitespace, comma (,) or close bracket (])"));
        }
    }
    return TOMLParser;
}

});
parcelRegister("ibqqh", function(module, exports) {
"use strict";
const $d3cdc01cc6068457$var$ParserEND = 0x110000;
class $d3cdc01cc6068457$var$ParserError extends Error {
    /* istanbul ignore next */ constructor(msg, filename, linenumber){
        super("[ParserError] " + msg, filename, linenumber);
        this.name = "ParserError";
        this.code = "ParserError";
        if (Error.captureStackTrace) Error.captureStackTrace(this, $d3cdc01cc6068457$var$ParserError);
    }
}
class $d3cdc01cc6068457$var$State {
    constructor(parser){
        this.parser = parser;
        this.buf = "";
        this.returned = null;
        this.result = null;
        this.resultTable = null;
        this.resultArr = null;
    }
}
class $d3cdc01cc6068457$var$Parser {
    constructor(){
        this.pos = 0;
        this.col = 0;
        this.line = 0;
        this.obj = {};
        this.ctx = this.obj;
        this.stack = [];
        this._buf = "";
        this.char = null;
        this.ii = 0;
        this.state = new $d3cdc01cc6068457$var$State(this.parseStart);
    }
    parse(str) {
        /* istanbul ignore next */ if (str.length === 0 || str.length == null) return;
        this._buf = String(str);
        this.ii = -1;
        this.char = -1;
        let getNext;
        while(getNext === false || this.nextChar())getNext = this.runOne();
        this._buf = null;
    }
    nextChar() {
        if (this.char === 0x0A) {
            ++this.line;
            this.col = -1;
        }
        ++this.ii;
        this.char = this._buf.codePointAt(this.ii);
        ++this.pos;
        ++this.col;
        return this.haveBuffer();
    }
    haveBuffer() {
        return this.ii < this._buf.length;
    }
    runOne() {
        return this.state.parser.call(this, this.state.returned);
    }
    finish() {
        this.char = $d3cdc01cc6068457$var$ParserEND;
        let last;
        do {
            last = this.state.parser;
            this.runOne();
        }while (this.state.parser !== last);
        this.ctx = null;
        this.state = null;
        this._buf = null;
        return this.obj;
    }
    next(fn) {
        /* istanbul ignore next */ if (typeof fn !== "function") throw new $d3cdc01cc6068457$var$ParserError("Tried to set state to non-existent state: " + JSON.stringify(fn));
        this.state.parser = fn;
    }
    goto(fn) {
        this.next(fn);
        return this.runOne();
    }
    call(fn, returnWith) {
        if (returnWith) this.next(returnWith);
        this.stack.push(this.state);
        this.state = new $d3cdc01cc6068457$var$State(fn);
    }
    callNow(fn, returnWith) {
        this.call(fn, returnWith);
        return this.runOne();
    }
    return(value) {
        /* istanbul ignore next */ if (this.stack.length === 0) throw this.error(new $d3cdc01cc6068457$var$ParserError("Stack underflow"));
        if (value === undefined) value = this.state.buf;
        this.state = this.stack.pop();
        this.state.returned = value;
    }
    returnNow(value) {
        this.return(value);
        return this.runOne();
    }
    consume() {
        /* istanbul ignore next */ if (this.char === $d3cdc01cc6068457$var$ParserEND) throw this.error(new $d3cdc01cc6068457$var$ParserError("Unexpected end-of-buffer"));
        this.state.buf += this._buf[this.ii];
    }
    error(err) {
        err.line = this.line;
        err.col = this.col;
        err.pos = this.pos;
        return err;
    }
    /* istanbul ignore next */ parseStart() {
        throw new $d3cdc01cc6068457$var$ParserError("Must declare a parseStart method");
    }
}
$d3cdc01cc6068457$var$Parser.END = $d3cdc01cc6068457$var$ParserEND;
$d3cdc01cc6068457$var$Parser.Error = $d3cdc01cc6068457$var$ParserError;
module.exports = $d3cdc01cc6068457$var$Parser;

});

parcelRegister("24H0e", function(module, exports) {
"use strict";
module.exports = (value)=>{
    const date = new Date(value);
    /* istanbul ignore if */ if (isNaN(date)) throw new TypeError("Invalid Datetime");
    else return date;
};

});

parcelRegister("hEXiP", function(module, exports) {
"use strict";

var $2IBB1 = parcelRequire("2IBB1");
class $cdb42c6230dddba7$var$FloatingDateTime extends Date {
    constructor(value){
        super(value + "Z");
        this.isFloating = true;
    }
    toISOString() {
        const date = `${this.getUTCFullYear()}-${$2IBB1(2, this.getUTCMonth() + 1)}-${$2IBB1(2, this.getUTCDate())}`;
        const time = `${$2IBB1(2, this.getUTCHours())}:${$2IBB1(2, this.getUTCMinutes())}:${$2IBB1(2, this.getUTCSeconds())}.${$2IBB1(3, this.getUTCMilliseconds())}`;
        return `${date}T${time}`;
    }
}
module.exports = (value)=>{
    const date = new $cdb42c6230dddba7$var$FloatingDateTime(value);
    /* istanbul ignore if */ if (isNaN(date)) throw new TypeError("Invalid Datetime");
    else return date;
};

});
parcelRegister("2IBB1", function(module, exports) {
"use strict";
module.exports = (d, num)=>{
    num = String(num);
    while(num.length < d)num = "0" + num;
    return num;
};

});


parcelRegister("cdqCB", function(module, exports) {
"use strict";

var $2IBB1 = parcelRequire("2IBB1");
const $8e4b596e0ae2b6d0$var$DateTime = $parcel$global.Date;
class $8e4b596e0ae2b6d0$var$Date extends $8e4b596e0ae2b6d0$var$DateTime {
    constructor(value){
        super(value);
        this.isDate = true;
    }
    toISOString() {
        return `${this.getUTCFullYear()}-${$2IBB1(2, this.getUTCMonth() + 1)}-${$2IBB1(2, this.getUTCDate())}`;
    }
}
module.exports = (value)=>{
    const date = new $8e4b596e0ae2b6d0$var$Date(value);
    /* istanbul ignore if */ if (isNaN(date)) throw new TypeError("Invalid Datetime");
    else return date;
};

});

parcelRegister("hjWfG", function(module, exports) {
"use strict";

var $2IBB1 = parcelRequire("2IBB1");
class $c9c165a38420e4df$var$Time extends Date {
    constructor(value){
        super(`0000-01-01T${value}Z`);
        this.isTime = true;
    }
    toISOString() {
        return `${$2IBB1(2, this.getUTCHours())}:${$2IBB1(2, this.getUTCMinutes())}:${$2IBB1(2, this.getUTCSeconds())}.${$2IBB1(3, this.getUTCMilliseconds())}`;
    }
}
module.exports = (value)=>{
    const date = new $c9c165a38420e4df$var$Time(value);
    /* istanbul ignore if */ if (isNaN(date)) throw new TypeError("Invalid Datetime");
    else return date;
};

});


parcelRegister("bmucT", function(module, exports) {
"use strict";
module.exports = $84592e4400324ce2$var$prettyError;
function $84592e4400324ce2$var$prettyError(err, buf) {
    /* istanbul ignore if */ if (err.pos == null || err.line == null) return err;
    let msg = err.message;
    msg += ` at row ${err.line + 1}, col ${err.col + 1}, pos ${err.pos}:\n`;
    /* istanbul ignore else */ if (buf && buf.split) {
        const lines = buf.split(/\n/);
        const lineNumWidth = String(Math.min(lines.length, err.line + 3)).length;
        let linePadding = " ";
        while(linePadding.length < lineNumWidth)linePadding += " ";
        for(let ii = Math.max(0, err.line - 1); ii < Math.min(lines.length, err.line + 2); ++ii){
            let lineNum = String(ii + 1);
            if (lineNum.length < lineNumWidth) lineNum = " " + lineNum;
            if (err.line === ii) {
                msg += lineNum + "> " + lines[ii] + "\n";
                msg += linePadding + "  ";
                for(let hh = 0; hh < err.col; ++hh)msg += " ";
                msg += "^\n";
            } else msg += lineNum + ": " + lines[ii] + "\n";
        }
    }
    err.message = msg + "\n";
    return err;
}

});


parcelRegister("hepwo", function(module, exports) {
"use strict";
module.exports = $c8b78a7f9ceb755b$var$parseAsync;

var $2nj4a = parcelRequire("2nj4a");

var $bmucT = parcelRequire("bmucT");
function $c8b78a7f9ceb755b$var$parseAsync(str, opts) {
    if (!opts) opts = {};
    const index = 0;
    const blocksize = opts.blocksize || 40960;
    const parser = new $2nj4a();
    return new Promise((resolve, reject)=>{
        setImmediate(parseAsyncNext, index, blocksize, resolve, reject);
    });
    function parseAsyncNext(index, blocksize, resolve, reject) {
        if (index >= str.length) try {
            return resolve(parser.finish());
        } catch (err) {
            return reject($bmucT(err, str));
        }
        try {
            parser.parse(str.slice(index, index + blocksize));
            setImmediate(parseAsyncNext, index + blocksize, blocksize, resolve, reject);
        } catch (err) {
            reject($bmucT(err, str));
        }
    }
}

});

parcelRegister("9ai43", function(module, exports) {
"use strict";
module.exports = $6ac30f6d148183fc$var$parseStream;


var $2nj4a = parcelRequire("2nj4a");
function $6ac30f6d148183fc$var$parseStream(stm) {
    if (stm) return $6ac30f6d148183fc$var$parseReadable(stm);
    else return $6ac30f6d148183fc$var$parseTransform(stm);
}
function $6ac30f6d148183fc$var$parseReadable(stm) {
    const parser = new $2nj4a();
    stm.setEncoding("utf8");
    return new Promise((resolve, reject)=>{
        let readable;
        let ended = false;
        let errored = false;
        function finish() {
            ended = true;
            if (readable) return;
            try {
                resolve(parser.finish());
            } catch (err) {
                reject(err);
            }
        }
        function error(err) {
            errored = true;
            reject(err);
        }
        stm.once("end", finish);
        stm.once("error", error);
        readNext();
        function readNext() {
            readable = true;
            let data;
            while((data = stm.read()) !== null)try {
                parser.parse(data);
            } catch (err) {
                return error(err);
            }
            readable = false;
            /* istanbul ignore if */ if (ended) return finish();
            /* istanbul ignore if */ if (errored) return;
            stm.once("readable", readNext);
        }
    });
}
function $6ac30f6d148183fc$var$parseTransform() {
    const parser = new $2nj4a();
    return new $eJUMF$stream.Transform({
        objectMode: true,
        transform (chunk, encoding, cb) {
            try {
                parser.parse(chunk.toString(encoding));
            } catch (err) {
                this.emit("error", err);
            }
            cb();
        },
        flush (cb) {
            try {
                this.push(parser.finish());
            } catch (err) {
                this.emit("error", err);
            }
            cb();
        }
    });
}

});


parcelRegister("h3JHI", function(module, exports) {
"use strict";
module.exports = $c6b62b5e5d7ee0c4$var$stringify;
module.exports.value = $c6b62b5e5d7ee0c4$var$stringifyInline;
function $c6b62b5e5d7ee0c4$var$stringify(obj) {
    if (obj === null) throw $c6b62b5e5d7ee0c4$var$typeError("null");
    if (obj === void 0) throw $c6b62b5e5d7ee0c4$var$typeError("undefined");
    if (typeof obj !== "object") throw $c6b62b5e5d7ee0c4$var$typeError(typeof obj);
    if (typeof obj.toJSON === "function") obj = obj.toJSON();
    if (obj == null) return null;
    const type = $c6b62b5e5d7ee0c4$var$tomlType(obj);
    if (type !== "table") throw $c6b62b5e5d7ee0c4$var$typeError(type);
    return $c6b62b5e5d7ee0c4$var$stringifyObject("", "", obj);
}
function $c6b62b5e5d7ee0c4$var$typeError(type) {
    return new Error("Can only stringify objects, not " + type);
}
function $c6b62b5e5d7ee0c4$var$arrayOneTypeError() {
    return new Error("Array values can't have mixed types");
}
function $c6b62b5e5d7ee0c4$var$getInlineKeys(obj) {
    return Object.keys(obj).filter((key)=>$c6b62b5e5d7ee0c4$var$isInline(obj[key]));
}
function $c6b62b5e5d7ee0c4$var$getComplexKeys(obj) {
    return Object.keys(obj).filter((key)=>!$c6b62b5e5d7ee0c4$var$isInline(obj[key]));
}
function $c6b62b5e5d7ee0c4$var$toJSON(obj) {
    let nobj = Array.isArray(obj) ? [] : Object.prototype.hasOwnProperty.call(obj, "__proto__") ? {
        ["__proto__"]: undefined
    } : {};
    for (let prop of Object.keys(obj))if (obj[prop] && typeof obj[prop].toJSON === "function" && !("toISOString" in obj[prop])) nobj[prop] = obj[prop].toJSON();
    else nobj[prop] = obj[prop];
    return nobj;
}
function $c6b62b5e5d7ee0c4$var$stringifyObject(prefix, indent, obj) {
    obj = $c6b62b5e5d7ee0c4$var$toJSON(obj);
    var inlineKeys;
    var complexKeys;
    inlineKeys = $c6b62b5e5d7ee0c4$var$getInlineKeys(obj);
    complexKeys = $c6b62b5e5d7ee0c4$var$getComplexKeys(obj);
    var result = [];
    var inlineIndent = indent || "";
    inlineKeys.forEach((key)=>{
        var type = $c6b62b5e5d7ee0c4$var$tomlType(obj[key]);
        if (type !== "undefined" && type !== "null") result.push(inlineIndent + $c6b62b5e5d7ee0c4$var$stringifyKey(key) + " = " + $c6b62b5e5d7ee0c4$var$stringifyAnyInline(obj[key], true));
    });
    if (result.length > 0) result.push("");
    var complexIndent = prefix && inlineKeys.length > 0 ? indent + "  " : "";
    complexKeys.forEach((key)=>{
        result.push($c6b62b5e5d7ee0c4$var$stringifyComplex(prefix, complexIndent, key, obj[key]));
    });
    return result.join("\n");
}
function $c6b62b5e5d7ee0c4$var$isInline(value) {
    switch($c6b62b5e5d7ee0c4$var$tomlType(value)){
        case "undefined":
        case "null":
        case "integer":
        case "nan":
        case "float":
        case "boolean":
        case "string":
        case "datetime":
            return true;
        case "array":
            return value.length === 0 || $c6b62b5e5d7ee0c4$var$tomlType(value[0]) !== "table";
        case "table":
            return Object.keys(value).length === 0;
        /* istanbul ignore next */ default:
            return false;
    }
}
function $c6b62b5e5d7ee0c4$var$tomlType(value) {
    if (value === undefined) return "undefined";
    else if (value === null) return "null";
    else if (typeof value === "bigint" || Number.isInteger(value) && !Object.is(value, -0)) return "integer";
    else if (typeof value === "number") return "float";
    else if (typeof value === "boolean") return "boolean";
    else if (typeof value === "string") return "string";
    else if ("toISOString" in value) return isNaN(value) ? "undefined" : "datetime";
    else if (Array.isArray(value)) return "array";
    else return "table";
}
function $c6b62b5e5d7ee0c4$var$stringifyKey(key) {
    var keyStr = String(key);
    if (/^[-A-Za-z0-9_]+$/.test(keyStr)) return keyStr;
    else return $c6b62b5e5d7ee0c4$var$stringifyBasicString(keyStr);
}
function $c6b62b5e5d7ee0c4$var$stringifyBasicString(str) {
    return '"' + $c6b62b5e5d7ee0c4$var$escapeString(str).replace(/"/g, '\\"') + '"';
}
function $c6b62b5e5d7ee0c4$var$stringifyLiteralString(str) {
    return "'" + str + "'";
}
function $c6b62b5e5d7ee0c4$var$numpad(num, str) {
    while(str.length < num)str = "0" + str;
    return str;
}
function $c6b62b5e5d7ee0c4$var$escapeString(str) {
    return str.replace(/\\/g, "\\\\").replace(/[\b]/g, "\\b").replace(/\t/g, "\\t").replace(/\n/g, "\\n").replace(/\f/g, "\\f").replace(/\r/g, "\\r")/* eslint-disable no-control-regex */ .replace(/([\u0000-\u001f\u007f])/, (c)=>"\\u" + $c6b62b5e5d7ee0c4$var$numpad(4, c.codePointAt(0).toString(16)));
/* eslint-enable no-control-regex */ }
function $c6b62b5e5d7ee0c4$var$stringifyMultilineString(str) {
    let escaped = str.split(/\n/).map((str)=>{
        return $c6b62b5e5d7ee0c4$var$escapeString(str).replace(/"(?="")/g, '\\"');
    }).join("\n");
    if (escaped.slice(-1) === '"') escaped += "\\\n";
    return '"""\n' + escaped + '"""';
}
function $c6b62b5e5d7ee0c4$var$stringifyAnyInline(value, multilineOk) {
    let type = $c6b62b5e5d7ee0c4$var$tomlType(value);
    if (type === "string") {
        if (multilineOk && /\n/.test(value)) type = "string-multiline";
        else if (!/[\b\t\n\f\r']/.test(value) && /"/.test(value)) type = "string-literal";
    }
    return $c6b62b5e5d7ee0c4$var$stringifyInline(value, type);
}
function $c6b62b5e5d7ee0c4$var$stringifyInline(value, type) {
    /* istanbul ignore if */ if (!type) type = $c6b62b5e5d7ee0c4$var$tomlType(value);
    switch(type){
        case "string-multiline":
            return $c6b62b5e5d7ee0c4$var$stringifyMultilineString(value);
        case "string":
            return $c6b62b5e5d7ee0c4$var$stringifyBasicString(value);
        case "string-literal":
            return $c6b62b5e5d7ee0c4$var$stringifyLiteralString(value);
        case "integer":
            return $c6b62b5e5d7ee0c4$var$stringifyInteger(value);
        case "float":
            return $c6b62b5e5d7ee0c4$var$stringifyFloat(value);
        case "boolean":
            return $c6b62b5e5d7ee0c4$var$stringifyBoolean(value);
        case "datetime":
            return $c6b62b5e5d7ee0c4$var$stringifyDatetime(value);
        case "array":
            return $c6b62b5e5d7ee0c4$var$stringifyInlineArray(value.filter((_)=>$c6b62b5e5d7ee0c4$var$tomlType(_) !== "null" && $c6b62b5e5d7ee0c4$var$tomlType(_) !== "undefined" && $c6b62b5e5d7ee0c4$var$tomlType(_) !== "nan"));
        case "table":
            return $c6b62b5e5d7ee0c4$var$stringifyInlineTable(value);
        /* istanbul ignore next */ default:
            throw $c6b62b5e5d7ee0c4$var$typeError(type);
    }
}
function $c6b62b5e5d7ee0c4$var$stringifyInteger(value) {
    /* eslint-disable security/detect-unsafe-regex */ return String(value).replace(/\B(?=(\d{3})+(?!\d))/g, "_");
}
function $c6b62b5e5d7ee0c4$var$stringifyFloat(value) {
    if (value === Infinity) return "inf";
    else if (value === -Infinity) return "-inf";
    else if (Object.is(value, NaN)) return "nan";
    else if (Object.is(value, -0)) return "-0.0";
    var chunks = String(value).split(".");
    var int = chunks[0];
    var dec = chunks[1] || 0;
    return $c6b62b5e5d7ee0c4$var$stringifyInteger(int) + "." + dec;
}
function $c6b62b5e5d7ee0c4$var$stringifyBoolean(value) {
    return String(value);
}
function $c6b62b5e5d7ee0c4$var$stringifyDatetime(value) {
    return value.toISOString();
}
function $c6b62b5e5d7ee0c4$var$isNumber(type) {
    return type === "float" || type === "integer";
}
function $c6b62b5e5d7ee0c4$var$arrayType(values) {
    var contentType = $c6b62b5e5d7ee0c4$var$tomlType(values[0]);
    if (values.every((_)=>$c6b62b5e5d7ee0c4$var$tomlType(_) === contentType)) return contentType;
    // mixed integer/float, emit as floats
    if (values.every((_)=>$c6b62b5e5d7ee0c4$var$isNumber($c6b62b5e5d7ee0c4$var$tomlType(_)))) return "float";
    return "mixed";
}
function $c6b62b5e5d7ee0c4$var$validateArray(values) {
    const type = $c6b62b5e5d7ee0c4$var$arrayType(values);
    if (type === "mixed") throw $c6b62b5e5d7ee0c4$var$arrayOneTypeError();
    return type;
}
function $c6b62b5e5d7ee0c4$var$stringifyInlineArray(values) {
    values = $c6b62b5e5d7ee0c4$var$toJSON(values);
    const type = $c6b62b5e5d7ee0c4$var$validateArray(values);
    var result = "[";
    var stringified = values.map((_)=>$c6b62b5e5d7ee0c4$var$stringifyInline(_, type));
    if (stringified.join(", ").length > 60 || /\n/.test(stringified)) result += "\n  " + stringified.join(",\n  ") + "\n";
    else result += " " + stringified.join(", ") + (stringified.length > 0 ? " " : "");
    return result + "]";
}
function $c6b62b5e5d7ee0c4$var$stringifyInlineTable(value) {
    value = $c6b62b5e5d7ee0c4$var$toJSON(value);
    var result = [];
    Object.keys(value).forEach((key)=>{
        result.push($c6b62b5e5d7ee0c4$var$stringifyKey(key) + " = " + $c6b62b5e5d7ee0c4$var$stringifyAnyInline(value[key], false));
    });
    return "{ " + result.join(", ") + (result.length > 0 ? " " : "") + "}";
}
function $c6b62b5e5d7ee0c4$var$stringifyComplex(prefix, indent, key, value) {
    var valueType = $c6b62b5e5d7ee0c4$var$tomlType(value);
    /* istanbul ignore else */ if (valueType === "array") return $c6b62b5e5d7ee0c4$var$stringifyArrayOfTables(prefix, indent, key, value);
    else if (valueType === "table") return $c6b62b5e5d7ee0c4$var$stringifyComplexTable(prefix, indent, key, value);
    else throw $c6b62b5e5d7ee0c4$var$typeError(valueType);
}
function $c6b62b5e5d7ee0c4$var$stringifyArrayOfTables(prefix, indent, key, values) {
    values = $c6b62b5e5d7ee0c4$var$toJSON(values);
    $c6b62b5e5d7ee0c4$var$validateArray(values);
    var firstValueType = $c6b62b5e5d7ee0c4$var$tomlType(values[0]);
    /* istanbul ignore if */ if (firstValueType !== "table") throw $c6b62b5e5d7ee0c4$var$typeError(firstValueType);
    var fullKey = prefix + $c6b62b5e5d7ee0c4$var$stringifyKey(key);
    var result = "";
    values.forEach((table)=>{
        if (result.length > 0) result += "\n";
        result += indent + "[[" + fullKey + "]]\n";
        result += $c6b62b5e5d7ee0c4$var$stringifyObject(fullKey + ".", indent, table);
    });
    return result;
}
function $c6b62b5e5d7ee0c4$var$stringifyComplexTable(prefix, indent, key, value) {
    var fullKey = prefix + $c6b62b5e5d7ee0c4$var$stringifyKey(key);
    var result = "";
    if ($c6b62b5e5d7ee0c4$var$getInlineKeys(value).length > 0) result += indent + "[" + fullKey + "]\n";
    return result + $c6b62b5e5d7ee0c4$var$stringifyObject(fullKey + ".", indent, value);
}

});

parcelRegister("jO8Wy", function(module, exports) {
"use strict";
module.exports = function(Yallist) {
    Yallist.prototype[Symbol.iterator] = function*() {
        for(let walker = this.head; walker; walker = walker.next)yield walker.value;
    };
};

});


$parcel$export(module.exports, "countLines", () => $e7d0753bf78fdf0d$export$2e2bcd8739ae039);
$parcel$export(module.exports, "generateBuildMetrics", () => $ad8e7fa05e3cce56$export$2e2bcd8739ae039);
$parcel$export(module.exports, "generateCertificate", () => $45f524acfa202ca3$export$2e2bcd8739ae039);
$parcel$export(module.exports, "getCertificate", () => $8c45cb6bf65b209a$export$2e2bcd8739ae039);
$parcel$export(module.exports, "getModuleParts", () => $2ecaa6ad80adb577$export$2e2bcd8739ae039);
$parcel$export(module.exports, "getRootDir", () => $67188e47ec876bb9$export$2e2bcd8739ae039);
$parcel$export(module.exports, "isDirectoryInside", () => $cbe535290674ed5c$export$2e2bcd8739ae039);
$parcel$export(module.exports, "isURL", () => $fe98255bd814b6f2$export$2e2bcd8739ae039);
$parcel$export(module.exports, "objectHash", () => $7936da87a115c634$export$2e2bcd8739ae039);
$parcel$export(module.exports, "prettifyTime", () => $980d5d818c711c76$export$2e2bcd8739ae039);
$parcel$export(module.exports, "prettyDiagnostic", () => $f48a8d35082f1415$export$2e2bcd8739ae039);
$parcel$export(module.exports, "PromiseQueue", () => $31bd78e367586e0a$export$2e2bcd8739ae039);
$parcel$export(module.exports, "validateSchema", () => $f2eb8388071f2c88$export$2e2bcd8739ae039);
$parcel$export(module.exports, "TapStream", () => $f2ed6479f7fa5537$export$2e2bcd8739ae039);
$parcel$export(module.exports, "urlJoin", () => $121fdb6480683bb1$export$2e2bcd8739ae039);
$parcel$export(module.exports, "relativeUrl", () => $2cbd6511468e9f8a$export$2e2bcd8739ae039);
$parcel$export(module.exports, "createDependencyLocation", () => $24c0b79b53549a3b$export$2e2bcd8739ae039);
$parcel$export(module.exports, "debounce", () => $133ed40ba07aa88a$export$2e2bcd8739ae039);
$parcel$export(module.exports, "throttle", () => $674d66b2afb1c90a$export$2e2bcd8739ae039);
$parcel$export(module.exports, "openInBrowser", () => $aa0306083130f978$export$2e2bcd8739ae039);
$parcel$export(module.exports, "findAlternativeNodeModules", () => $92b629003a924abd$export$6643be4f4e63e994);
$parcel$export(module.exports, "findAlternativeFiles", () => $92b629003a924abd$export$4eeb1b3271a29661);
$parcel$export(module.exports, "blobToBuffer", () => $6cd6a7c21ac29bd4$export$e234f0a8b913b7b9);
$parcel$export(module.exports, "blobToString", () => $6cd6a7c21ac29bd4$export$c6adc95df13c8b9e);
$parcel$export(module.exports, "unique", () => $72990297ab84086f$export$7a5d5c156e7dc406);
$parcel$export(module.exports, "objectSortedEntries", () => $72990297ab84086f$export$61559eb31990eff6);
$parcel$export(module.exports, "objectSortedEntriesDeep", () => $72990297ab84086f$export$1a9b883158ac407c);
$parcel$export(module.exports, "setDifference", () => $72990297ab84086f$export$8bd517cc5b3722f7);
$parcel$export(module.exports, "setEqual", () => $72990297ab84086f$export$dd7d5a65a6b6780f);
$parcel$export(module.exports, "setIntersect", () => $72990297ab84086f$export$9404cfefeb010e68);
$parcel$export(module.exports, "setUnion", () => $72990297ab84086f$export$667066422fa0af46);
$parcel$export(module.exports, "resolveConfig", () => $1b5cf2552daa3eaf$export$7eca4ea16d4c8343);
$parcel$export(module.exports, "resolveConfigSync", () => $1b5cf2552daa3eaf$export$d175e66e9fcd7b75);
$parcel$export(module.exports, "loadConfig", () => $1b5cf2552daa3eaf$export$c1a4367d4847eb06);
$parcel$export(module.exports, "readConfig", () => $1b5cf2552daa3eaf$export$f5327b421858c8cd);
$parcel$export(module.exports, "DefaultMap", () => $e2511c3c613286fb$export$674cd7dcb504ac5c);
$parcel$export(module.exports, "DefaultWeakMap", () => $e2511c3c613286fb$export$4924f7ffab2ae440);
$parcel$export(module.exports, "makeDeferredWithPromise", () => $d336eceed4f929a7$export$93f345b3f0dd27e7);
$parcel$export(module.exports, "getProgressMessage", () => $9242cbb586f27946$export$d28945a2f2ba5e30);
$parcel$export(module.exports, "isGlob", () => $5f789aedea5c346b$export$f3a2344a73dbdd42);
$parcel$export(module.exports, "isGlobMatch", () => $5f789aedea5c346b$export$16e6d319a883f04e);
$parcel$export(module.exports, "globMatch", () => $5f789aedea5c346b$export$73b12c6cc27aa6c0);
$parcel$export(module.exports, "globSync", () => $5f789aedea5c346b$export$42275ba87174c828);
$parcel$export(module.exports, "glob", () => $5f789aedea5c346b$export$442f1a04865e4790);
$parcel$export(module.exports, "globToRegex", () => $5f789aedea5c346b$export$c0436a5422df81e4);
$parcel$export(module.exports, "hashStream", () => $f78b2178300911a1$export$8a9ede1a78d6a1fe);
$parcel$export(module.exports, "hashObject", () => $f78b2178300911a1$export$3477f9615e12f61d);
$parcel$export(module.exports, "hashFile", () => $f78b2178300911a1$export$42462553d605d8cd);
$parcel$export(module.exports, "SharedBuffer", () => $9c07beb5fc2a381c$export$8b1c306fed4227bf);
$parcel$export(module.exports, "fuzzySearch", () => $f2eb8388071f2c88$export$2115c2c0a84eef61);
$parcel$export(module.exports, "createHTTPServer", () => $e73ee6c06616a7a3$export$3b1983e9896f988b);
$parcel$export(module.exports, "normalizePath", () => $fa6e0d6f91ab93b2$export$6af368f973c74c5);
$parcel$export(module.exports, "normalizeSeparators", () => $fa6e0d6f91ab93b2$export$16778b798ae8e49d);
$parcel$export(module.exports, "relativePath", () => $fa6e0d6f91ab93b2$export$7413eea5ad243d4);
$parcel$export(module.exports, "replaceURLReferences", () => $da0b7647e94c7f83$export$d0d0105f44defc19);
$parcel$export(module.exports, "replaceInlineReferences", () => $da0b7647e94c7f83$export$f074a8f9bef628fd);
$parcel$export(module.exports, "measureStreamLength", () => $94281e95849778d7$export$457f03b1bf37ec1a);
$parcel$export(module.exports, "readableFromStringOrBuffer", () => $94281e95849778d7$export$dc30d0b81ccad9c7);
$parcel$export(module.exports, "bufferStream", () => $94281e95849778d7$export$f109d1c79a5ae5a1);
$parcel$export(module.exports, "blobToStream", () => $94281e95849778d7$export$5ba0b0e7e2e9ae7a);
$parcel$export(module.exports, "streamFromPromise", () => $94281e95849778d7$export$7ebca75e1135fcd6);
$parcel$export(module.exports, "fallbackStream", () => $94281e95849778d7$export$68f6769cfac79897);
$parcel$export(module.exports, "relativeBundlePath", () => $651d30fd8f0fa616$export$402b5a120b1183b3);
$parcel$export(module.exports, "ansiHtml", () => $21dfda8d2f915460$export$565d0ff71645da31);
$parcel$export(module.exports, "escapeHTML", () => $1b41be0529648598$export$5dd27816c66fb702);
$parcel$export(module.exports, "SOURCEMAP_RE", () => $58ae611e06043814$export$db8833b274702782);
$parcel$export(module.exports, "SOURCEMAP_EXTENSIONS", () => $58ae611e06043814$export$4b206fdd01e58041);
$parcel$export(module.exports, "matchSourceMappingURL", () => $58ae611e06043814$export$ff36203a2e5cc203);
$parcel$export(module.exports, "loadSourceMapUrl", () => $58ae611e06043814$export$527a92fa675f5e93);
$parcel$export(module.exports, "loadSourceMap", () => $58ae611e06043814$export$c500fecaca54de65);
$parcel$export(module.exports, "remapSourceLocation", () => $58ae611e06043814$export$2fed780245c466c1);
$parcel$export(module.exports, "stripAnsi", () => (/*@__PURE__*/$parcel$interopDefault($166044cf9ce846b7$exports)));
function $e7d0753bf78fdf0d$export$2e2bcd8739ae039(string, startIndex = 0) {
    let lines = 1;
    for(let i = startIndex; i < string.length; i++)if (string.charAt(i) === "\n") lines++;
    return lines;
}



var $3fb15c2a4d9dd820$exports = {};
"use strict";
function $3fb15c2a4d9dd820$var$nullthrows(x, message) {
    if (x != null) return x;
    var error = new Error(message !== undefined ? message : "Got unexpected " + x);
    error.framesToPop = 1; // Skip nullthrows's own stack frame.
    throw error;
}
$3fb15c2a4d9dd820$exports = $3fb15c2a4d9dd820$var$nullthrows;
$3fb15c2a4d9dd820$exports.default = $3fb15c2a4d9dd820$var$nullthrows;
Object.defineProperty($3fb15c2a4d9dd820$exports, "__esModule", {
    value: true
});




async function $ad8e7fa05e3cce56$var$getSourcemapSizes(filePath, fs, projectRoot) {
    let bundleContents = await fs.readFile(filePath, "utf-8");
    let mapUrlData = await (0, $58ae611e06043814$export$527a92fa675f5e93)(fs, filePath, bundleContents);
    if (!mapUrlData) return null;
    let rawMap = mapUrlData.map;
    let sourceMap = new (0, ($parcel$interopDefault($eJUMF$parcelsourcemap)))(projectRoot);
    sourceMap.addVLQMap(rawMap);
    let parsedMapData = sourceMap.getMap();
    if (parsedMapData.mappings.length > 2) {
        let sources = parsedMapData.sources.map((s)=>(0, ($parcel$interopDefault($eJUMF$path))).normalize((0, ($parcel$interopDefault($eJUMF$path))).join(projectRoot, s)));
        let currLine = 1;
        let currColumn = 0;
        let currMappingIndex = 0;
        let currMapping = parsedMapData.mappings[currMappingIndex];
        let nextMapping = parsedMapData.mappings[currMappingIndex + 1];
        let sourceSizes = new Array(sources.length).fill(0);
        let unknownOrigin = 0;
        for(let i = 0; i < bundleContents.length; i++){
            let character = bundleContents[i];
            while(nextMapping && nextMapping.generated.line === currLine && nextMapping.generated.column <= currColumn){
                currMappingIndex++;
                currMapping = parsedMapData.mappings[currMappingIndex];
                nextMapping = parsedMapData.mappings[currMappingIndex + 1];
            }
            let currentSource = currMapping.source;
            let charSize = Buffer.byteLength(character, "utf8");
            if (currentSource != null && currMapping.generated.line === currLine && currMapping.generated.column <= currColumn) sourceSizes[currentSource] += charSize;
            else unknownOrigin += charSize;
            if (character === "\n") {
                currColumn = 0;
                currLine++;
            } else currColumn++;
        }
        let sizeMap = new Map();
        for(let i = 0; i < sourceSizes.length; i++)sizeMap.set(sources[i], sourceSizes[i]);
        sizeMap.set("", unknownOrigin);
        return sizeMap;
    }
}
async function $ad8e7fa05e3cce56$var$createBundleStats(bundle, fs, projectRoot) {
    let filePath = bundle.filePath;
    let sourcemapSizes = await $ad8e7fa05e3cce56$var$getSourcemapSizes(filePath, fs, projectRoot);
    let assets = new Map();
    bundle.traverseAssets((asset)=>{
        let filePath = (0, ($parcel$interopDefault($eJUMF$path))).normalize(asset.filePath);
        assets.set(filePath, {
            filePath: filePath,
            size: asset.stats.size,
            originalSize: asset.stats.size,
            time: asset.stats.time
        });
    });
    let assetsReport = [];
    if (sourcemapSizes && sourcemapSizes.size) assetsReport = Array.from(sourcemapSizes.keys()).map((filePath)=>{
        let foundSize = sourcemapSizes.get(filePath) || 0;
        let stats = assets.get(filePath) || {
            filePath: filePath,
            size: foundSize,
            originalSize: foundSize,
            time: 0
        };
        return {
            ...stats,
            size: foundSize
        };
    });
    else assetsReport = Array.from(assets.values());
    return {
        filePath: (0, (/*@__PURE__*/$parcel$interopDefault($3fb15c2a4d9dd820$exports)))(bundle.filePath),
        size: bundle.stats.size,
        time: bundle.stats.time,
        assets: assetsReport.sort((a, b)=>b.size - a.size)
    };
}
async function $ad8e7fa05e3cce56$export$2e2bcd8739ae039(bundles, fs, projectRoot) {
    bundles.sort((a, b)=>b.stats.size - a.stats.size).filter((b)=>!!b.filePath);
    return {
        bundles: (await Promise.all(bundles.map((b)=>$ad8e7fa05e3cce56$var$createBundleStats(b, fs, projectRoot)))).filter((e)=>!!e)
    };
}


var $153fbe6506ebad41$exports = {};
/**
 * Node.js module for Forge.
 *
 * @author Dave Longley
 *
 * Copyright 2011-2016 Digital Bazaar, Inc.
 */ 
$153fbe6506ebad41$exports = (parcelRequire("aX5SS"));
var $c4523369f79044c5$exports = {};
/**
 * Advanced Encryption Standard (AES) implementation.
 *
 * This implementation is based on the public domain library 'jscrypto' which
 * was written by:
 *
 * Emily Stark (estark@stanford.edu)
 * Mike Hamburg (mhamburg@stanford.edu)
 * Dan Boneh (dabo@cs.stanford.edu)
 *
 * Parts of this code are based on the OpenSSL implementation of AES:
 * http://www.openssl.org
 *
 * @author Dave Longley
 *
 * Copyright (c) 2010-2014 Digital Bazaar, Inc.
 */ 
var $aX5SS = parcelRequire("aX5SS");
var $68c3fe695c768032$exports = {};
/**
 * Cipher base API.
 *
 * @author Dave Longley
 *
 * Copyright (c) 2010-2014 Digital Bazaar, Inc.
 */ 
var $aX5SS = parcelRequire("aX5SS");
var $de3bd7b4960dd90f$exports = {};
/**
 * Utility functions for web applications.
 *
 * @author Dave Longley
 *
 * Copyright (c) 2010-2018 Digital Bazaar, Inc.
 */ 
var $aX5SS = parcelRequire("aX5SS");
var $386a8a22f2b1bb08$exports = {};
/**
 * Base-N/Base-X encoding/decoding functions.
 *
 * Original implementation from base-x:
 * https://github.com/cryptocoinjs/base-x
 *
 * Which is MIT licensed:
 *
 * The MIT License (MIT)
 *
 * Copyright base-x contributors (c) 2016
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */ var $386a8a22f2b1bb08$var$api = {};
$386a8a22f2b1bb08$exports = $386a8a22f2b1bb08$var$api;
// baseN alphabet indexes
var $386a8a22f2b1bb08$var$_reverseAlphabets = {};
/**
 * BaseN-encodes a Uint8Array using the given alphabet.
 *
 * @param input the Uint8Array to encode.
 * @param maxline the maximum number of encoded characters per line to use,
 *          defaults to none.
 *
 * @return the baseN-encoded output string.
 */ $386a8a22f2b1bb08$var$api.encode = function(input, alphabet, maxline) {
    if (typeof alphabet !== "string") throw new TypeError('"alphabet" must be a string.');
    if (maxline !== undefined && typeof maxline !== "number") throw new TypeError('"maxline" must be a number.');
    var output = "";
    if (!(input instanceof Uint8Array)) // assume forge byte buffer
    output = $386a8a22f2b1bb08$var$_encodeWithByteBuffer(input, alphabet);
    else {
        var i = 0;
        var base = alphabet.length;
        var first = alphabet.charAt(0);
        var digits = [
            0
        ];
        for(i = 0; i < input.length; ++i){
            for(var j = 0, carry = input[i]; j < digits.length; ++j){
                carry += digits[j] << 8;
                digits[j] = carry % base;
                carry = carry / base | 0;
            }
            while(carry > 0){
                digits.push(carry % base);
                carry = carry / base | 0;
            }
        }
        // deal with leading zeros
        for(i = 0; input[i] === 0 && i < input.length - 1; ++i)output += first;
        // convert digits to a string
        for(i = digits.length - 1; i >= 0; --i)output += alphabet[digits[i]];
    }
    if (maxline) {
        var regex = new RegExp(".{1," + maxline + "}", "g");
        output = output.match(regex).join("\r\n");
    }
    return output;
};
/**
 * Decodes a baseN-encoded (using the given alphabet) string to a
 * Uint8Array.
 *
 * @param input the baseN-encoded input string.
 *
 * @return the Uint8Array.
 */ $386a8a22f2b1bb08$var$api.decode = function(input, alphabet) {
    if (typeof input !== "string") throw new TypeError('"input" must be a string.');
    if (typeof alphabet !== "string") throw new TypeError('"alphabet" must be a string.');
    var table = $386a8a22f2b1bb08$var$_reverseAlphabets[alphabet];
    if (!table) {
        // compute reverse alphabet
        table = $386a8a22f2b1bb08$var$_reverseAlphabets[alphabet] = [];
        for(var i = 0; i < alphabet.length; ++i)table[alphabet.charCodeAt(i)] = i;
    }
    // remove whitespace characters
    input = input.replace(/\s/g, "");
    var base = alphabet.length;
    var first = alphabet.charAt(0);
    var bytes = [
        0
    ];
    for(var i = 0; i < input.length; i++){
        var value = table[input.charCodeAt(i)];
        if (value === undefined) return;
        for(var j = 0, carry = value; j < bytes.length; ++j){
            carry += bytes[j] * base;
            bytes[j] = carry & 0xff;
            carry >>= 8;
        }
        while(carry > 0){
            bytes.push(carry & 0xff);
            carry >>= 8;
        }
    }
    // deal with leading zeros
    for(var k = 0; input[k] === first && k < input.length - 1; ++k)bytes.push(0);
    if (typeof Buffer !== "undefined") return Buffer.from(bytes.reverse());
    return new Uint8Array(bytes.reverse());
};
function $386a8a22f2b1bb08$var$_encodeWithByteBuffer(input, alphabet) {
    var i = 0;
    var base = alphabet.length;
    var first = alphabet.charAt(0);
    var digits = [
        0
    ];
    for(i = 0; i < input.length(); ++i){
        for(var j = 0, carry = input.at(i); j < digits.length; ++j){
            carry += digits[j] << 8;
            digits[j] = carry % base;
            carry = carry / base | 0;
        }
        while(carry > 0){
            digits.push(carry % base);
            carry = carry / base | 0;
        }
    }
    var output = "";
    // deal with leading zeros
    for(i = 0; input.at(i) === 0 && i < input.length() - 1; ++i)output += first;
    // convert digits to a string
    for(i = digits.length - 1; i >= 0; --i)output += alphabet[digits[i]];
    return output;
}


/* Utilities API */ var $de3bd7b4960dd90f$var$util = $de3bd7b4960dd90f$exports = $aX5SS.util = $aX5SS.util || {};
// define setImmediate and nextTick
(function() {
    // use native nextTick (unless we're in webpack)
    // webpack (or better node-libs-browser polyfill) sets process.browser.
    // this way we can detect webpack properly
    if (typeof process !== "undefined" && process.nextTick && !process.browser) {
        $de3bd7b4960dd90f$var$util.nextTick = process.nextTick;
        if (typeof setImmediate === "function") $de3bd7b4960dd90f$var$util.setImmediate = setImmediate;
        else // polyfill setImmediate with nextTick, older versions of node
        // (those w/o setImmediate) won't totally starve IO
        $de3bd7b4960dd90f$var$util.setImmediate = $de3bd7b4960dd90f$var$util.nextTick;
        return;
    }
    // polyfill nextTick with native setImmediate
    if (typeof setImmediate === "function") {
        $de3bd7b4960dd90f$var$util.setImmediate = function() {
            return setImmediate.apply(undefined, arguments);
        };
        $de3bd7b4960dd90f$var$util.nextTick = function(callback) {
            return setImmediate(callback);
        };
        return;
    }
    /* Note: A polyfill upgrade pattern is used here to allow combining
  polyfills. For example, MutationObserver is fast, but blocks UI updates,
  so it needs to allow UI updates periodically, so it falls back on
  postMessage or setTimeout. */ // polyfill with setTimeout
    $de3bd7b4960dd90f$var$util.setImmediate = function(callback) {
        setTimeout(callback, 0);
    };
    // upgrade polyfill to use postMessage
    if (typeof window !== "undefined" && typeof window.postMessage === "function") {
        var msg = "forge.setImmediate";
        var callbacks = [];
        $de3bd7b4960dd90f$var$util.setImmediate = function(callback) {
            callbacks.push(callback);
            // only send message when one hasn't been sent in
            // the current turn of the event loop
            if (callbacks.length === 1) window.postMessage(msg, "*");
        };
        function handler(event) {
            if (event.source === window && event.data === msg) {
                event.stopPropagation();
                var copy = callbacks.slice();
                callbacks.length = 0;
                copy.forEach(function(callback) {
                    callback();
                });
            }
        }
        window.addEventListener("message", handler, true);
    }
    // upgrade polyfill to use MutationObserver
    if (typeof MutationObserver !== "undefined") {
        // polyfill with MutationObserver
        var now = Date.now();
        var attr = true;
        var div = document.createElement("div");
        var callbacks = [];
        new MutationObserver(function() {
            var copy = callbacks.slice();
            callbacks.length = 0;
            copy.forEach(function(callback) {
                callback();
            });
        }).observe(div, {
            attributes: true
        });
        var oldSetImmediate = $de3bd7b4960dd90f$var$util.setImmediate;
        $de3bd7b4960dd90f$var$util.setImmediate = function(callback) {
            if (Date.now() - now > 15) {
                now = Date.now();
                oldSetImmediate(callback);
            } else {
                callbacks.push(callback);
                // only trigger observer when it hasn't been triggered in
                // the current turn of the event loop
                if (callbacks.length === 1) div.setAttribute("a", attr = !attr);
            }
        };
    }
    $de3bd7b4960dd90f$var$util.nextTick = $de3bd7b4960dd90f$var$util.setImmediate;
})();
// check if running under Node.js
$de3bd7b4960dd90f$var$util.isNodejs = typeof process !== "undefined" && process.versions && process.versions.node;
// 'self' will also work in Web Workers (instance of WorkerGlobalScope) while
// it will point to `window` in the main thread.
// To remain compatible with older browsers, we fall back to 'window' if 'self'
// is not available.
$de3bd7b4960dd90f$var$util.globalScope = function() {
    if ($de3bd7b4960dd90f$var$util.isNodejs) return $parcel$global;
    return typeof self === "undefined" ? window : self;
}();
// define isArray
$de3bd7b4960dd90f$var$util.isArray = Array.isArray || function(x) {
    return Object.prototype.toString.call(x) === "[object Array]";
};
// define isArrayBuffer
$de3bd7b4960dd90f$var$util.isArrayBuffer = function(x) {
    return typeof ArrayBuffer !== "undefined" && x instanceof ArrayBuffer;
};
// define isArrayBufferView
$de3bd7b4960dd90f$var$util.isArrayBufferView = function(x) {
    return x && $de3bd7b4960dd90f$var$util.isArrayBuffer(x.buffer) && x.byteLength !== undefined;
};
/**
 * Ensure a bits param is 8, 16, 24, or 32. Used to validate input for
 * algorithms where bit manipulation, JavaScript limitations, and/or algorithm
 * design only allow for byte operations of a limited size.
 *
 * @param n number of bits.
 *
 * Throw Error if n invalid.
 */ function $de3bd7b4960dd90f$var$_checkBitsParam(n) {
    if (!(n === 8 || n === 16 || n === 24 || n === 32)) throw new Error("Only 8, 16, 24, or 32 bits supported: " + n);
}
// TODO: set ByteBuffer to best available backing
$de3bd7b4960dd90f$var$util.ByteBuffer = $de3bd7b4960dd90f$var$ByteStringBuffer;
/** Buffer w/BinaryString backing */ /**
 * Constructor for a binary string backed byte buffer.
 *
 * @param [b] the bytes to wrap (either encoded as string, one byte per
 *          character, or as an ArrayBuffer or Typed Array).
 */ function $de3bd7b4960dd90f$var$ByteStringBuffer(b) {
    // TODO: update to match DataBuffer API
    // the data in this buffer
    this.data = "";
    // the pointer for reading from this buffer
    this.read = 0;
    if (typeof b === "string") this.data = b;
    else if ($de3bd7b4960dd90f$var$util.isArrayBuffer(b) || $de3bd7b4960dd90f$var$util.isArrayBufferView(b)) {
        if (typeof Buffer !== "undefined" && b instanceof Buffer) this.data = b.toString("binary");
        else {
            // convert native buffer to forge buffer
            // FIXME: support native buffers internally instead
            var arr = new Uint8Array(b);
            try {
                this.data = String.fromCharCode.apply(null, arr);
            } catch (e) {
                for(var i = 0; i < arr.length; ++i)this.putByte(arr[i]);
            }
        }
    } else if (b instanceof $de3bd7b4960dd90f$var$ByteStringBuffer || typeof b === "object" && typeof b.data === "string" && typeof b.read === "number") {
        // copy existing buffer
        this.data = b.data;
        this.read = b.read;
    }
    // used for v8 optimization
    this._constructedStringLength = 0;
}
$de3bd7b4960dd90f$var$util.ByteStringBuffer = $de3bd7b4960dd90f$var$ByteStringBuffer;
/* Note: This is an optimization for V8-based browsers. When V8 concatenates
  a string, the strings are only joined logically using a "cons string" or
  "constructed/concatenated string". These containers keep references to one
  another and can result in very large memory usage. For example, if a 2MB
  string is constructed by concatenating 4 bytes together at a time, the
  memory usage will be ~44MB; so ~22x increase. The strings are only joined
  together when an operation requiring their joining takes place, such as
  substr(). This function is called when adding data to this buffer to ensure
  these types of strings are periodically joined to reduce the memory
  footprint. */ var $de3bd7b4960dd90f$var$_MAX_CONSTRUCTED_STRING_LENGTH = 4096;
$de3bd7b4960dd90f$var$util.ByteStringBuffer.prototype._optimizeConstructedString = function(x) {
    this._constructedStringLength += x;
    if (this._constructedStringLength > $de3bd7b4960dd90f$var$_MAX_CONSTRUCTED_STRING_LENGTH) {
        // this substr() should cause the constructed string to join
        this.data.substr(0, 1);
        this._constructedStringLength = 0;
    }
};
/**
 * Gets the number of bytes in this buffer.
 *
 * @return the number of bytes in this buffer.
 */ $de3bd7b4960dd90f$var$util.ByteStringBuffer.prototype.length = function() {
    return this.data.length - this.read;
};
/**
 * Gets whether or not this buffer is empty.
 *
 * @return true if this buffer is empty, false if not.
 */ $de3bd7b4960dd90f$var$util.ByteStringBuffer.prototype.isEmpty = function() {
    return this.length() <= 0;
};
/**
 * Puts a byte in this buffer.
 *
 * @param b the byte to put.
 *
 * @return this buffer.
 */ $de3bd7b4960dd90f$var$util.ByteStringBuffer.prototype.putByte = function(b) {
    return this.putBytes(String.fromCharCode(b));
};
/**
 * Puts a byte in this buffer N times.
 *
 * @param b the byte to put.
 * @param n the number of bytes of value b to put.
 *
 * @return this buffer.
 */ $de3bd7b4960dd90f$var$util.ByteStringBuffer.prototype.fillWithByte = function(b, n) {
    b = String.fromCharCode(b);
    var d = this.data;
    while(n > 0){
        if (n & 1) d += b;
        n >>>= 1;
        if (n > 0) b += b;
    }
    this.data = d;
    this._optimizeConstructedString(n);
    return this;
};
/**
 * Puts bytes in this buffer.
 *
 * @param bytes the bytes (as a binary encoded string) to put.
 *
 * @return this buffer.
 */ $de3bd7b4960dd90f$var$util.ByteStringBuffer.prototype.putBytes = function(bytes) {
    this.data += bytes;
    this._optimizeConstructedString(bytes.length);
    return this;
};
/**
 * Puts a UTF-16 encoded string into this buffer.
 *
 * @param str the string to put.
 *
 * @return this buffer.
 */ $de3bd7b4960dd90f$var$util.ByteStringBuffer.prototype.putString = function(str) {
    return this.putBytes($de3bd7b4960dd90f$var$util.encodeUtf8(str));
};
/**
 * Puts a 16-bit integer in this buffer in big-endian order.
 *
 * @param i the 16-bit integer.
 *
 * @return this buffer.
 */ $de3bd7b4960dd90f$var$util.ByteStringBuffer.prototype.putInt16 = function(i) {
    return this.putBytes(String.fromCharCode(i >> 8 & 0xFF) + String.fromCharCode(i & 0xFF));
};
/**
 * Puts a 24-bit integer in this buffer in big-endian order.
 *
 * @param i the 24-bit integer.
 *
 * @return this buffer.
 */ $de3bd7b4960dd90f$var$util.ByteStringBuffer.prototype.putInt24 = function(i) {
    return this.putBytes(String.fromCharCode(i >> 16 & 0xFF) + String.fromCharCode(i >> 8 & 0xFF) + String.fromCharCode(i & 0xFF));
};
/**
 * Puts a 32-bit integer in this buffer in big-endian order.
 *
 * @param i the 32-bit integer.
 *
 * @return this buffer.
 */ $de3bd7b4960dd90f$var$util.ByteStringBuffer.prototype.putInt32 = function(i) {
    return this.putBytes(String.fromCharCode(i >> 24 & 0xFF) + String.fromCharCode(i >> 16 & 0xFF) + String.fromCharCode(i >> 8 & 0xFF) + String.fromCharCode(i & 0xFF));
};
/**
 * Puts a 16-bit integer in this buffer in little-endian order.
 *
 * @param i the 16-bit integer.
 *
 * @return this buffer.
 */ $de3bd7b4960dd90f$var$util.ByteStringBuffer.prototype.putInt16Le = function(i) {
    return this.putBytes(String.fromCharCode(i & 0xFF) + String.fromCharCode(i >> 8 & 0xFF));
};
/**
 * Puts a 24-bit integer in this buffer in little-endian order.
 *
 * @param i the 24-bit integer.
 *
 * @return this buffer.
 */ $de3bd7b4960dd90f$var$util.ByteStringBuffer.prototype.putInt24Le = function(i) {
    return this.putBytes(String.fromCharCode(i & 0xFF) + String.fromCharCode(i >> 8 & 0xFF) + String.fromCharCode(i >> 16 & 0xFF));
};
/**
 * Puts a 32-bit integer in this buffer in little-endian order.
 *
 * @param i the 32-bit integer.
 *
 * @return this buffer.
 */ $de3bd7b4960dd90f$var$util.ByteStringBuffer.prototype.putInt32Le = function(i) {
    return this.putBytes(String.fromCharCode(i & 0xFF) + String.fromCharCode(i >> 8 & 0xFF) + String.fromCharCode(i >> 16 & 0xFF) + String.fromCharCode(i >> 24 & 0xFF));
};
/**
 * Puts an n-bit integer in this buffer in big-endian order.
 *
 * @param i the n-bit integer.
 * @param n the number of bits in the integer (8, 16, 24, or 32).
 *
 * @return this buffer.
 */ $de3bd7b4960dd90f$var$util.ByteStringBuffer.prototype.putInt = function(i, n) {
    $de3bd7b4960dd90f$var$_checkBitsParam(n);
    var bytes = "";
    do {
        n -= 8;
        bytes += String.fromCharCode(i >> n & 0xFF);
    }while (n > 0);
    return this.putBytes(bytes);
};
/**
 * Puts a signed n-bit integer in this buffer in big-endian order. Two's
 * complement representation is used.
 *
 * @param i the n-bit integer.
 * @param n the number of bits in the integer (8, 16, 24, or 32).
 *
 * @return this buffer.
 */ $de3bd7b4960dd90f$var$util.ByteStringBuffer.prototype.putSignedInt = function(i, n) {
    // putInt checks n
    if (i < 0) i += 2 << n - 1;
    return this.putInt(i, n);
};
/**
 * Puts the given buffer into this buffer.
 *
 * @param buffer the buffer to put into this one.
 *
 * @return this buffer.
 */ $de3bd7b4960dd90f$var$util.ByteStringBuffer.prototype.putBuffer = function(buffer) {
    return this.putBytes(buffer.getBytes());
};
/**
 * Gets a byte from this buffer and advances the read pointer by 1.
 *
 * @return the byte.
 */ $de3bd7b4960dd90f$var$util.ByteStringBuffer.prototype.getByte = function() {
    return this.data.charCodeAt(this.read++);
};
/**
 * Gets a uint16 from this buffer in big-endian order and advances the read
 * pointer by 2.
 *
 * @return the uint16.
 */ $de3bd7b4960dd90f$var$util.ByteStringBuffer.prototype.getInt16 = function() {
    var rval = this.data.charCodeAt(this.read) << 8 ^ this.data.charCodeAt(this.read + 1);
    this.read += 2;
    return rval;
};
/**
 * Gets a uint24 from this buffer in big-endian order and advances the read
 * pointer by 3.
 *
 * @return the uint24.
 */ $de3bd7b4960dd90f$var$util.ByteStringBuffer.prototype.getInt24 = function() {
    var rval = this.data.charCodeAt(this.read) << 16 ^ this.data.charCodeAt(this.read + 1) << 8 ^ this.data.charCodeAt(this.read + 2);
    this.read += 3;
    return rval;
};
/**
 * Gets a uint32 from this buffer in big-endian order and advances the read
 * pointer by 4.
 *
 * @return the word.
 */ $de3bd7b4960dd90f$var$util.ByteStringBuffer.prototype.getInt32 = function() {
    var rval = this.data.charCodeAt(this.read) << 24 ^ this.data.charCodeAt(this.read + 1) << 16 ^ this.data.charCodeAt(this.read + 2) << 8 ^ this.data.charCodeAt(this.read + 3);
    this.read += 4;
    return rval;
};
/**
 * Gets a uint16 from this buffer in little-endian order and advances the read
 * pointer by 2.
 *
 * @return the uint16.
 */ $de3bd7b4960dd90f$var$util.ByteStringBuffer.prototype.getInt16Le = function() {
    var rval = this.data.charCodeAt(this.read) ^ this.data.charCodeAt(this.read + 1) << 8;
    this.read += 2;
    return rval;
};
/**
 * Gets a uint24 from this buffer in little-endian order and advances the read
 * pointer by 3.
 *
 * @return the uint24.
 */ $de3bd7b4960dd90f$var$util.ByteStringBuffer.prototype.getInt24Le = function() {
    var rval = this.data.charCodeAt(this.read) ^ this.data.charCodeAt(this.read + 1) << 8 ^ this.data.charCodeAt(this.read + 2) << 16;
    this.read += 3;
    return rval;
};
/**
 * Gets a uint32 from this buffer in little-endian order and advances the read
 * pointer by 4.
 *
 * @return the word.
 */ $de3bd7b4960dd90f$var$util.ByteStringBuffer.prototype.getInt32Le = function() {
    var rval = this.data.charCodeAt(this.read) ^ this.data.charCodeAt(this.read + 1) << 8 ^ this.data.charCodeAt(this.read + 2) << 16 ^ this.data.charCodeAt(this.read + 3) << 24;
    this.read += 4;
    return rval;
};
/**
 * Gets an n-bit integer from this buffer in big-endian order and advances the
 * read pointer by ceil(n/8).
 *
 * @param n the number of bits in the integer (8, 16, 24, or 32).
 *
 * @return the integer.
 */ $de3bd7b4960dd90f$var$util.ByteStringBuffer.prototype.getInt = function(n) {
    $de3bd7b4960dd90f$var$_checkBitsParam(n);
    var rval = 0;
    do {
        // TODO: Use (rval * 0x100) if adding support for 33 to 53 bits.
        rval = (rval << 8) + this.data.charCodeAt(this.read++);
        n -= 8;
    }while (n > 0);
    return rval;
};
/**
 * Gets a signed n-bit integer from this buffer in big-endian order, using
 * two's complement, and advances the read pointer by n/8.
 *
 * @param n the number of bits in the integer (8, 16, 24, or 32).
 *
 * @return the integer.
 */ $de3bd7b4960dd90f$var$util.ByteStringBuffer.prototype.getSignedInt = function(n) {
    // getInt checks n
    var x = this.getInt(n);
    var max = 2 << n - 2;
    if (x >= max) x -= max << 1;
    return x;
};
/**
 * Reads bytes out as a binary encoded string and clears them from the
 * buffer. Note that the resulting string is binary encoded (in node.js this
 * encoding is referred to as `binary`, it is *not* `utf8`).
 *
 * @param count the number of bytes to read, undefined or null for all.
 *
 * @return a binary encoded string of bytes.
 */ $de3bd7b4960dd90f$var$util.ByteStringBuffer.prototype.getBytes = function(count) {
    var rval;
    if (count) {
        // read count bytes
        count = Math.min(this.length(), count);
        rval = this.data.slice(this.read, this.read + count);
        this.read += count;
    } else if (count === 0) rval = "";
    else {
        // read all bytes, optimize to only copy when needed
        rval = this.read === 0 ? this.data : this.data.slice(this.read);
        this.clear();
    }
    return rval;
};
/**
 * Gets a binary encoded string of the bytes from this buffer without
 * modifying the read pointer.
 *
 * @param count the number of bytes to get, omit to get all.
 *
 * @return a string full of binary encoded characters.
 */ $de3bd7b4960dd90f$var$util.ByteStringBuffer.prototype.bytes = function(count) {
    return typeof count === "undefined" ? this.data.slice(this.read) : this.data.slice(this.read, this.read + count);
};
/**
 * Gets a byte at the given index without modifying the read pointer.
 *
 * @param i the byte index.
 *
 * @return the byte.
 */ $de3bd7b4960dd90f$var$util.ByteStringBuffer.prototype.at = function(i) {
    return this.data.charCodeAt(this.read + i);
};
/**
 * Puts a byte at the given index without modifying the read pointer.
 *
 * @param i the byte index.
 * @param b the byte to put.
 *
 * @return this buffer.
 */ $de3bd7b4960dd90f$var$util.ByteStringBuffer.prototype.setAt = function(i, b) {
    this.data = this.data.substr(0, this.read + i) + String.fromCharCode(b) + this.data.substr(this.read + i + 1);
    return this;
};
/**
 * Gets the last byte without modifying the read pointer.
 *
 * @return the last byte.
 */ $de3bd7b4960dd90f$var$util.ByteStringBuffer.prototype.last = function() {
    return this.data.charCodeAt(this.data.length - 1);
};
/**
 * Creates a copy of this buffer.
 *
 * @return the copy.
 */ $de3bd7b4960dd90f$var$util.ByteStringBuffer.prototype.copy = function() {
    var c = $de3bd7b4960dd90f$var$util.createBuffer(this.data);
    c.read = this.read;
    return c;
};
/**
 * Compacts this buffer.
 *
 * @return this buffer.
 */ $de3bd7b4960dd90f$var$util.ByteStringBuffer.prototype.compact = function() {
    if (this.read > 0) {
        this.data = this.data.slice(this.read);
        this.read = 0;
    }
    return this;
};
/**
 * Clears this buffer.
 *
 * @return this buffer.
 */ $de3bd7b4960dd90f$var$util.ByteStringBuffer.prototype.clear = function() {
    this.data = "";
    this.read = 0;
    return this;
};
/**
 * Shortens this buffer by triming bytes off of the end of this buffer.
 *
 * @param count the number of bytes to trim off.
 *
 * @return this buffer.
 */ $de3bd7b4960dd90f$var$util.ByteStringBuffer.prototype.truncate = function(count) {
    var len = Math.max(0, this.length() - count);
    this.data = this.data.substr(this.read, len);
    this.read = 0;
    return this;
};
/**
 * Converts this buffer to a hexadecimal string.
 *
 * @return a hexadecimal string.
 */ $de3bd7b4960dd90f$var$util.ByteStringBuffer.prototype.toHex = function() {
    var rval = "";
    for(var i = this.read; i < this.data.length; ++i){
        var b = this.data.charCodeAt(i);
        if (b < 16) rval += "0";
        rval += b.toString(16);
    }
    return rval;
};
/**
 * Converts this buffer to a UTF-16 string (standard JavaScript string).
 *
 * @return a UTF-16 string.
 */ $de3bd7b4960dd90f$var$util.ByteStringBuffer.prototype.toString = function() {
    return $de3bd7b4960dd90f$var$util.decodeUtf8(this.bytes());
};
/** End Buffer w/BinaryString backing */ /** Buffer w/UInt8Array backing */ /**
 * FIXME: Experimental. Do not use yet.
 *
 * Constructor for an ArrayBuffer-backed byte buffer.
 *
 * The buffer may be constructed from a string, an ArrayBuffer, DataView, or a
 * TypedArray.
 *
 * If a string is given, its encoding should be provided as an option,
 * otherwise it will default to 'binary'. A 'binary' string is encoded such
 * that each character is one byte in length and size.
 *
 * If an ArrayBuffer, DataView, or TypedArray is given, it will be used
 * *directly* without any copying. Note that, if a write to the buffer requires
 * more space, the buffer will allocate a new backing ArrayBuffer to
 * accommodate. The starting read and write offsets for the buffer may be
 * given as options.
 *
 * @param [b] the initial bytes for this buffer.
 * @param options the options to use:
 *          [readOffset] the starting read offset to use (default: 0).
 *          [writeOffset] the starting write offset to use (default: the
 *            length of the first parameter).
 *          [growSize] the minimum amount, in bytes, to grow the buffer by to
 *            accommodate writes (default: 1024).
 *          [encoding] the encoding ('binary', 'utf8', 'utf16', 'hex') for the
 *            first parameter, if it is a string (default: 'binary').
 */ function $de3bd7b4960dd90f$var$DataBuffer(b, options) {
    // default options
    options = options || {};
    // pointers for read from/write to buffer
    this.read = options.readOffset || 0;
    this.growSize = options.growSize || 1024;
    var isArrayBuffer = $de3bd7b4960dd90f$var$util.isArrayBuffer(b);
    var isArrayBufferView = $de3bd7b4960dd90f$var$util.isArrayBufferView(b);
    if (isArrayBuffer || isArrayBufferView) {
        // use ArrayBuffer directly
        if (isArrayBuffer) this.data = new DataView(b);
        else // TODO: adjust read/write offset based on the type of view
        // or specify that this must be done in the options ... that the
        // offsets are byte-based
        this.data = new DataView(b.buffer, b.byteOffset, b.byteLength);
        this.write = "writeOffset" in options ? options.writeOffset : this.data.byteLength;
        return;
    }
    // initialize to empty array buffer and add any given bytes using putBytes
    this.data = new DataView(new ArrayBuffer(0));
    this.write = 0;
    if (b !== null && b !== undefined) this.putBytes(b);
    if ("writeOffset" in options) this.write = options.writeOffset;
}
$de3bd7b4960dd90f$var$util.DataBuffer = $de3bd7b4960dd90f$var$DataBuffer;
/**
 * Gets the number of bytes in this buffer.
 *
 * @return the number of bytes in this buffer.
 */ $de3bd7b4960dd90f$var$util.DataBuffer.prototype.length = function() {
    return this.write - this.read;
};
/**
 * Gets whether or not this buffer is empty.
 *
 * @return true if this buffer is empty, false if not.
 */ $de3bd7b4960dd90f$var$util.DataBuffer.prototype.isEmpty = function() {
    return this.length() <= 0;
};
/**
 * Ensures this buffer has enough empty space to accommodate the given number
 * of bytes. An optional parameter may be given that indicates a minimum
 * amount to grow the buffer if necessary. If the parameter is not given,
 * the buffer will be grown by some previously-specified default amount
 * or heuristic.
 *
 * @param amount the number of bytes to accommodate.
 * @param [growSize] the minimum amount, in bytes, to grow the buffer by if
 *          necessary.
 */ $de3bd7b4960dd90f$var$util.DataBuffer.prototype.accommodate = function(amount, growSize) {
    if (this.length() >= amount) return this;
    growSize = Math.max(growSize || this.growSize, amount);
    // grow buffer
    var src = new Uint8Array(this.data.buffer, this.data.byteOffset, this.data.byteLength);
    var dst = new Uint8Array(this.length() + growSize);
    dst.set(src);
    this.data = new DataView(dst.buffer);
    return this;
};
/**
 * Puts a byte in this buffer.
 *
 * @param b the byte to put.
 *
 * @return this buffer.
 */ $de3bd7b4960dd90f$var$util.DataBuffer.prototype.putByte = function(b) {
    this.accommodate(1);
    this.data.setUint8(this.write++, b);
    return this;
};
/**
 * Puts a byte in this buffer N times.
 *
 * @param b the byte to put.
 * @param n the number of bytes of value b to put.
 *
 * @return this buffer.
 */ $de3bd7b4960dd90f$var$util.DataBuffer.prototype.fillWithByte = function(b, n) {
    this.accommodate(n);
    for(var i = 0; i < n; ++i)this.data.setUint8(b);
    return this;
};
/**
 * Puts bytes in this buffer. The bytes may be given as a string, an
 * ArrayBuffer, a DataView, or a TypedArray.
 *
 * @param bytes the bytes to put.
 * @param [encoding] the encoding for the first parameter ('binary', 'utf8',
 *          'utf16', 'hex'), if it is a string (default: 'binary').
 *
 * @return this buffer.
 */ $de3bd7b4960dd90f$var$util.DataBuffer.prototype.putBytes = function(bytes, encoding) {
    if ($de3bd7b4960dd90f$var$util.isArrayBufferView(bytes)) {
        var src = new Uint8Array(bytes.buffer, bytes.byteOffset, bytes.byteLength);
        var len = src.byteLength - src.byteOffset;
        this.accommodate(len);
        var dst = new Uint8Array(this.data.buffer, this.write);
        dst.set(src);
        this.write += len;
        return this;
    }
    if ($de3bd7b4960dd90f$var$util.isArrayBuffer(bytes)) {
        var src = new Uint8Array(bytes);
        this.accommodate(src.byteLength);
        var dst = new Uint8Array(this.data.buffer);
        dst.set(src, this.write);
        this.write += src.byteLength;
        return this;
    }
    // bytes is a util.DataBuffer or equivalent
    if (bytes instanceof $de3bd7b4960dd90f$var$util.DataBuffer || typeof bytes === "object" && typeof bytes.read === "number" && typeof bytes.write === "number" && $de3bd7b4960dd90f$var$util.isArrayBufferView(bytes.data)) {
        var src = new Uint8Array(bytes.data.byteLength, bytes.read, bytes.length());
        this.accommodate(src.byteLength);
        var dst = new Uint8Array(bytes.data.byteLength, this.write);
        dst.set(src);
        this.write += src.byteLength;
        return this;
    }
    if (bytes instanceof $de3bd7b4960dd90f$var$util.ByteStringBuffer) {
        // copy binary string and process as the same as a string parameter below
        bytes = bytes.data;
        encoding = "binary";
    }
    // string conversion
    encoding = encoding || "binary";
    if (typeof bytes === "string") {
        var view;
        // decode from string
        if (encoding === "hex") {
            this.accommodate(Math.ceil(bytes.length / 2));
            view = new Uint8Array(this.data.buffer, this.write);
            this.write += $de3bd7b4960dd90f$var$util.binary.hex.decode(bytes, view, this.write);
            return this;
        }
        if (encoding === "base64") {
            this.accommodate(Math.ceil(bytes.length / 4) * 3);
            view = new Uint8Array(this.data.buffer, this.write);
            this.write += $de3bd7b4960dd90f$var$util.binary.base64.decode(bytes, view, this.write);
            return this;
        }
        // encode text as UTF-8 bytes
        if (encoding === "utf8") {
            // encode as UTF-8 then decode string as raw binary
            bytes = $de3bd7b4960dd90f$var$util.encodeUtf8(bytes);
            encoding = "binary";
        }
        // decode string as raw binary
        if (encoding === "binary" || encoding === "raw") {
            // one byte per character
            this.accommodate(bytes.length);
            view = new Uint8Array(this.data.buffer, this.write);
            this.write += $de3bd7b4960dd90f$var$util.binary.raw.decode(view);
            return this;
        }
        // encode text as UTF-16 bytes
        if (encoding === "utf16") {
            // two bytes per character
            this.accommodate(bytes.length * 2);
            view = new Uint16Array(this.data.buffer, this.write);
            this.write += $de3bd7b4960dd90f$var$util.text.utf16.encode(view);
            return this;
        }
        throw new Error("Invalid encoding: " + encoding);
    }
    throw Error("Invalid parameter: " + bytes);
};
/**
 * Puts the given buffer into this buffer.
 *
 * @param buffer the buffer to put into this one.
 *
 * @return this buffer.
 */ $de3bd7b4960dd90f$var$util.DataBuffer.prototype.putBuffer = function(buffer) {
    this.putBytes(buffer);
    buffer.clear();
    return this;
};
/**
 * Puts a string into this buffer.
 *
 * @param str the string to put.
 * @param [encoding] the encoding for the string (default: 'utf16').
 *
 * @return this buffer.
 */ $de3bd7b4960dd90f$var$util.DataBuffer.prototype.putString = function(str) {
    return this.putBytes(str, "utf16");
};
/**
 * Puts a 16-bit integer in this buffer in big-endian order.
 *
 * @param i the 16-bit integer.
 *
 * @return this buffer.
 */ $de3bd7b4960dd90f$var$util.DataBuffer.prototype.putInt16 = function(i) {
    this.accommodate(2);
    this.data.setInt16(this.write, i);
    this.write += 2;
    return this;
};
/**
 * Puts a 24-bit integer in this buffer in big-endian order.
 *
 * @param i the 24-bit integer.
 *
 * @return this buffer.
 */ $de3bd7b4960dd90f$var$util.DataBuffer.prototype.putInt24 = function(i) {
    this.accommodate(3);
    this.data.setInt16(this.write, i >> 8 & 0xFFFF);
    this.data.setInt8(this.write, i >> 16 & 0xFF);
    this.write += 3;
    return this;
};
/**
 * Puts a 32-bit integer in this buffer in big-endian order.
 *
 * @param i the 32-bit integer.
 *
 * @return this buffer.
 */ $de3bd7b4960dd90f$var$util.DataBuffer.prototype.putInt32 = function(i) {
    this.accommodate(4);
    this.data.setInt32(this.write, i);
    this.write += 4;
    return this;
};
/**
 * Puts a 16-bit integer in this buffer in little-endian order.
 *
 * @param i the 16-bit integer.
 *
 * @return this buffer.
 */ $de3bd7b4960dd90f$var$util.DataBuffer.prototype.putInt16Le = function(i) {
    this.accommodate(2);
    this.data.setInt16(this.write, i, true);
    this.write += 2;
    return this;
};
/**
 * Puts a 24-bit integer in this buffer in little-endian order.
 *
 * @param i the 24-bit integer.
 *
 * @return this buffer.
 */ $de3bd7b4960dd90f$var$util.DataBuffer.prototype.putInt24Le = function(i) {
    this.accommodate(3);
    this.data.setInt8(this.write, i >> 16 & 0xFF);
    this.data.setInt16(this.write, i >> 8 & 0xFFFF, true);
    this.write += 3;
    return this;
};
/**
 * Puts a 32-bit integer in this buffer in little-endian order.
 *
 * @param i the 32-bit integer.
 *
 * @return this buffer.
 */ $de3bd7b4960dd90f$var$util.DataBuffer.prototype.putInt32Le = function(i) {
    this.accommodate(4);
    this.data.setInt32(this.write, i, true);
    this.write += 4;
    return this;
};
/**
 * Puts an n-bit integer in this buffer in big-endian order.
 *
 * @param i the n-bit integer.
 * @param n the number of bits in the integer (8, 16, 24, or 32).
 *
 * @return this buffer.
 */ $de3bd7b4960dd90f$var$util.DataBuffer.prototype.putInt = function(i, n) {
    $de3bd7b4960dd90f$var$_checkBitsParam(n);
    this.accommodate(n / 8);
    do {
        n -= 8;
        this.data.setInt8(this.write++, i >> n & 0xFF);
    }while (n > 0);
    return this;
};
/**
 * Puts a signed n-bit integer in this buffer in big-endian order. Two's
 * complement representation is used.
 *
 * @param i the n-bit integer.
 * @param n the number of bits in the integer.
 *
 * @return this buffer.
 */ $de3bd7b4960dd90f$var$util.DataBuffer.prototype.putSignedInt = function(i, n) {
    $de3bd7b4960dd90f$var$_checkBitsParam(n);
    this.accommodate(n / 8);
    if (i < 0) i += 2 << n - 1;
    return this.putInt(i, n);
};
/**
 * Gets a byte from this buffer and advances the read pointer by 1.
 *
 * @return the byte.
 */ $de3bd7b4960dd90f$var$util.DataBuffer.prototype.getByte = function() {
    return this.data.getInt8(this.read++);
};
/**
 * Gets a uint16 from this buffer in big-endian order and advances the read
 * pointer by 2.
 *
 * @return the uint16.
 */ $de3bd7b4960dd90f$var$util.DataBuffer.prototype.getInt16 = function() {
    var rval = this.data.getInt16(this.read);
    this.read += 2;
    return rval;
};
/**
 * Gets a uint24 from this buffer in big-endian order and advances the read
 * pointer by 3.
 *
 * @return the uint24.
 */ $de3bd7b4960dd90f$var$util.DataBuffer.prototype.getInt24 = function() {
    var rval = this.data.getInt16(this.read) << 8 ^ this.data.getInt8(this.read + 2);
    this.read += 3;
    return rval;
};
/**
 * Gets a uint32 from this buffer in big-endian order and advances the read
 * pointer by 4.
 *
 * @return the word.
 */ $de3bd7b4960dd90f$var$util.DataBuffer.prototype.getInt32 = function() {
    var rval = this.data.getInt32(this.read);
    this.read += 4;
    return rval;
};
/**
 * Gets a uint16 from this buffer in little-endian order and advances the read
 * pointer by 2.
 *
 * @return the uint16.
 */ $de3bd7b4960dd90f$var$util.DataBuffer.prototype.getInt16Le = function() {
    var rval = this.data.getInt16(this.read, true);
    this.read += 2;
    return rval;
};
/**
 * Gets a uint24 from this buffer in little-endian order and advances the read
 * pointer by 3.
 *
 * @return the uint24.
 */ $de3bd7b4960dd90f$var$util.DataBuffer.prototype.getInt24Le = function() {
    var rval = this.data.getInt8(this.read) ^ this.data.getInt16(this.read + 1, true) << 8;
    this.read += 3;
    return rval;
};
/**
 * Gets a uint32 from this buffer in little-endian order and advances the read
 * pointer by 4.
 *
 * @return the word.
 */ $de3bd7b4960dd90f$var$util.DataBuffer.prototype.getInt32Le = function() {
    var rval = this.data.getInt32(this.read, true);
    this.read += 4;
    return rval;
};
/**
 * Gets an n-bit integer from this buffer in big-endian order and advances the
 * read pointer by n/8.
 *
 * @param n the number of bits in the integer (8, 16, 24, or 32).
 *
 * @return the integer.
 */ $de3bd7b4960dd90f$var$util.DataBuffer.prototype.getInt = function(n) {
    $de3bd7b4960dd90f$var$_checkBitsParam(n);
    var rval = 0;
    do {
        // TODO: Use (rval * 0x100) if adding support for 33 to 53 bits.
        rval = (rval << 8) + this.data.getInt8(this.read++);
        n -= 8;
    }while (n > 0);
    return rval;
};
/**
 * Gets a signed n-bit integer from this buffer in big-endian order, using
 * two's complement, and advances the read pointer by n/8.
 *
 * @param n the number of bits in the integer (8, 16, 24, or 32).
 *
 * @return the integer.
 */ $de3bd7b4960dd90f$var$util.DataBuffer.prototype.getSignedInt = function(n) {
    // getInt checks n
    var x = this.getInt(n);
    var max = 2 << n - 2;
    if (x >= max) x -= max << 1;
    return x;
};
/**
 * Reads bytes out as a binary encoded string and clears them from the
 * buffer.
 *
 * @param count the number of bytes to read, undefined or null for all.
 *
 * @return a binary encoded string of bytes.
 */ $de3bd7b4960dd90f$var$util.DataBuffer.prototype.getBytes = function(count) {
    // TODO: deprecate this method, it is poorly named and
    // this.toString('binary') replaces it
    // add a toTypedArray()/toArrayBuffer() function
    var rval;
    if (count) {
        // read count bytes
        count = Math.min(this.length(), count);
        rval = this.data.slice(this.read, this.read + count);
        this.read += count;
    } else if (count === 0) rval = "";
    else {
        // read all bytes, optimize to only copy when needed
        rval = this.read === 0 ? this.data : this.data.slice(this.read);
        this.clear();
    }
    return rval;
};
/**
 * Gets a binary encoded string of the bytes from this buffer without
 * modifying the read pointer.
 *
 * @param count the number of bytes to get, omit to get all.
 *
 * @return a string full of binary encoded characters.
 */ $de3bd7b4960dd90f$var$util.DataBuffer.prototype.bytes = function(count) {
    // TODO: deprecate this method, it is poorly named, add "getString()"
    return typeof count === "undefined" ? this.data.slice(this.read) : this.data.slice(this.read, this.read + count);
};
/**
 * Gets a byte at the given index without modifying the read pointer.
 *
 * @param i the byte index.
 *
 * @return the byte.
 */ $de3bd7b4960dd90f$var$util.DataBuffer.prototype.at = function(i) {
    return this.data.getUint8(this.read + i);
};
/**
 * Puts a byte at the given index without modifying the read pointer.
 *
 * @param i the byte index.
 * @param b the byte to put.
 *
 * @return this buffer.
 */ $de3bd7b4960dd90f$var$util.DataBuffer.prototype.setAt = function(i, b) {
    this.data.setUint8(i, b);
    return this;
};
/**
 * Gets the last byte without modifying the read pointer.
 *
 * @return the last byte.
 */ $de3bd7b4960dd90f$var$util.DataBuffer.prototype.last = function() {
    return this.data.getUint8(this.write - 1);
};
/**
 * Creates a copy of this buffer.
 *
 * @return the copy.
 */ $de3bd7b4960dd90f$var$util.DataBuffer.prototype.copy = function() {
    return new $de3bd7b4960dd90f$var$util.DataBuffer(this);
};
/**
 * Compacts this buffer.
 *
 * @return this buffer.
 */ $de3bd7b4960dd90f$var$util.DataBuffer.prototype.compact = function() {
    if (this.read > 0) {
        var src = new Uint8Array(this.data.buffer, this.read);
        var dst = new Uint8Array(src.byteLength);
        dst.set(src);
        this.data = new DataView(dst);
        this.write -= this.read;
        this.read = 0;
    }
    return this;
};
/**
 * Clears this buffer.
 *
 * @return this buffer.
 */ $de3bd7b4960dd90f$var$util.DataBuffer.prototype.clear = function() {
    this.data = new DataView(new ArrayBuffer(0));
    this.read = this.write = 0;
    return this;
};
/**
 * Shortens this buffer by triming bytes off of the end of this buffer.
 *
 * @param count the number of bytes to trim off.
 *
 * @return this buffer.
 */ $de3bd7b4960dd90f$var$util.DataBuffer.prototype.truncate = function(count) {
    this.write = Math.max(0, this.length() - count);
    this.read = Math.min(this.read, this.write);
    return this;
};
/**
 * Converts this buffer to a hexadecimal string.
 *
 * @return a hexadecimal string.
 */ $de3bd7b4960dd90f$var$util.DataBuffer.prototype.toHex = function() {
    var rval = "";
    for(var i = this.read; i < this.data.byteLength; ++i){
        var b = this.data.getUint8(i);
        if (b < 16) rval += "0";
        rval += b.toString(16);
    }
    return rval;
};
/**
 * Converts this buffer to a string, using the given encoding. If no
 * encoding is given, 'utf8' (UTF-8) is used.
 *
 * @param [encoding] the encoding to use: 'binary', 'utf8', 'utf16', 'hex',
 *          'base64' (default: 'utf8').
 *
 * @return a string representation of the bytes in this buffer.
 */ $de3bd7b4960dd90f$var$util.DataBuffer.prototype.toString = function(encoding) {
    var view = new Uint8Array(this.data, this.read, this.length());
    encoding = encoding || "utf8";
    // encode to string
    if (encoding === "binary" || encoding === "raw") return $de3bd7b4960dd90f$var$util.binary.raw.encode(view);
    if (encoding === "hex") return $de3bd7b4960dd90f$var$util.binary.hex.encode(view);
    if (encoding === "base64") return $de3bd7b4960dd90f$var$util.binary.base64.encode(view);
    // decode to text
    if (encoding === "utf8") return $de3bd7b4960dd90f$var$util.text.utf8.decode(view);
    if (encoding === "utf16") return $de3bd7b4960dd90f$var$util.text.utf16.decode(view);
    throw new Error("Invalid encoding: " + encoding);
};
/** End Buffer w/UInt8Array backing */ /**
 * Creates a buffer that stores bytes. A value may be given to populate the
 * buffer with data. This value can either be string of encoded bytes or a
 * regular string of characters. When passing a string of binary encoded
 * bytes, the encoding `raw` should be given. This is also the default. When
 * passing a string of characters, the encoding `utf8` should be given.
 *
 * @param [input] a string with encoded bytes to store in the buffer.
 * @param [encoding] (default: 'raw', other: 'utf8').
 */ $de3bd7b4960dd90f$var$util.createBuffer = function(input, encoding) {
    // TODO: deprecate, use new ByteBuffer() instead
    encoding = encoding || "raw";
    if (input !== undefined && encoding === "utf8") input = $de3bd7b4960dd90f$var$util.encodeUtf8(input);
    return new $de3bd7b4960dd90f$var$util.ByteBuffer(input);
};
/**
 * Fills a string with a particular value. If you want the string to be a byte
 * string, pass in String.fromCharCode(theByte).
 *
 * @param c the character to fill the string with, use String.fromCharCode
 *          to fill the string with a byte value.
 * @param n the number of characters of value c to fill with.
 *
 * @return the filled string.
 */ $de3bd7b4960dd90f$var$util.fillString = function(c, n) {
    var s = "";
    while(n > 0){
        if (n & 1) s += c;
        n >>>= 1;
        if (n > 0) c += c;
    }
    return s;
};
/**
 * Performs a per byte XOR between two byte strings and returns the result as a
 * string of bytes.
 *
 * @param s1 first string of bytes.
 * @param s2 second string of bytes.
 * @param n the number of bytes to XOR.
 *
 * @return the XOR'd result.
 */ $de3bd7b4960dd90f$var$util.xorBytes = function(s1, s2, n) {
    var s3 = "";
    var b = "";
    var t = "";
    var i = 0;
    var c = 0;
    for(; n > 0; --n, ++i){
        b = s1.charCodeAt(i) ^ s2.charCodeAt(i);
        if (c >= 10) {
            s3 += t;
            t = "";
            c = 0;
        }
        t += String.fromCharCode(b);
        ++c;
    }
    s3 += t;
    return s3;
};
/**
 * Converts a hex string into a 'binary' encoded string of bytes.
 *
 * @param hex the hexadecimal string to convert.
 *
 * @return the binary-encoded string of bytes.
 */ $de3bd7b4960dd90f$var$util.hexToBytes = function(hex) {
    // TODO: deprecate: "Deprecated. Use util.binary.hex.decode instead."
    var rval = "";
    var i = 0;
    if (hex.length & true) {
        // odd number of characters, convert first character alone
        i = 1;
        rval += String.fromCharCode(parseInt(hex[0], 16));
    }
    // convert 2 characters (1 byte) at a time
    for(; i < hex.length; i += 2)rval += String.fromCharCode(parseInt(hex.substr(i, 2), 16));
    return rval;
};
/**
 * Converts a 'binary' encoded string of bytes to hex.
 *
 * @param bytes the byte string to convert.
 *
 * @return the string of hexadecimal characters.
 */ $de3bd7b4960dd90f$var$util.bytesToHex = function(bytes) {
    // TODO: deprecate: "Deprecated. Use util.binary.hex.encode instead."
    return $de3bd7b4960dd90f$var$util.createBuffer(bytes).toHex();
};
/**
 * Converts an 32-bit integer to 4-big-endian byte string.
 *
 * @param i the integer.
 *
 * @return the byte string.
 */ $de3bd7b4960dd90f$var$util.int32ToBytes = function(i) {
    return String.fromCharCode(i >> 24 & 0xFF) + String.fromCharCode(i >> 16 & 0xFF) + String.fromCharCode(i >> 8 & 0xFF) + String.fromCharCode(i & 0xFF);
};
// base64 characters, reverse mapping
var $de3bd7b4960dd90f$var$_base64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
var $de3bd7b4960dd90f$var$_base64Idx = [
    /*43 -43 = 0*/ /*'+',  1,  2,  3,'/' */ 62,
    -1,
    -1,
    -1,
    63,
    /*'0','1','2','3','4','5','6','7','8','9' */ 52,
    53,
    54,
    55,
    56,
    57,
    58,
    59,
    60,
    61,
    /*15, 16, 17,'=', 19, 20, 21 */ -1,
    -1,
    -1,
    64,
    -1,
    -1,
    -1,
    /*65 - 43 = 22*/ /*'A','B','C','D','E','F','G','H','I','J','K','L','M', */ 0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    /*'N','O','P','Q','R','S','T','U','V','W','X','Y','Z' */ 13,
    14,
    15,
    16,
    17,
    18,
    19,
    20,
    21,
    22,
    23,
    24,
    25,
    /*91 - 43 = 48 */ /*48, 49, 50, 51, 52, 53 */ -1,
    -1,
    -1,
    -1,
    -1,
    -1,
    /*97 - 43 = 54*/ /*'a','b','c','d','e','f','g','h','i','j','k','l','m' */ 26,
    27,
    28,
    29,
    30,
    31,
    32,
    33,
    34,
    35,
    36,
    37,
    38,
    /*'n','o','p','q','r','s','t','u','v','w','x','y','z' */ 39,
    40,
    41,
    42,
    43,
    44,
    45,
    46,
    47,
    48,
    49,
    50,
    51
];
// base58 characters (Bitcoin alphabet)
var $de3bd7b4960dd90f$var$_base58 = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";
/**
 * Base64 encodes a 'binary' encoded string of bytes.
 *
 * @param input the binary encoded string of bytes to base64-encode.
 * @param maxline the maximum number of encoded characters per line to use,
 *          defaults to none.
 *
 * @return the base64-encoded output.
 */ $de3bd7b4960dd90f$var$util.encode64 = function(input, maxline) {
    // TODO: deprecate: "Deprecated. Use util.binary.base64.encode instead."
    var line = "";
    var output = "";
    var chr1, chr2, chr3;
    var i = 0;
    while(i < input.length){
        chr1 = input.charCodeAt(i++);
        chr2 = input.charCodeAt(i++);
        chr3 = input.charCodeAt(i++);
        // encode 4 character group
        line += $de3bd7b4960dd90f$var$_base64.charAt(chr1 >> 2);
        line += $de3bd7b4960dd90f$var$_base64.charAt((chr1 & 3) << 4 | chr2 >> 4);
        if (isNaN(chr2)) line += "==";
        else {
            line += $de3bd7b4960dd90f$var$_base64.charAt((chr2 & 15) << 2 | chr3 >> 6);
            line += isNaN(chr3) ? "=" : $de3bd7b4960dd90f$var$_base64.charAt(chr3 & 63);
        }
        if (maxline && line.length > maxline) {
            output += line.substr(0, maxline) + "\r\n";
            line = line.substr(maxline);
        }
    }
    output += line;
    return output;
};
/**
 * Base64 decodes a string into a 'binary' encoded string of bytes.
 *
 * @param input the base64-encoded input.
 *
 * @return the binary encoded string.
 */ $de3bd7b4960dd90f$var$util.decode64 = function(input) {
    // TODO: deprecate: "Deprecated. Use util.binary.base64.decode instead."
    // remove all non-base64 characters
    input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");
    var output = "";
    var enc1, enc2, enc3, enc4;
    var i = 0;
    while(i < input.length){
        enc1 = $de3bd7b4960dd90f$var$_base64Idx[input.charCodeAt(i++) - 43];
        enc2 = $de3bd7b4960dd90f$var$_base64Idx[input.charCodeAt(i++) - 43];
        enc3 = $de3bd7b4960dd90f$var$_base64Idx[input.charCodeAt(i++) - 43];
        enc4 = $de3bd7b4960dd90f$var$_base64Idx[input.charCodeAt(i++) - 43];
        output += String.fromCharCode(enc1 << 2 | enc2 >> 4);
        if (enc3 !== 64) {
            // decoded at least 2 bytes
            output += String.fromCharCode((enc2 & 15) << 4 | enc3 >> 2);
            if (enc4 !== 64) // decoded 3 bytes
            output += String.fromCharCode((enc3 & 3) << 6 | enc4);
        }
    }
    return output;
};
/**
 * Encodes the given string of characters (a standard JavaScript
 * string) as a binary encoded string where the bytes represent
 * a UTF-8 encoded string of characters. Non-ASCII characters will be
 * encoded as multiple bytes according to UTF-8.
 *
 * @param str a standard string of characters to encode.
 *
 * @return the binary encoded string.
 */ $de3bd7b4960dd90f$var$util.encodeUtf8 = function(str) {
    return unescape(encodeURIComponent(str));
};
/**
 * Decodes a binary encoded string that contains bytes that
 * represent a UTF-8 encoded string of characters -- into a
 * string of characters (a standard JavaScript string).
 *
 * @param str the binary encoded string to decode.
 *
 * @return the resulting standard string of characters.
 */ $de3bd7b4960dd90f$var$util.decodeUtf8 = function(str) {
    return decodeURIComponent(escape(str));
};
// binary encoding/decoding tools
// FIXME: Experimental. Do not use yet.
$de3bd7b4960dd90f$var$util.binary = {
    raw: {},
    hex: {},
    base64: {},
    base58: {},
    baseN: {
        encode: $386a8a22f2b1bb08$exports.encode,
        decode: $386a8a22f2b1bb08$exports.decode
    }
};
/**
 * Encodes a Uint8Array as a binary-encoded string. This encoding uses
 * a value between 0 and 255 for each character.
 *
 * @param bytes the Uint8Array to encode.
 *
 * @return the binary-encoded string.
 */ $de3bd7b4960dd90f$var$util.binary.raw.encode = function(bytes) {
    return String.fromCharCode.apply(null, bytes);
};
/**
 * Decodes a binary-encoded string to a Uint8Array. This encoding uses
 * a value between 0 and 255 for each character.
 *
 * @param str the binary-encoded string to decode.
 * @param [output] an optional Uint8Array to write the output to; if it
 *          is too small, an exception will be thrown.
 * @param [offset] the start offset for writing to the output (default: 0).
 *
 * @return the Uint8Array or the number of bytes written if output was given.
 */ $de3bd7b4960dd90f$var$util.binary.raw.decode = function(str, output, offset) {
    var out = output;
    if (!out) out = new Uint8Array(str.length);
    offset = offset || 0;
    var j = offset;
    for(var i = 0; i < str.length; ++i)out[j++] = str.charCodeAt(i);
    return output ? j - offset : out;
};
/**
 * Encodes a 'binary' string, ArrayBuffer, DataView, TypedArray, or
 * ByteBuffer as a string of hexadecimal characters.
 *
 * @param bytes the bytes to convert.
 *
 * @return the string of hexadecimal characters.
 */ $de3bd7b4960dd90f$var$util.binary.hex.encode = $de3bd7b4960dd90f$var$util.bytesToHex;
/**
 * Decodes a hex-encoded string to a Uint8Array.
 *
 * @param hex the hexadecimal string to convert.
 * @param [output] an optional Uint8Array to write the output to; if it
 *          is too small, an exception will be thrown.
 * @param [offset] the start offset for writing to the output (default: 0).
 *
 * @return the Uint8Array or the number of bytes written if output was given.
 */ $de3bd7b4960dd90f$var$util.binary.hex.decode = function(hex, output, offset) {
    var out = output;
    if (!out) out = new Uint8Array(Math.ceil(hex.length / 2));
    offset = offset || 0;
    var i = 0, j = offset;
    if (hex.length & 1) {
        // odd number of characters, convert first character alone
        i = 1;
        out[j++] = parseInt(hex[0], 16);
    }
    // convert 2 characters (1 byte) at a time
    for(; i < hex.length; i += 2)out[j++] = parseInt(hex.substr(i, 2), 16);
    return output ? j - offset : out;
};
/**
 * Base64-encodes a Uint8Array.
 *
 * @param input the Uint8Array to encode.
 * @param maxline the maximum number of encoded characters per line to use,
 *          defaults to none.
 *
 * @return the base64-encoded output string.
 */ $de3bd7b4960dd90f$var$util.binary.base64.encode = function(input, maxline) {
    var line = "";
    var output = "";
    var chr1, chr2, chr3;
    var i = 0;
    while(i < input.byteLength){
        chr1 = input[i++];
        chr2 = input[i++];
        chr3 = input[i++];
        // encode 4 character group
        line += $de3bd7b4960dd90f$var$_base64.charAt(chr1 >> 2);
        line += $de3bd7b4960dd90f$var$_base64.charAt((chr1 & 3) << 4 | chr2 >> 4);
        if (isNaN(chr2)) line += "==";
        else {
            line += $de3bd7b4960dd90f$var$_base64.charAt((chr2 & 15) << 2 | chr3 >> 6);
            line += isNaN(chr3) ? "=" : $de3bd7b4960dd90f$var$_base64.charAt(chr3 & 63);
        }
        if (maxline && line.length > maxline) {
            output += line.substr(0, maxline) + "\r\n";
            line = line.substr(maxline);
        }
    }
    output += line;
    return output;
};
/**
 * Decodes a base64-encoded string to a Uint8Array.
 *
 * @param input the base64-encoded input string.
 * @param [output] an optional Uint8Array to write the output to; if it
 *          is too small, an exception will be thrown.
 * @param [offset] the start offset for writing to the output (default: 0).
 *
 * @return the Uint8Array or the number of bytes written if output was given.
 */ $de3bd7b4960dd90f$var$util.binary.base64.decode = function(input, output, offset) {
    var out = output;
    if (!out) out = new Uint8Array(Math.ceil(input.length / 4) * 3);
    // remove all non-base64 characters
    input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");
    offset = offset || 0;
    var enc1, enc2, enc3, enc4;
    var i = 0, j = offset;
    while(i < input.length){
        enc1 = $de3bd7b4960dd90f$var$_base64Idx[input.charCodeAt(i++) - 43];
        enc2 = $de3bd7b4960dd90f$var$_base64Idx[input.charCodeAt(i++) - 43];
        enc3 = $de3bd7b4960dd90f$var$_base64Idx[input.charCodeAt(i++) - 43];
        enc4 = $de3bd7b4960dd90f$var$_base64Idx[input.charCodeAt(i++) - 43];
        out[j++] = enc1 << 2 | enc2 >> 4;
        if (enc3 !== 64) {
            // decoded at least 2 bytes
            out[j++] = (enc2 & 15) << 4 | enc3 >> 2;
            if (enc4 !== 64) // decoded 3 bytes
            out[j++] = (enc3 & 3) << 6 | enc4;
        }
    }
    // make sure result is the exact decoded length
    return output ? j - offset : out.subarray(0, j);
};
// add support for base58 encoding/decoding with Bitcoin alphabet
$de3bd7b4960dd90f$var$util.binary.base58.encode = function(input, maxline) {
    return $de3bd7b4960dd90f$var$util.binary.baseN.encode(input, $de3bd7b4960dd90f$var$_base58, maxline);
};
$de3bd7b4960dd90f$var$util.binary.base58.decode = function(input, maxline) {
    return $de3bd7b4960dd90f$var$util.binary.baseN.decode(input, $de3bd7b4960dd90f$var$_base58, maxline);
};
// text encoding/decoding tools
// FIXME: Experimental. Do not use yet.
$de3bd7b4960dd90f$var$util.text = {
    utf8: {},
    utf16: {}
};
/**
 * Encodes the given string as UTF-8 in a Uint8Array.
 *
 * @param str the string to encode.
 * @param [output] an optional Uint8Array to write the output to; if it
 *          is too small, an exception will be thrown.
 * @param [offset] the start offset for writing to the output (default: 0).
 *
 * @return the Uint8Array or the number of bytes written if output was given.
 */ $de3bd7b4960dd90f$var$util.text.utf8.encode = function(str, output, offset) {
    str = $de3bd7b4960dd90f$var$util.encodeUtf8(str);
    var out = output;
    if (!out) out = new Uint8Array(str.length);
    offset = offset || 0;
    var j = offset;
    for(var i = 0; i < str.length; ++i)out[j++] = str.charCodeAt(i);
    return output ? j - offset : out;
};
/**
 * Decodes the UTF-8 contents from a Uint8Array.
 *
 * @param bytes the Uint8Array to decode.
 *
 * @return the resulting string.
 */ $de3bd7b4960dd90f$var$util.text.utf8.decode = function(bytes) {
    return $de3bd7b4960dd90f$var$util.decodeUtf8(String.fromCharCode.apply(null, bytes));
};
/**
 * Encodes the given string as UTF-16 in a Uint8Array.
 *
 * @param str the string to encode.
 * @param [output] an optional Uint8Array to write the output to; if it
 *          is too small, an exception will be thrown.
 * @param [offset] the start offset for writing to the output (default: 0).
 *
 * @return the Uint8Array or the number of bytes written if output was given.
 */ $de3bd7b4960dd90f$var$util.text.utf16.encode = function(str, output, offset) {
    var out = output;
    if (!out) out = new Uint8Array(str.length * 2);
    var view = new Uint16Array(out.buffer);
    offset = offset || 0;
    var j = offset;
    var k = offset;
    for(var i = 0; i < str.length; ++i){
        view[k++] = str.charCodeAt(i);
        j += 2;
    }
    return output ? j - offset : out;
};
/**
 * Decodes the UTF-16 contents from a Uint8Array.
 *
 * @param bytes the Uint8Array to decode.
 *
 * @return the resulting string.
 */ $de3bd7b4960dd90f$var$util.text.utf16.decode = function(bytes) {
    return String.fromCharCode.apply(null, new Uint16Array(bytes.buffer));
};
/**
 * Deflates the given data using a flash interface.
 *
 * @param api the flash interface.
 * @param bytes the data.
 * @param raw true to return only raw deflate data, false to include zlib
 *          header and trailer.
 *
 * @return the deflated data as a string.
 */ $de3bd7b4960dd90f$var$util.deflate = function(api, bytes, raw) {
    bytes = $de3bd7b4960dd90f$var$util.decode64(api.deflate($de3bd7b4960dd90f$var$util.encode64(bytes)).rval);
    // strip zlib header and trailer if necessary
    if (raw) {
        // zlib header is 2 bytes (CMF,FLG) where FLG indicates that
        // there is a 4-byte DICT (alder-32) block before the data if
        // its 5th bit is set
        var start = 2;
        var flg = bytes.charCodeAt(1);
        if (flg & 0x20) start = 6;
        // zlib trailer is 4 bytes of adler-32
        bytes = bytes.substring(start, bytes.length - 4);
    }
    return bytes;
};
/**
 * Inflates the given data using a flash interface.
 *
 * @param api the flash interface.
 * @param bytes the data.
 * @param raw true if the incoming data has no zlib header or trailer and is
 *          raw DEFLATE data.
 *
 * @return the inflated data as a string, null on error.
 */ $de3bd7b4960dd90f$var$util.inflate = function(api, bytes, raw) {
    // TODO: add zlib header and trailer if necessary/possible
    var rval = api.inflate($de3bd7b4960dd90f$var$util.encode64(bytes)).rval;
    return rval === null ? null : $de3bd7b4960dd90f$var$util.decode64(rval);
};
/**
 * Sets a storage object.
 *
 * @param api the storage interface.
 * @param id the storage ID to use.
 * @param obj the storage object, null to remove.
 */ var $de3bd7b4960dd90f$var$_setStorageObject = function(api, id, obj) {
    if (!api) throw new Error("WebStorage not available.");
    var rval;
    if (obj === null) rval = api.removeItem(id);
    else {
        // json-encode and base64-encode object
        obj = $de3bd7b4960dd90f$var$util.encode64(JSON.stringify(obj));
        rval = api.setItem(id, obj);
    }
    // handle potential flash error
    if (typeof rval !== "undefined" && rval.rval !== true) {
        var error = new Error(rval.error.message);
        error.id = rval.error.id;
        error.name = rval.error.name;
        throw error;
    }
};
/**
 * Gets a storage object.
 *
 * @param api the storage interface.
 * @param id the storage ID to use.
 *
 * @return the storage object entry or null if none exists.
 */ var $de3bd7b4960dd90f$var$_getStorageObject = function(api, id) {
    if (!api) throw new Error("WebStorage not available.");
    // get the existing entry
    var rval = api.getItem(id);
    /* Note: We check api.init because we can't do (api == localStorage)
    on IE because of "Class doesn't support Automation" exception. Only
    the flash api has an init method so this works too, but we need a
    better solution in the future. */ // flash returns item wrapped in an object, handle special case
    if (api.init) {
        if (rval.rval === null) {
            if (rval.error) {
                var error = new Error(rval.error.message);
                error.id = rval.error.id;
                error.name = rval.error.name;
                throw error;
            }
            // no error, but also no item
            rval = null;
        } else rval = rval.rval;
    }
    // handle decoding
    if (rval !== null) // base64-decode and json-decode data
    rval = JSON.parse($de3bd7b4960dd90f$var$util.decode64(rval));
    return rval;
};
/**
 * Stores an item in local storage.
 *
 * @param api the storage interface.
 * @param id the storage ID to use.
 * @param key the key for the item.
 * @param data the data for the item (any javascript object/primitive).
 */ var $de3bd7b4960dd90f$var$_setItem = function(api, id, key, data) {
    // get storage object
    var obj = $de3bd7b4960dd90f$var$_getStorageObject(api, id);
    if (obj === null) // create a new storage object
    obj = {};
    // update key
    obj[key] = data;
    // set storage object
    $de3bd7b4960dd90f$var$_setStorageObject(api, id, obj);
};
/**
 * Gets an item from local storage.
 *
 * @param api the storage interface.
 * @param id the storage ID to use.
 * @param key the key for the item.
 *
 * @return the item.
 */ var $de3bd7b4960dd90f$var$_getItem = function(api, id, key) {
    // get storage object
    var rval = $de3bd7b4960dd90f$var$_getStorageObject(api, id);
    if (rval !== null) // return data at key
    rval = key in rval ? rval[key] : null;
    return rval;
};
/**
 * Removes an item from local storage.
 *
 * @param api the storage interface.
 * @param id the storage ID to use.
 * @param key the key for the item.
 */ var $de3bd7b4960dd90f$var$_removeItem = function(api, id, key) {
    // get storage object
    var obj = $de3bd7b4960dd90f$var$_getStorageObject(api, id);
    if (obj !== null && key in obj) {
        // remove key
        delete obj[key];
        // see if entry has no keys remaining
        var empty = true;
        for(var prop in obj){
            empty = false;
            break;
        }
        if (empty) // remove entry entirely if no keys are left
        obj = null;
        // set storage object
        $de3bd7b4960dd90f$var$_setStorageObject(api, id, obj);
    }
};
/**
 * Clears the local disk storage identified by the given ID.
 *
 * @param api the storage interface.
 * @param id the storage ID to use.
 */ var $de3bd7b4960dd90f$var$_clearItems = function(api, id) {
    $de3bd7b4960dd90f$var$_setStorageObject(api, id, null);
};
/**
 * Calls a storage function.
 *
 * @param func the function to call.
 * @param args the arguments for the function.
 * @param location the location argument.
 *
 * @return the return value from the function.
 */ var $de3bd7b4960dd90f$var$_callStorageFunction = function(func, args, location) {
    var rval = null;
    // default storage types
    if (typeof location === "undefined") location = [
        "web",
        "flash"
    ];
    // apply storage types in order of preference
    var type;
    var done = false;
    var exception = null;
    for(var idx in location){
        type = location[idx];
        try {
            if (type === "flash" || type === "both") {
                if (args[0] === null) throw new Error("Flash local storage not available.");
                rval = func.apply(this, args);
                done = type === "flash";
            }
            if (type === "web" || type === "both") {
                args[0] = localStorage;
                rval = func.apply(this, args);
                done = true;
            }
        } catch (ex) {
            exception = ex;
        }
        if (done) break;
    }
    if (!done) throw exception;
    return rval;
};
/**
 * Stores an item on local disk.
 *
 * The available types of local storage include 'flash', 'web', and 'both'.
 *
 * The type 'flash' refers to flash local storage (SharedObject). In order
 * to use flash local storage, the 'api' parameter must be valid. The type
 * 'web' refers to WebStorage, if supported by the browser. The type 'both'
 * refers to storing using both 'flash' and 'web', not just one or the
 * other.
 *
 * The location array should list the storage types to use in order of
 * preference:
 *
 * ['flash']: flash only storage
 * ['web']: web only storage
 * ['both']: try to store in both
 * ['flash','web']: store in flash first, but if not available, 'web'
 * ['web','flash']: store in web first, but if not available, 'flash'
 *
 * The location array defaults to: ['web', 'flash']
 *
 * @param api the flash interface, null to use only WebStorage.
 * @param id the storage ID to use.
 * @param key the key for the item.
 * @param data the data for the item (any javascript object/primitive).
 * @param location an array with the preferred types of storage to use.
 */ $de3bd7b4960dd90f$var$util.setItem = function(api, id, key, data, location) {
    $de3bd7b4960dd90f$var$_callStorageFunction($de3bd7b4960dd90f$var$_setItem, arguments, location);
};
/**
 * Gets an item on local disk.
 *
 * Set setItem() for details on storage types.
 *
 * @param api the flash interface, null to use only WebStorage.
 * @param id the storage ID to use.
 * @param key the key for the item.
 * @param location an array with the preferred types of storage to use.
 *
 * @return the item.
 */ $de3bd7b4960dd90f$var$util.getItem = function(api, id, key, location) {
    return $de3bd7b4960dd90f$var$_callStorageFunction($de3bd7b4960dd90f$var$_getItem, arguments, location);
};
/**
 * Removes an item on local disk.
 *
 * Set setItem() for details on storage types.
 *
 * @param api the flash interface.
 * @param id the storage ID to use.
 * @param key the key for the item.
 * @param location an array with the preferred types of storage to use.
 */ $de3bd7b4960dd90f$var$util.removeItem = function(api, id, key, location) {
    $de3bd7b4960dd90f$var$_callStorageFunction($de3bd7b4960dd90f$var$_removeItem, arguments, location);
};
/**
 * Clears the local disk storage identified by the given ID.
 *
 * Set setItem() for details on storage types.
 *
 * @param api the flash interface if flash is available.
 * @param id the storage ID to use.
 * @param location an array with the preferred types of storage to use.
 */ $de3bd7b4960dd90f$var$util.clearItems = function(api, id, location) {
    $de3bd7b4960dd90f$var$_callStorageFunction($de3bd7b4960dd90f$var$_clearItems, arguments, location);
};
/**
 * Check if an object is empty.
 *
 * Taken from:
 * http://stackoverflow.com/questions/679915/how-do-i-test-for-an-empty-javascript-object-from-json/679937#679937
 *
 * @param object the object to check.
 */ $de3bd7b4960dd90f$var$util.isEmpty = function(obj) {
    for(var prop in obj){
        if (obj.hasOwnProperty(prop)) return false;
    }
    return true;
};
/**
 * Format with simple printf-style interpolation.
 *
 * %%: literal '%'
 * %s,%o: convert next argument into a string.
 *
 * @param format the string to format.
 * @param ... arguments to interpolate into the format string.
 */ $de3bd7b4960dd90f$var$util.format = function(format) {
    var re = /%./g;
    // current match
    var match;
    // current part
    var part;
    // current arg index
    var argi = 0;
    // collected parts to recombine later
    var parts = [];
    // last index found
    var last = 0;
    // loop while matches remain
    while(match = re.exec(format)){
        part = format.substring(last, re.lastIndex - 2);
        // don't add empty strings (ie, parts between %s%s)
        if (part.length > 0) parts.push(part);
        last = re.lastIndex;
        // switch on % code
        var code = match[0][1];
        switch(code){
            case "s":
            case "o":
                // check if enough arguments were given
                if (argi < arguments.length) parts.push(arguments[argi++ + 1]);
                else parts.push("<?>");
                break;
            // FIXME: do proper formating for numbers, etc
            //case 'f':
            //case 'd':
            case "%":
                parts.push("%");
                break;
            default:
                parts.push("<%" + code + "?>");
        }
    }
    // add trailing part of format string
    parts.push(format.substring(last));
    return parts.join("");
};
/**
 * Formats a number.
 *
 * http://snipplr.com/view/5945/javascript-numberformat--ported-from-php/
 */ $de3bd7b4960dd90f$var$util.formatNumber = function(number, decimals, dec_point, thousands_sep) {
    // http://kevin.vanzonneveld.net
    // +   original by: Jonas Raoni Soares Silva (http://www.jsfromhell.com)
    // +   improved by: Kevin van Zonneveld (http://kevin.vanzonneveld.net)
    // +     bugfix by: Michael White (http://crestidg.com)
    // +     bugfix by: Benjamin Lupton
    // +     bugfix by: Allan Jensen (http://www.winternet.no)
    // +    revised by: Jonas Raoni Soares Silva (http://www.jsfromhell.com)
    // *     example 1: number_format(1234.5678, 2, '.', '');
    // *     returns 1: 1234.57
    var n = number, c = isNaN(decimals = Math.abs(decimals)) ? 2 : decimals;
    var d = dec_point === undefined ? "," : dec_point;
    var t = thousands_sep === undefined ? "." : thousands_sep, s = n < 0 ? "-" : "";
    var i = parseInt(n = Math.abs(+n || 0).toFixed(c), 10) + "";
    var j = i.length > 3 ? i.length % 3 : 0;
    return s + (j ? i.substr(0, j) + t : "") + i.substr(j).replace(/(\d{3})(?=\d)/g, "$1" + t) + (c ? d + Math.abs(n - i).toFixed(c).slice(2) : "");
};
/**
 * Formats a byte size.
 *
 * http://snipplr.com/view/5949/format-humanize-file-byte-size-presentation-in-javascript/
 */ $de3bd7b4960dd90f$var$util.formatSize = function(size) {
    if (size >= 1073741824) size = $de3bd7b4960dd90f$var$util.formatNumber(size / 1073741824, 2, ".", "") + " GiB";
    else if (size >= 1048576) size = $de3bd7b4960dd90f$var$util.formatNumber(size / 1048576, 2, ".", "") + " MiB";
    else if (size >= 1024) size = $de3bd7b4960dd90f$var$util.formatNumber(size / 1024, 0) + " KiB";
    else size = $de3bd7b4960dd90f$var$util.formatNumber(size, 0) + " bytes";
    return size;
};
/**
 * Converts an IPv4 or IPv6 string representation into bytes (in network order).
 *
 * @param ip the IPv4 or IPv6 address to convert.
 *
 * @return the 4-byte IPv6 or 16-byte IPv6 address or null if the address can't
 *         be parsed.
 */ $de3bd7b4960dd90f$var$util.bytesFromIP = function(ip) {
    if (ip.indexOf(".") !== -1) return $de3bd7b4960dd90f$var$util.bytesFromIPv4(ip);
    if (ip.indexOf(":") !== -1) return $de3bd7b4960dd90f$var$util.bytesFromIPv6(ip);
    return null;
};
/**
 * Converts an IPv4 string representation into bytes (in network order).
 *
 * @param ip the IPv4 address to convert.
 *
 * @return the 4-byte address or null if the address can't be parsed.
 */ $de3bd7b4960dd90f$var$util.bytesFromIPv4 = function(ip) {
    ip = ip.split(".");
    if (ip.length !== 4) return null;
    var b = $de3bd7b4960dd90f$var$util.createBuffer();
    for(var i = 0; i < ip.length; ++i){
        var num = parseInt(ip[i], 10);
        if (isNaN(num)) return null;
        b.putByte(num);
    }
    return b.getBytes();
};
/**
 * Converts an IPv6 string representation into bytes (in network order).
 *
 * @param ip the IPv6 address to convert.
 *
 * @return the 16-byte address or null if the address can't be parsed.
 */ $de3bd7b4960dd90f$var$util.bytesFromIPv6 = function(ip) {
    var blanks = 0;
    ip = ip.split(":").filter(function(e) {
        if (e.length === 0) ++blanks;
        return true;
    });
    var zeros = (8 - ip.length + blanks) * 2;
    var b = $de3bd7b4960dd90f$var$util.createBuffer();
    for(var i = 0; i < 8; ++i){
        if (!ip[i] || ip[i].length === 0) {
            b.fillWithByte(0, zeros);
            zeros = 0;
            continue;
        }
        var bytes = $de3bd7b4960dd90f$var$util.hexToBytes(ip[i]);
        if (bytes.length < 2) b.putByte(0);
        b.putBytes(bytes);
    }
    return b.getBytes();
};
/**
 * Converts 4-bytes into an IPv4 string representation or 16-bytes into
 * an IPv6 string representation. The bytes must be in network order.
 *
 * @param bytes the bytes to convert.
 *
 * @return the IPv4 or IPv6 string representation if 4 or 16 bytes,
 *         respectively, are given, otherwise null.
 */ $de3bd7b4960dd90f$var$util.bytesToIP = function(bytes) {
    if (bytes.length === 4) return $de3bd7b4960dd90f$var$util.bytesToIPv4(bytes);
    if (bytes.length === 16) return $de3bd7b4960dd90f$var$util.bytesToIPv6(bytes);
    return null;
};
/**
 * Converts 4-bytes into an IPv4 string representation. The bytes must be
 * in network order.
 *
 * @param bytes the bytes to convert.
 *
 * @return the IPv4 string representation or null for an invalid # of bytes.
 */ $de3bd7b4960dd90f$var$util.bytesToIPv4 = function(bytes) {
    if (bytes.length !== 4) return null;
    var ip = [];
    for(var i = 0; i < bytes.length; ++i)ip.push(bytes.charCodeAt(i));
    return ip.join(".");
};
/**
 * Converts 16-bytes into an IPv16 string representation. The bytes must be
 * in network order.
 *
 * @param bytes the bytes to convert.
 *
 * @return the IPv16 string representation or null for an invalid # of bytes.
 */ $de3bd7b4960dd90f$var$util.bytesToIPv6 = function(bytes) {
    if (bytes.length !== 16) return null;
    var ip = [];
    var zeroGroups = [];
    var zeroMaxGroup = 0;
    for(var i = 0; i < bytes.length; i += 2){
        var hex = $de3bd7b4960dd90f$var$util.bytesToHex(bytes[i] + bytes[i + 1]);
        // canonicalize zero representation
        while(hex[0] === "0" && hex !== "0")hex = hex.substr(1);
        if (hex === "0") {
            var last = zeroGroups[zeroGroups.length - 1];
            var idx = ip.length;
            if (!last || idx !== last.end + 1) zeroGroups.push({
                start: idx,
                end: idx
            });
            else {
                last.end = idx;
                if (last.end - last.start > zeroGroups[zeroMaxGroup].end - zeroGroups[zeroMaxGroup].start) zeroMaxGroup = zeroGroups.length - 1;
            }
        }
        ip.push(hex);
    }
    if (zeroGroups.length > 0) {
        var group = zeroGroups[zeroMaxGroup];
        // only shorten group of length > 0
        if (group.end - group.start > 0) {
            ip.splice(group.start, group.end - group.start + 1, "");
            if (group.start === 0) ip.unshift("");
            if (group.end === 7) ip.push("");
        }
    }
    return ip.join(":");
};
/**
 * Estimates the number of processes that can be run concurrently. If
 * creating Web Workers, keep in mind that the main JavaScript process needs
 * its own core.
 *
 * @param options the options to use:
 *          update true to force an update (not use the cached value).
 * @param callback(err, max) called once the operation completes.
 */ $de3bd7b4960dd90f$var$util.estimateCores = function(options, callback) {
    if (typeof options === "function") {
        callback = options;
        options = {};
    }
    options = options || {};
    if ("cores" in $de3bd7b4960dd90f$var$util && !options.update) return callback(null, $de3bd7b4960dd90f$var$util.cores);
    if (typeof navigator !== "undefined" && "hardwareConcurrency" in navigator && navigator.hardwareConcurrency > 0) {
        $de3bd7b4960dd90f$var$util.cores = navigator.hardwareConcurrency;
        return callback(null, $de3bd7b4960dd90f$var$util.cores);
    }
    if (typeof Worker === "undefined") {
        // workers not available
        $de3bd7b4960dd90f$var$util.cores = 1;
        return callback(null, $de3bd7b4960dd90f$var$util.cores);
    }
    if (typeof Blob === "undefined") {
        // can't estimate, default to 2
        $de3bd7b4960dd90f$var$util.cores = 2;
        return callback(null, $de3bd7b4960dd90f$var$util.cores);
    }
    // create worker concurrency estimation code as blob
    var blobUrl = URL.createObjectURL(new Blob([
        "(",
        (function() {
            self.addEventListener("message", function(e) {
                // run worker for 4 ms
                var st = Date.now();
                var et = st + 4;
                while(Date.now() < et);
                self.postMessage({
                    st: st,
                    et: et
                });
            });
        }).toString(),
        ")()"
    ], {
        type: "application/javascript"
    }));
    // take 5 samples using 16 workers
    sample([], 5, 16);
    function sample(max, samples, numWorkers) {
        if (samples === 0) {
            // get overlap average
            var avg = Math.floor(max.reduce(function(avg, x) {
                return avg + x;
            }, 0) / max.length);
            $de3bd7b4960dd90f$var$util.cores = Math.max(1, avg);
            URL.revokeObjectURL(blobUrl);
            return callback(null, $de3bd7b4960dd90f$var$util.cores);
        }
        map(numWorkers, function(err, results) {
            max.push(reduce(numWorkers, results));
            sample(max, samples - 1, numWorkers);
        });
    }
    function map(numWorkers, callback) {
        var workers = [];
        var results = [];
        for(var i = 0; i < numWorkers; ++i){
            var worker = new Worker(blobUrl);
            worker.addEventListener("message", function(e) {
                results.push(e.data);
                if (results.length === numWorkers) {
                    for(var i = 0; i < numWorkers; ++i)workers[i].terminate();
                    callback(null, results);
                }
            });
            workers.push(worker);
        }
        for(var i = 0; i < numWorkers; ++i)workers[i].postMessage(i);
    }
    function reduce(numWorkers, results) {
        // find overlapping time windows
        var overlaps = [];
        for(var n = 0; n < numWorkers; ++n){
            var r1 = results[n];
            var overlap = overlaps[n] = [];
            for(var i = 0; i < numWorkers; ++i){
                if (n === i) continue;
                var r2 = results[i];
                if (r1.st > r2.st && r1.st < r2.et || r2.st > r1.st && r2.st < r1.et) overlap.push(i);
            }
        }
        // get maximum overlaps ... don't include overlapping worker itself
        // as the main JS process was also being scheduled during the work and
        // would have to be subtracted from the estimate anyway
        return overlaps.reduce(function(max, overlap) {
            return Math.max(max, overlap.length);
        }, 0);
    }
};


$68c3fe695c768032$exports = $aX5SS.cipher = $aX5SS.cipher || {};
// registered algorithms
$aX5SS.cipher.algorithms = $aX5SS.cipher.algorithms || {};
/**
 * Creates a cipher object that can be used to encrypt data using the given
 * algorithm and key. The algorithm may be provided as a string value for a
 * previously registered algorithm or it may be given as a cipher algorithm
 * API object.
 *
 * @param algorithm the algorithm to use, either a string or an algorithm API
 *          object.
 * @param key the key to use, as a binary-encoded string of bytes or a
 *          byte buffer.
 *
 * @return the cipher.
 */ $aX5SS.cipher.createCipher = function(algorithm, key) {
    var api = algorithm;
    if (typeof api === "string") {
        api = $aX5SS.cipher.getAlgorithm(api);
        if (api) api = api();
    }
    if (!api) throw new Error("Unsupported algorithm: " + algorithm);
    // assume block cipher
    return new $aX5SS.cipher.BlockCipher({
        algorithm: api,
        key: key,
        decrypt: false
    });
};
/**
 * Creates a decipher object that can be used to decrypt data using the given
 * algorithm and key. The algorithm may be provided as a string value for a
 * previously registered algorithm or it may be given as a cipher algorithm
 * API object.
 *
 * @param algorithm the algorithm to use, either a string or an algorithm API
 *          object.
 * @param key the key to use, as a binary-encoded string of bytes or a
 *          byte buffer.
 *
 * @return the cipher.
 */ $aX5SS.cipher.createDecipher = function(algorithm, key) {
    var api = algorithm;
    if (typeof api === "string") {
        api = $aX5SS.cipher.getAlgorithm(api);
        if (api) api = api();
    }
    if (!api) throw new Error("Unsupported algorithm: " + algorithm);
    // assume block cipher
    return new $aX5SS.cipher.BlockCipher({
        algorithm: api,
        key: key,
        decrypt: true
    });
};
/**
 * Registers an algorithm by name. If the name was already registered, the
 * algorithm API object will be overwritten.
 *
 * @param name the name of the algorithm.
 * @param algorithm the algorithm API object.
 */ $aX5SS.cipher.registerAlgorithm = function(name, algorithm) {
    name = name.toUpperCase();
    $aX5SS.cipher.algorithms[name] = algorithm;
};
/**
 * Gets a registered algorithm by name.
 *
 * @param name the name of the algorithm.
 *
 * @return the algorithm, if found, null if not.
 */ $aX5SS.cipher.getAlgorithm = function(name) {
    name = name.toUpperCase();
    if (name in $aX5SS.cipher.algorithms) return $aX5SS.cipher.algorithms[name];
    return null;
};
var $68c3fe695c768032$var$BlockCipher = $aX5SS.cipher.BlockCipher = function(options) {
    this.algorithm = options.algorithm;
    this.mode = this.algorithm.mode;
    this.blockSize = this.mode.blockSize;
    this._finish = false;
    this._input = null;
    this.output = null;
    this._op = options.decrypt ? this.mode.decrypt : this.mode.encrypt;
    this._decrypt = options.decrypt;
    this.algorithm.initialize(options);
};
/**
 * Starts or restarts the encryption or decryption process, whichever
 * was previously configured.
 *
 * For non-GCM mode, the IV may be a binary-encoded string of bytes, an array
 * of bytes, a byte buffer, or an array of 32-bit integers. If the IV is in
 * bytes, then it must be Nb (16) bytes in length. If the IV is given in as
 * 32-bit integers, then it must be 4 integers long.
 *
 * Note: an IV is not required or used in ECB mode.
 *
 * For GCM-mode, the IV must be given as a binary-encoded string of bytes or
 * a byte buffer. The number of bytes should be 12 (96 bits) as recommended
 * by NIST SP-800-38D but another length may be given.
 *
 * @param options the options to use:
 *          iv the initialization vector to use as a binary-encoded string of
 *            bytes, null to reuse the last ciphered block from a previous
 *            update() (this "residue" method is for legacy support only).
 *          additionalData additional authentication data as a binary-encoded
 *            string of bytes, for 'GCM' mode, (default: none).
 *          tagLength desired length of authentication tag, in bits, for
 *            'GCM' mode (0-128, default: 128).
 *          tag the authentication tag to check if decrypting, as a
 *             binary-encoded string of bytes.
 *          output the output the buffer to write to, null to create one.
 */ $68c3fe695c768032$var$BlockCipher.prototype.start = function(options) {
    options = options || {};
    var opts = {};
    for(var key in options)opts[key] = options[key];
    opts.decrypt = this._decrypt;
    this._finish = false;
    this._input = $aX5SS.util.createBuffer();
    this.output = options.output || $aX5SS.util.createBuffer();
    this.mode.start(opts);
};
/**
 * Updates the next block according to the cipher mode.
 *
 * @param input the buffer to read from.
 */ $68c3fe695c768032$var$BlockCipher.prototype.update = function(input) {
    if (input) // input given, so empty it into the input buffer
    this._input.putBuffer(input);
    // do cipher operation until it needs more input and not finished
    while(!this._op.call(this.mode, this._input, this.output, this._finish) && !this._finish);
    // free consumed memory from input buffer
    this._input.compact();
};
/**
 * Finishes encrypting or decrypting.
 *
 * @param pad a padding function to use in CBC mode, null for default,
 *          signature(blockSize, buffer, decrypt).
 *
 * @return true if successful, false on error.
 */ $68c3fe695c768032$var$BlockCipher.prototype.finish = function(pad) {
    // backwards-compatibility w/deprecated padding API
    // Note: will overwrite padding functions even after another start() call
    if (pad && (this.mode.name === "ECB" || this.mode.name === "CBC")) {
        this.mode.pad = function(input) {
            return pad(this.blockSize, input, false);
        };
        this.mode.unpad = function(output) {
            return pad(this.blockSize, output, true);
        };
    }
    // build options for padding and afterFinish functions
    var options = {};
    options.decrypt = this._decrypt;
    // get # of bytes that won't fill a block
    options.overflow = this._input.length() % this.blockSize;
    if (!this._decrypt && this.mode.pad) {
        if (!this.mode.pad(this._input, options)) return false;
    }
    // do final update
    this._finish = true;
    this.update();
    if (this._decrypt && this.mode.unpad) {
        if (!this.mode.unpad(this.output, options)) return false;
    }
    if (this.mode.afterFinish) {
        if (!this.mode.afterFinish(this.output, options)) return false;
    }
    return true;
};


var $af0ace6aa46df127$exports = {};
/**
 * Supported cipher modes.
 *
 * @author Dave Longley
 *
 * Copyright (c) 2010-2014 Digital Bazaar, Inc.
 */ 
var $aX5SS = parcelRequire("aX5SS");

$aX5SS.cipher = $aX5SS.cipher || {};
// supported cipher modes
var $af0ace6aa46df127$var$modes = $af0ace6aa46df127$exports = $aX5SS.cipher.modes = $aX5SS.cipher.modes || {};
/** Electronic codebook (ECB) (Don't use this; it's not secure) **/ $af0ace6aa46df127$var$modes.ecb = function(options) {
    options = options || {};
    this.name = "ECB";
    this.cipher = options.cipher;
    this.blockSize = options.blockSize || 16;
    this._ints = this.blockSize / 4;
    this._inBlock = new Array(this._ints);
    this._outBlock = new Array(this._ints);
};
$af0ace6aa46df127$var$modes.ecb.prototype.start = function(options) {};
$af0ace6aa46df127$var$modes.ecb.prototype.encrypt = function(input, output, finish) {
    // not enough input to encrypt
    if (input.length() < this.blockSize && !(finish && input.length() > 0)) return true;
    // get next block
    for(var i = 0; i < this._ints; ++i)this._inBlock[i] = input.getInt32();
    // encrypt block
    this.cipher.encrypt(this._inBlock, this._outBlock);
    // write output
    for(var i = 0; i < this._ints; ++i)output.putInt32(this._outBlock[i]);
};
$af0ace6aa46df127$var$modes.ecb.prototype.decrypt = function(input, output, finish) {
    // not enough input to decrypt
    if (input.length() < this.blockSize && !(finish && input.length() > 0)) return true;
    // get next block
    for(var i = 0; i < this._ints; ++i)this._inBlock[i] = input.getInt32();
    // decrypt block
    this.cipher.decrypt(this._inBlock, this._outBlock);
    // write output
    for(var i = 0; i < this._ints; ++i)output.putInt32(this._outBlock[i]);
};
$af0ace6aa46df127$var$modes.ecb.prototype.pad = function(input, options) {
    // add PKCS#7 padding to block (each pad byte is the
    // value of the number of pad bytes)
    var padding = input.length() === this.blockSize ? this.blockSize : this.blockSize - input.length();
    input.fillWithByte(padding, padding);
    return true;
};
$af0ace6aa46df127$var$modes.ecb.prototype.unpad = function(output, options) {
    // check for error: input data not a multiple of blockSize
    if (options.overflow > 0) return false;
    // ensure padding byte count is valid
    var len = output.length();
    var count = output.at(len - 1);
    if (count > this.blockSize << 2) return false;
    // trim off padding bytes
    output.truncate(count);
    return true;
};
/** Cipher-block Chaining (CBC) **/ $af0ace6aa46df127$var$modes.cbc = function(options) {
    options = options || {};
    this.name = "CBC";
    this.cipher = options.cipher;
    this.blockSize = options.blockSize || 16;
    this._ints = this.blockSize / 4;
    this._inBlock = new Array(this._ints);
    this._outBlock = new Array(this._ints);
};
$af0ace6aa46df127$var$modes.cbc.prototype.start = function(options) {
    // Note: legacy support for using IV residue (has security flaws)
    // if IV is null, reuse block from previous processing
    if (options.iv === null) {
        // must have a previous block
        if (!this._prev) throw new Error("Invalid IV parameter.");
        this._iv = this._prev.slice(0);
    } else if (!("iv" in options)) throw new Error("Invalid IV parameter.");
    else {
        // save IV as "previous" block
        this._iv = $af0ace6aa46df127$var$transformIV(options.iv, this.blockSize);
        this._prev = this._iv.slice(0);
    }
};
$af0ace6aa46df127$var$modes.cbc.prototype.encrypt = function(input, output, finish) {
    // not enough input to encrypt
    if (input.length() < this.blockSize && !(finish && input.length() > 0)) return true;
    // get next block
    // CBC XOR's IV (or previous block) with plaintext
    for(var i = 0; i < this._ints; ++i)this._inBlock[i] = this._prev[i] ^ input.getInt32();
    // encrypt block
    this.cipher.encrypt(this._inBlock, this._outBlock);
    // write output, save previous block
    for(var i = 0; i < this._ints; ++i)output.putInt32(this._outBlock[i]);
    this._prev = this._outBlock;
};
$af0ace6aa46df127$var$modes.cbc.prototype.decrypt = function(input, output, finish) {
    // not enough input to decrypt
    if (input.length() < this.blockSize && !(finish && input.length() > 0)) return true;
    // get next block
    for(var i = 0; i < this._ints; ++i)this._inBlock[i] = input.getInt32();
    // decrypt block
    this.cipher.decrypt(this._inBlock, this._outBlock);
    // write output, save previous ciphered block
    // CBC XOR's IV (or previous block) with ciphertext
    for(var i = 0; i < this._ints; ++i)output.putInt32(this._prev[i] ^ this._outBlock[i]);
    this._prev = this._inBlock.slice(0);
};
$af0ace6aa46df127$var$modes.cbc.prototype.pad = function(input, options) {
    // add PKCS#7 padding to block (each pad byte is the
    // value of the number of pad bytes)
    var padding = input.length() === this.blockSize ? this.blockSize : this.blockSize - input.length();
    input.fillWithByte(padding, padding);
    return true;
};
$af0ace6aa46df127$var$modes.cbc.prototype.unpad = function(output, options) {
    // check for error: input data not a multiple of blockSize
    if (options.overflow > 0) return false;
    // ensure padding byte count is valid
    var len = output.length();
    var count = output.at(len - 1);
    if (count > this.blockSize << 2) return false;
    // trim off padding bytes
    output.truncate(count);
    return true;
};
/** Cipher feedback (CFB) **/ $af0ace6aa46df127$var$modes.cfb = function(options) {
    options = options || {};
    this.name = "CFB";
    this.cipher = options.cipher;
    this.blockSize = options.blockSize || 16;
    this._ints = this.blockSize / 4;
    this._inBlock = null;
    this._outBlock = new Array(this._ints);
    this._partialBlock = new Array(this._ints);
    this._partialOutput = $aX5SS.util.createBuffer();
    this._partialBytes = 0;
};
$af0ace6aa46df127$var$modes.cfb.prototype.start = function(options) {
    if (!("iv" in options)) throw new Error("Invalid IV parameter.");
    // use IV as first input
    this._iv = $af0ace6aa46df127$var$transformIV(options.iv, this.blockSize);
    this._inBlock = this._iv.slice(0);
    this._partialBytes = 0;
};
$af0ace6aa46df127$var$modes.cfb.prototype.encrypt = function(input, output, finish) {
    // not enough input to encrypt
    var inputLength = input.length();
    if (inputLength === 0) return true;
    // encrypt block
    this.cipher.encrypt(this._inBlock, this._outBlock);
    // handle full block
    if (this._partialBytes === 0 && inputLength >= this.blockSize) {
        // XOR input with output, write input as output
        for(var i = 0; i < this._ints; ++i){
            this._inBlock[i] = input.getInt32() ^ this._outBlock[i];
            output.putInt32(this._inBlock[i]);
        }
        return;
    }
    // handle partial block
    var partialBytes = (this.blockSize - inputLength) % this.blockSize;
    if (partialBytes > 0) partialBytes = this.blockSize - partialBytes;
    // XOR input with output, write input as partial output
    this._partialOutput.clear();
    for(var i = 0; i < this._ints; ++i){
        this._partialBlock[i] = input.getInt32() ^ this._outBlock[i];
        this._partialOutput.putInt32(this._partialBlock[i]);
    }
    if (partialBytes > 0) // block still incomplete, restore input buffer
    input.read -= this.blockSize;
    else // block complete, update input block
    for(var i = 0; i < this._ints; ++i)this._inBlock[i] = this._partialBlock[i];
    // skip any previous partial bytes
    if (this._partialBytes > 0) this._partialOutput.getBytes(this._partialBytes);
    if (partialBytes > 0 && !finish) {
        output.putBytes(this._partialOutput.getBytes(partialBytes - this._partialBytes));
        this._partialBytes = partialBytes;
        return true;
    }
    output.putBytes(this._partialOutput.getBytes(inputLength - this._partialBytes));
    this._partialBytes = 0;
};
$af0ace6aa46df127$var$modes.cfb.prototype.decrypt = function(input, output, finish) {
    // not enough input to decrypt
    var inputLength = input.length();
    if (inputLength === 0) return true;
    // encrypt block (CFB always uses encryption mode)
    this.cipher.encrypt(this._inBlock, this._outBlock);
    // handle full block
    if (this._partialBytes === 0 && inputLength >= this.blockSize) {
        // XOR input with output, write input as output
        for(var i = 0; i < this._ints; ++i){
            this._inBlock[i] = input.getInt32();
            output.putInt32(this._inBlock[i] ^ this._outBlock[i]);
        }
        return;
    }
    // handle partial block
    var partialBytes = (this.blockSize - inputLength) % this.blockSize;
    if (partialBytes > 0) partialBytes = this.blockSize - partialBytes;
    // XOR input with output, write input as partial output
    this._partialOutput.clear();
    for(var i = 0; i < this._ints; ++i){
        this._partialBlock[i] = input.getInt32();
        this._partialOutput.putInt32(this._partialBlock[i] ^ this._outBlock[i]);
    }
    if (partialBytes > 0) // block still incomplete, restore input buffer
    input.read -= this.blockSize;
    else // block complete, update input block
    for(var i = 0; i < this._ints; ++i)this._inBlock[i] = this._partialBlock[i];
    // skip any previous partial bytes
    if (this._partialBytes > 0) this._partialOutput.getBytes(this._partialBytes);
    if (partialBytes > 0 && !finish) {
        output.putBytes(this._partialOutput.getBytes(partialBytes - this._partialBytes));
        this._partialBytes = partialBytes;
        return true;
    }
    output.putBytes(this._partialOutput.getBytes(inputLength - this._partialBytes));
    this._partialBytes = 0;
};
/** Output feedback (OFB) **/ $af0ace6aa46df127$var$modes.ofb = function(options) {
    options = options || {};
    this.name = "OFB";
    this.cipher = options.cipher;
    this.blockSize = options.blockSize || 16;
    this._ints = this.blockSize / 4;
    this._inBlock = null;
    this._outBlock = new Array(this._ints);
    this._partialOutput = $aX5SS.util.createBuffer();
    this._partialBytes = 0;
};
$af0ace6aa46df127$var$modes.ofb.prototype.start = function(options) {
    if (!("iv" in options)) throw new Error("Invalid IV parameter.");
    // use IV as first input
    this._iv = $af0ace6aa46df127$var$transformIV(options.iv, this.blockSize);
    this._inBlock = this._iv.slice(0);
    this._partialBytes = 0;
};
$af0ace6aa46df127$var$modes.ofb.prototype.encrypt = function(input, output, finish) {
    // not enough input to encrypt
    var inputLength = input.length();
    if (input.length() === 0) return true;
    // encrypt block (OFB always uses encryption mode)
    this.cipher.encrypt(this._inBlock, this._outBlock);
    // handle full block
    if (this._partialBytes === 0 && inputLength >= this.blockSize) {
        // XOR input with output and update next input
        for(var i = 0; i < this._ints; ++i){
            output.putInt32(input.getInt32() ^ this._outBlock[i]);
            this._inBlock[i] = this._outBlock[i];
        }
        return;
    }
    // handle partial block
    var partialBytes = (this.blockSize - inputLength) % this.blockSize;
    if (partialBytes > 0) partialBytes = this.blockSize - partialBytes;
    // XOR input with output
    this._partialOutput.clear();
    for(var i = 0; i < this._ints; ++i)this._partialOutput.putInt32(input.getInt32() ^ this._outBlock[i]);
    if (partialBytes > 0) // block still incomplete, restore input buffer
    input.read -= this.blockSize;
    else // block complete, update input block
    for(var i = 0; i < this._ints; ++i)this._inBlock[i] = this._outBlock[i];
    // skip any previous partial bytes
    if (this._partialBytes > 0) this._partialOutput.getBytes(this._partialBytes);
    if (partialBytes > 0 && !finish) {
        output.putBytes(this._partialOutput.getBytes(partialBytes - this._partialBytes));
        this._partialBytes = partialBytes;
        return true;
    }
    output.putBytes(this._partialOutput.getBytes(inputLength - this._partialBytes));
    this._partialBytes = 0;
};
$af0ace6aa46df127$var$modes.ofb.prototype.decrypt = $af0ace6aa46df127$var$modes.ofb.prototype.encrypt;
/** Counter (CTR) **/ $af0ace6aa46df127$var$modes.ctr = function(options) {
    options = options || {};
    this.name = "CTR";
    this.cipher = options.cipher;
    this.blockSize = options.blockSize || 16;
    this._ints = this.blockSize / 4;
    this._inBlock = null;
    this._outBlock = new Array(this._ints);
    this._partialOutput = $aX5SS.util.createBuffer();
    this._partialBytes = 0;
};
$af0ace6aa46df127$var$modes.ctr.prototype.start = function(options) {
    if (!("iv" in options)) throw new Error("Invalid IV parameter.");
    // use IV as first input
    this._iv = $af0ace6aa46df127$var$transformIV(options.iv, this.blockSize);
    this._inBlock = this._iv.slice(0);
    this._partialBytes = 0;
};
$af0ace6aa46df127$var$modes.ctr.prototype.encrypt = function(input, output, finish) {
    // not enough input to encrypt
    var inputLength = input.length();
    if (inputLength === 0) return true;
    // encrypt block (CTR always uses encryption mode)
    this.cipher.encrypt(this._inBlock, this._outBlock);
    // handle full block
    if (this._partialBytes === 0 && inputLength >= this.blockSize) // XOR input with output
    for(var i = 0; i < this._ints; ++i)output.putInt32(input.getInt32() ^ this._outBlock[i]);
    else {
        // handle partial block
        var partialBytes = (this.blockSize - inputLength) % this.blockSize;
        if (partialBytes > 0) partialBytes = this.blockSize - partialBytes;
        // XOR input with output
        this._partialOutput.clear();
        for(var i = 0; i < this._ints; ++i)this._partialOutput.putInt32(input.getInt32() ^ this._outBlock[i]);
        if (partialBytes > 0) // block still incomplete, restore input buffer
        input.read -= this.blockSize;
        // skip any previous partial bytes
        if (this._partialBytes > 0) this._partialOutput.getBytes(this._partialBytes);
        if (partialBytes > 0 && !finish) {
            output.putBytes(this._partialOutput.getBytes(partialBytes - this._partialBytes));
            this._partialBytes = partialBytes;
            return true;
        }
        output.putBytes(this._partialOutput.getBytes(inputLength - this._partialBytes));
        this._partialBytes = 0;
    }
    // block complete, increment counter (input block)
    $af0ace6aa46df127$var$inc32(this._inBlock);
};
$af0ace6aa46df127$var$modes.ctr.prototype.decrypt = $af0ace6aa46df127$var$modes.ctr.prototype.encrypt;
/** Galois/Counter Mode (GCM) **/ $af0ace6aa46df127$var$modes.gcm = function(options) {
    options = options || {};
    this.name = "GCM";
    this.cipher = options.cipher;
    this.blockSize = options.blockSize || 16;
    this._ints = this.blockSize / 4;
    this._inBlock = new Array(this._ints);
    this._outBlock = new Array(this._ints);
    this._partialOutput = $aX5SS.util.createBuffer();
    this._partialBytes = 0;
    // R is actually this value concatenated with 120 more zero bits, but
    // we only XOR against R so the other zeros have no effect -- we just
    // apply this value to the first integer in a block
    this._R = 0xE1000000;
};
$af0ace6aa46df127$var$modes.gcm.prototype.start = function(options) {
    if (!("iv" in options)) throw new Error("Invalid IV parameter.");
    // ensure IV is a byte buffer
    var iv = $aX5SS.util.createBuffer(options.iv);
    // no ciphered data processed yet
    this._cipherLength = 0;
    // default additional data is none
    var additionalData;
    if ("additionalData" in options) additionalData = $aX5SS.util.createBuffer(options.additionalData);
    else additionalData = $aX5SS.util.createBuffer();
    // default tag length is 128 bits
    if ("tagLength" in options) this._tagLength = options.tagLength;
    else this._tagLength = 128;
    // if tag is given, ensure tag matches tag length
    this._tag = null;
    if (options.decrypt) {
        // save tag to check later
        this._tag = $aX5SS.util.createBuffer(options.tag).getBytes();
        if (this._tag.length !== this._tagLength / 8) throw new Error("Authentication tag does not match tag length.");
    }
    // create tmp storage for hash calculation
    this._hashBlock = new Array(this._ints);
    // no tag generated yet
    this.tag = null;
    // generate hash subkey
    // (apply block cipher to "zero" block)
    this._hashSubkey = new Array(this._ints);
    this.cipher.encrypt([
        0,
        0,
        0,
        0
    ], this._hashSubkey);
    // generate table M
    // use 4-bit tables (32 component decomposition of a 16 byte value)
    // 8-bit tables take more space and are known to have security
    // vulnerabilities (in native implementations)
    this.componentBits = 4;
    this._m = this.generateHashTable(this._hashSubkey, this.componentBits);
    // Note: support IV length different from 96 bits? (only supporting
    // 96 bits is recommended by NIST SP-800-38D)
    // generate J_0
    var ivLength = iv.length();
    if (ivLength === 12) // 96-bit IV
    this._j0 = [
        iv.getInt32(),
        iv.getInt32(),
        iv.getInt32(),
        1
    ];
    else {
        // IV is NOT 96-bits
        this._j0 = [
            0,
            0,
            0,
            0
        ];
        while(iv.length() > 0)this._j0 = this.ghash(this._hashSubkey, this._j0, [
            iv.getInt32(),
            iv.getInt32(),
            iv.getInt32(),
            iv.getInt32()
        ]);
        this._j0 = this.ghash(this._hashSubkey, this._j0, [
            0,
            0
        ].concat($af0ace6aa46df127$var$from64To32(ivLength * 8)));
    }
    // generate ICB (initial counter block)
    this._inBlock = this._j0.slice(0);
    $af0ace6aa46df127$var$inc32(this._inBlock);
    this._partialBytes = 0;
    // consume authentication data
    additionalData = $aX5SS.util.createBuffer(additionalData);
    // save additional data length as a BE 64-bit number
    this._aDataLength = $af0ace6aa46df127$var$from64To32(additionalData.length() * 8);
    // pad additional data to 128 bit (16 byte) block size
    var overflow = additionalData.length() % this.blockSize;
    if (overflow) additionalData.fillWithByte(0, this.blockSize - overflow);
    this._s = [
        0,
        0,
        0,
        0
    ];
    while(additionalData.length() > 0)this._s = this.ghash(this._hashSubkey, this._s, [
        additionalData.getInt32(),
        additionalData.getInt32(),
        additionalData.getInt32(),
        additionalData.getInt32()
    ]);
};
$af0ace6aa46df127$var$modes.gcm.prototype.encrypt = function(input, output, finish) {
    // not enough input to encrypt
    var inputLength = input.length();
    if (inputLength === 0) return true;
    // encrypt block
    this.cipher.encrypt(this._inBlock, this._outBlock);
    // handle full block
    if (this._partialBytes === 0 && inputLength >= this.blockSize) {
        // XOR input with output
        for(var i = 0; i < this._ints; ++i)output.putInt32(this._outBlock[i] ^= input.getInt32());
        this._cipherLength += this.blockSize;
    } else {
        // handle partial block
        var partialBytes = (this.blockSize - inputLength) % this.blockSize;
        if (partialBytes > 0) partialBytes = this.blockSize - partialBytes;
        // XOR input with output
        this._partialOutput.clear();
        for(var i = 0; i < this._ints; ++i)this._partialOutput.putInt32(input.getInt32() ^ this._outBlock[i]);
        if (partialBytes <= 0 || finish) {
            // handle overflow prior to hashing
            if (finish) {
                // get block overflow
                var overflow = inputLength % this.blockSize;
                this._cipherLength += overflow;
                // truncate for hash function
                this._partialOutput.truncate(this.blockSize - overflow);
            } else this._cipherLength += this.blockSize;
            // get output block for hashing
            for(var i = 0; i < this._ints; ++i)this._outBlock[i] = this._partialOutput.getInt32();
            this._partialOutput.read -= this.blockSize;
        }
        // skip any previous partial bytes
        if (this._partialBytes > 0) this._partialOutput.getBytes(this._partialBytes);
        if (partialBytes > 0 && !finish) {
            // block still incomplete, restore input buffer, get partial output,
            // and return early
            input.read -= this.blockSize;
            output.putBytes(this._partialOutput.getBytes(partialBytes - this._partialBytes));
            this._partialBytes = partialBytes;
            return true;
        }
        output.putBytes(this._partialOutput.getBytes(inputLength - this._partialBytes));
        this._partialBytes = 0;
    }
    // update hash block S
    this._s = this.ghash(this._hashSubkey, this._s, this._outBlock);
    // increment counter (input block)
    $af0ace6aa46df127$var$inc32(this._inBlock);
};
$af0ace6aa46df127$var$modes.gcm.prototype.decrypt = function(input, output, finish) {
    // not enough input to decrypt
    var inputLength = input.length();
    if (inputLength < this.blockSize && !(finish && inputLength > 0)) return true;
    // encrypt block (GCM always uses encryption mode)
    this.cipher.encrypt(this._inBlock, this._outBlock);
    // increment counter (input block)
    $af0ace6aa46df127$var$inc32(this._inBlock);
    // update hash block S
    this._hashBlock[0] = input.getInt32();
    this._hashBlock[1] = input.getInt32();
    this._hashBlock[2] = input.getInt32();
    this._hashBlock[3] = input.getInt32();
    this._s = this.ghash(this._hashSubkey, this._s, this._hashBlock);
    // XOR hash input with output
    for(var i = 0; i < this._ints; ++i)output.putInt32(this._outBlock[i] ^ this._hashBlock[i]);
    // increment cipher data length
    if (inputLength < this.blockSize) this._cipherLength += inputLength % this.blockSize;
    else this._cipherLength += this.blockSize;
};
$af0ace6aa46df127$var$modes.gcm.prototype.afterFinish = function(output, options) {
    var rval = true;
    // handle overflow
    if (options.decrypt && options.overflow) output.truncate(this.blockSize - options.overflow);
    // handle authentication tag
    this.tag = $aX5SS.util.createBuffer();
    // concatenate additional data length with cipher length
    var lengths = this._aDataLength.concat($af0ace6aa46df127$var$from64To32(this._cipherLength * 8));
    // include lengths in hash
    this._s = this.ghash(this._hashSubkey, this._s, lengths);
    // do GCTR(J_0, S)
    var tag = [];
    this.cipher.encrypt(this._j0, tag);
    for(var i = 0; i < this._ints; ++i)this.tag.putInt32(this._s[i] ^ tag[i]);
    // trim tag to length
    this.tag.truncate(this.tag.length() % (this._tagLength / 8));
    // check authentication tag
    if (options.decrypt && this.tag.bytes() !== this._tag) rval = false;
    return rval;
};
/**
 * See NIST SP-800-38D 6.3 (Algorithm 1). This function performs Galois
 * field multiplication. The field, GF(2^128), is defined by the polynomial:
 *
 * x^128 + x^7 + x^2 + x + 1
 *
 * Which is represented in little-endian binary form as: 11100001 (0xe1). When
 * the value of a coefficient is 1, a bit is set. The value R, is the
 * concatenation of this value and 120 zero bits, yielding a 128-bit value
 * which matches the block size.
 *
 * This function will multiply two elements (vectors of bytes), X and Y, in
 * the field GF(2^128). The result is initialized to zero. For each bit of
 * X (out of 128), x_i, if x_i is set, then the result is multiplied (XOR'd)
 * by the current value of Y. For each bit, the value of Y will be raised by
 * a power of x (multiplied by the polynomial x). This can be achieved by
 * shifting Y once to the right. If the current value of Y, prior to being
 * multiplied by x, has 0 as its LSB, then it is a 127th degree polynomial.
 * Otherwise, we must divide by R after shifting to find the remainder.
 *
 * @param x the first block to multiply by the second.
 * @param y the second block to multiply by the first.
 *
 * @return the block result of the multiplication.
 */ $af0ace6aa46df127$var$modes.gcm.prototype.multiply = function(x, y) {
    var z_i = [
        0,
        0,
        0,
        0
    ];
    var v_i = y.slice(0);
    // calculate Z_128 (block has 128 bits)
    for(var i = 0; i < 128; ++i){
        // if x_i is 0, Z_{i+1} = Z_i (unchanged)
        // else Z_{i+1} = Z_i ^ V_i
        // get x_i by finding 32-bit int position, then left shift 1 by remainder
        var x_i = x[i / 32 | 0] & 1 << 31 - i % 32;
        if (x_i) {
            z_i[0] ^= v_i[0];
            z_i[1] ^= v_i[1];
            z_i[2] ^= v_i[2];
            z_i[3] ^= v_i[3];
        }
        // if LSB(V_i) is 1, V_i = V_i >> 1
        // else V_i = (V_i >> 1) ^ R
        this.pow(v_i, v_i);
    }
    return z_i;
};
$af0ace6aa46df127$var$modes.gcm.prototype.pow = function(x, out) {
    // if LSB(x) is 1, x = x >>> 1
    // else x = (x >>> 1) ^ R
    var lsb = x[3] & 1;
    // always do x >>> 1:
    // starting with the rightmost integer, shift each integer to the right
    // one bit, pulling in the bit from the integer to the left as its top
    // most bit (do this for the last 3 integers)
    for(var i = 3; i > 0; --i)out[i] = x[i] >>> 1 | (x[i - 1] & 1) << 31;
    // shift the first integer normally
    out[0] = x[0] >>> 1;
    // if lsb was not set, then polynomial had a degree of 127 and doesn't
    // need to divided; otherwise, XOR with R to find the remainder; we only
    // need to XOR the first integer since R technically ends w/120 zero bits
    if (lsb) out[0] ^= this._R;
};
$af0ace6aa46df127$var$modes.gcm.prototype.tableMultiply = function(x) {
    // assumes 4-bit tables are used
    var z = [
        0,
        0,
        0,
        0
    ];
    for(var i = 0; i < 32; ++i){
        var idx = i / 8 | 0;
        var x_i = x[idx] >>> (7 - i % 8) * 4 & 0xF;
        var ah = this._m[i][x_i];
        z[0] ^= ah[0];
        z[1] ^= ah[1];
        z[2] ^= ah[2];
        z[3] ^= ah[3];
    }
    return z;
};
/**
 * A continuing version of the GHASH algorithm that operates on a single
 * block. The hash block, last hash value (Ym) and the new block to hash
 * are given.
 *
 * @param h the hash block.
 * @param y the previous value for Ym, use [0, 0, 0, 0] for a new hash.
 * @param x the block to hash.
 *
 * @return the hashed value (Ym).
 */ $af0ace6aa46df127$var$modes.gcm.prototype.ghash = function(h, y, x) {
    y[0] ^= x[0];
    y[1] ^= x[1];
    y[2] ^= x[2];
    y[3] ^= x[3];
    return this.tableMultiply(y);
//return this.multiply(y, h);
};
/**
 * Precomputes a table for multiplying against the hash subkey. This
 * mechanism provides a substantial speed increase over multiplication
 * performed without a table. The table-based multiplication this table is
 * for solves X * H by multiplying each component of X by H and then
 * composing the results together using XOR.
 *
 * This function can be used to generate tables with different bit sizes
 * for the components, however, this implementation assumes there are
 * 32 components of X (which is a 16 byte vector), therefore each component
 * takes 4-bits (so the table is constructed with bits=4).
 *
 * @param h the hash subkey.
 * @param bits the bit size for a component.
 */ $af0ace6aa46df127$var$modes.gcm.prototype.generateHashTable = function(h, bits) {
    // TODO: There are further optimizations that would use only the
    // first table M_0 (or some variant) along with a remainder table;
    // this can be explored in the future
    var multiplier = 8 / bits;
    var perInt = 4 * multiplier;
    var size = 16 * multiplier;
    var m = new Array(size);
    for(var i = 0; i < size; ++i){
        var tmp = [
            0,
            0,
            0,
            0
        ];
        var idx = i / perInt | 0;
        var shft = (perInt - 1 - i % perInt) * bits;
        tmp[idx] = 1 << bits - 1 << shft;
        m[i] = this.generateSubHashTable(this.multiply(tmp, h), bits);
    }
    return m;
};
/**
 * Generates a table for multiplying against the hash subkey for one
 * particular component (out of all possible component values).
 *
 * @param mid the pre-multiplied value for the middle key of the table.
 * @param bits the bit size for a component.
 */ $af0ace6aa46df127$var$modes.gcm.prototype.generateSubHashTable = function(mid, bits) {
    // compute the table quickly by minimizing the number of
    // POW operations -- they only need to be performed for powers of 2,
    // all other entries can be composed from those powers using XOR
    var size = 1 << bits;
    var half = size >>> 1;
    var m = new Array(size);
    m[half] = mid.slice(0);
    var i = half >>> 1;
    while(i > 0){
        // raise m0[2 * i] and store in m0[i]
        this.pow(m[2 * i], m[i] = []);
        i >>= 1;
    }
    i = 2;
    while(i < half){
        for(var j = 1; j < i; ++j){
            var m_i = m[i];
            var m_j = m[j];
            m[i + j] = [
                m_i[0] ^ m_j[0],
                m_i[1] ^ m_j[1],
                m_i[2] ^ m_j[2],
                m_i[3] ^ m_j[3]
            ];
        }
        i *= 2;
    }
    m[0] = [
        0,
        0,
        0,
        0
    ];
    /* Note: We could avoid storing these by doing composition during multiply
  calculate top half using composition by speed is preferred. */ for(i = half + 1; i < size; ++i){
        var c = m[i ^ half];
        m[i] = [
            mid[0] ^ c[0],
            mid[1] ^ c[1],
            mid[2] ^ c[2],
            mid[3] ^ c[3]
        ];
    }
    return m;
};
/** Utility functions */ function $af0ace6aa46df127$var$transformIV(iv, blockSize) {
    if (typeof iv === "string") // convert iv string into byte buffer
    iv = $aX5SS.util.createBuffer(iv);
    if ($aX5SS.util.isArray(iv) && iv.length > 4) {
        // convert iv byte array into byte buffer
        var tmp = iv;
        iv = $aX5SS.util.createBuffer();
        for(var i = 0; i < tmp.length; ++i)iv.putByte(tmp[i]);
    }
    if (iv.length() < blockSize) throw new Error("Invalid IV length; got " + iv.length() + " bytes and expected " + blockSize + " bytes.");
    if (!$aX5SS.util.isArray(iv)) {
        // convert iv byte buffer into 32-bit integer array
        var ints = [];
        var blocks = blockSize / 4;
        for(var i = 0; i < blocks; ++i)ints.push(iv.getInt32());
        iv = ints;
    }
    return iv;
}
function $af0ace6aa46df127$var$inc32(block) {
    // increment last 32 bits of block only
    block[block.length - 1] = block[block.length - 1] + 1 & 0xFFFFFFFF;
}
function $af0ace6aa46df127$var$from64To32(num) {
    // convert 64-bit number to two BE Int32s
    return [
        num / 0x100000000 | 0,
        num & 0xFFFFFFFF
    ];
}



/* AES API */ $c4523369f79044c5$exports = $aX5SS.aes = $aX5SS.aes || {};
/**
 * Deprecated. Instead, use:
 *
 * var cipher = forge.cipher.createCipher('AES-<mode>', key);
 * cipher.start({iv: iv});
 *
 * Creates an AES cipher object to encrypt data using the given symmetric key.
 * The output will be stored in the 'output' member of the returned cipher.
 *
 * The key and iv may be given as a string of bytes, an array of bytes,
 * a byte buffer, or an array of 32-bit words.
 *
 * @param key the symmetric key to use.
 * @param iv the initialization vector to use.
 * @param output the buffer to write to, null to create one.
 * @param mode the cipher mode to use (default: 'CBC').
 *
 * @return the cipher.
 */ $aX5SS.aes.startEncrypting = function(key, iv, output, mode) {
    var cipher = $c4523369f79044c5$var$_createCipher({
        key: key,
        output: output,
        decrypt: false,
        mode: mode
    });
    cipher.start(iv);
    return cipher;
};
/**
 * Deprecated. Instead, use:
 *
 * var cipher = forge.cipher.createCipher('AES-<mode>', key);
 *
 * Creates an AES cipher object to encrypt data using the given symmetric key.
 *
 * The key may be given as a string of bytes, an array of bytes, a
 * byte buffer, or an array of 32-bit words.
 *
 * @param key the symmetric key to use.
 * @param mode the cipher mode to use (default: 'CBC').
 *
 * @return the cipher.
 */ $aX5SS.aes.createEncryptionCipher = function(key, mode) {
    return $c4523369f79044c5$var$_createCipher({
        key: key,
        output: null,
        decrypt: false,
        mode: mode
    });
};
/**
 * Deprecated. Instead, use:
 *
 * var decipher = forge.cipher.createDecipher('AES-<mode>', key);
 * decipher.start({iv: iv});
 *
 * Creates an AES cipher object to decrypt data using the given symmetric key.
 * The output will be stored in the 'output' member of the returned cipher.
 *
 * The key and iv may be given as a string of bytes, an array of bytes,
 * a byte buffer, or an array of 32-bit words.
 *
 * @param key the symmetric key to use.
 * @param iv the initialization vector to use.
 * @param output the buffer to write to, null to create one.
 * @param mode the cipher mode to use (default: 'CBC').
 *
 * @return the cipher.
 */ $aX5SS.aes.startDecrypting = function(key, iv, output, mode) {
    var cipher = $c4523369f79044c5$var$_createCipher({
        key: key,
        output: output,
        decrypt: true,
        mode: mode
    });
    cipher.start(iv);
    return cipher;
};
/**
 * Deprecated. Instead, use:
 *
 * var decipher = forge.cipher.createDecipher('AES-<mode>', key);
 *
 * Creates an AES cipher object to decrypt data using the given symmetric key.
 *
 * The key may be given as a string of bytes, an array of bytes, a
 * byte buffer, or an array of 32-bit words.
 *
 * @param key the symmetric key to use.
 * @param mode the cipher mode to use (default: 'CBC').
 *
 * @return the cipher.
 */ $aX5SS.aes.createDecryptionCipher = function(key, mode) {
    return $c4523369f79044c5$var$_createCipher({
        key: key,
        output: null,
        decrypt: true,
        mode: mode
    });
};
/**
 * Creates a new AES cipher algorithm object.
 *
 * @param name the name of the algorithm.
 * @param mode the mode factory function.
 *
 * @return the AES algorithm object.
 */ $aX5SS.aes.Algorithm = function(name, mode) {
    if (!$c4523369f79044c5$var$init) $c4523369f79044c5$var$initialize();
    var self = this;
    self.name = name;
    self.mode = new mode({
        blockSize: 16,
        cipher: {
            encrypt: function(inBlock, outBlock) {
                return $c4523369f79044c5$var$_updateBlock(self._w, inBlock, outBlock, false);
            },
            decrypt: function(inBlock, outBlock) {
                return $c4523369f79044c5$var$_updateBlock(self._w, inBlock, outBlock, true);
            }
        }
    });
    self._init = false;
};
/**
 * Initializes this AES algorithm by expanding its key.
 *
 * @param options the options to use.
 *          key the key to use with this algorithm.
 *          decrypt true if the algorithm should be initialized for decryption,
 *            false for encryption.
 */ $aX5SS.aes.Algorithm.prototype.initialize = function(options) {
    if (this._init) return;
    var key = options.key;
    var tmp;
    /* Note: The key may be a string of bytes, an array of bytes, a byte
    buffer, or an array of 32-bit integers. If the key is in bytes, then
    it must be 16, 24, or 32 bytes in length. If it is in 32-bit
    integers, it must be 4, 6, or 8 integers long. */ if (typeof key === "string" && (key.length === 16 || key.length === 24 || key.length === 32)) // convert key string into byte buffer
    key = $aX5SS.util.createBuffer(key);
    else if ($aX5SS.util.isArray(key) && (key.length === 16 || key.length === 24 || key.length === 32)) {
        // convert key integer array into byte buffer
        tmp = key;
        key = $aX5SS.util.createBuffer();
        for(var i = 0; i < tmp.length; ++i)key.putByte(tmp[i]);
    }
    // convert key byte buffer into 32-bit integer array
    if (!$aX5SS.util.isArray(key)) {
        tmp = key;
        key = [];
        // key lengths of 16, 24, 32 bytes allowed
        var len = tmp.length();
        if (len === 16 || len === 24 || len === 32) {
            len = len >>> 2;
            for(var i = 0; i < len; ++i)key.push(tmp.getInt32());
        }
    }
    // key must be an array of 32-bit integers by now
    if (!$aX5SS.util.isArray(key) || !(key.length === 4 || key.length === 6 || key.length === 8)) throw new Error("Invalid key parameter.");
    // encryption operation is always used for these modes
    var mode = this.mode.name;
    var encryptOp = [
        "CFB",
        "OFB",
        "CTR",
        "GCM"
    ].indexOf(mode) !== -1;
    // do key expansion
    this._w = $c4523369f79044c5$var$_expandKey(key, options.decrypt && !encryptOp);
    this._init = true;
};
/**
 * Expands a key. Typically only used for testing.
 *
 * @param key the symmetric key to expand, as an array of 32-bit words.
 * @param decrypt true to expand for decryption, false for encryption.
 *
 * @return the expanded key.
 */ $aX5SS.aes._expandKey = function(key, decrypt) {
    if (!$c4523369f79044c5$var$init) $c4523369f79044c5$var$initialize();
    return $c4523369f79044c5$var$_expandKey(key, decrypt);
};
/**
 * Updates a single block. Typically only used for testing.
 *
 * @param w the expanded key to use.
 * @param input an array of block-size 32-bit words.
 * @param output an array of block-size 32-bit words.
 * @param decrypt true to decrypt, false to encrypt.
 */ $aX5SS.aes._updateBlock = $c4523369f79044c5$var$_updateBlock;
/** Register AES algorithms **/ $c4523369f79044c5$var$registerAlgorithm("AES-ECB", $aX5SS.cipher.modes.ecb);
$c4523369f79044c5$var$registerAlgorithm("AES-CBC", $aX5SS.cipher.modes.cbc);
$c4523369f79044c5$var$registerAlgorithm("AES-CFB", $aX5SS.cipher.modes.cfb);
$c4523369f79044c5$var$registerAlgorithm("AES-OFB", $aX5SS.cipher.modes.ofb);
$c4523369f79044c5$var$registerAlgorithm("AES-CTR", $aX5SS.cipher.modes.ctr);
$c4523369f79044c5$var$registerAlgorithm("AES-GCM", $aX5SS.cipher.modes.gcm);
function $c4523369f79044c5$var$registerAlgorithm(name, mode) {
    var factory = function() {
        return new $aX5SS.aes.Algorithm(name, mode);
    };
    $aX5SS.cipher.registerAlgorithm(name, factory);
}
/** AES implementation **/ var $c4523369f79044c5$var$init = false; // not yet initialized
var $c4523369f79044c5$var$Nb = 4; // number of words comprising the state (AES = 4)
var $c4523369f79044c5$var$sbox; // non-linear substitution table used in key expansion
var $c4523369f79044c5$var$isbox; // inversion of sbox
var $c4523369f79044c5$var$rcon; // round constant word array
var $c4523369f79044c5$var$mix; // mix-columns table
var $c4523369f79044c5$var$imix; // inverse mix-columns table
/**
 * Performs initialization, ie: precomputes tables to optimize for speed.
 *
 * One way to understand how AES works is to imagine that 'addition' and
 * 'multiplication' are interfaces that require certain mathematical
 * properties to hold true (ie: they are associative) but they might have
 * different implementations and produce different kinds of results ...
 * provided that their mathematical properties remain true. AES defines
 * its own methods of addition and multiplication but keeps some important
 * properties the same, ie: associativity and distributivity. The
 * explanation below tries to shed some light on how AES defines addition
 * and multiplication of bytes and 32-bit words in order to perform its
 * encryption and decryption algorithms.
 *
 * The basics:
 *
 * The AES algorithm views bytes as binary representations of polynomials
 * that have either 1 or 0 as the coefficients. It defines the addition
 * or subtraction of two bytes as the XOR operation. It also defines the
 * multiplication of two bytes as a finite field referred to as GF(2^8)
 * (Note: 'GF' means "Galois Field" which is a field that contains a finite
 * number of elements so GF(2^8) has 256 elements).
 *
 * This means that any two bytes can be represented as binary polynomials;
 * when they multiplied together and modularly reduced by an irreducible
 * polynomial of the 8th degree, the results are the field GF(2^8). The
 * specific irreducible polynomial that AES uses in hexadecimal is 0x11b.
 * This multiplication is associative with 0x01 as the identity:
 *
 * (b * 0x01 = GF(b, 0x01) = b).
 *
 * The operation GF(b, 0x02) can be performed at the byte level by left
 * shifting b once and then XOR'ing it (to perform the modular reduction)
 * with 0x11b if b is >= 128. Repeated application of the multiplication
 * of 0x02 can be used to implement the multiplication of any two bytes.
 *
 * For instance, multiplying 0x57 and 0x13, denoted as GF(0x57, 0x13), can
 * be performed by factoring 0x13 into 0x01, 0x02, and 0x10. Then these
 * factors can each be multiplied by 0x57 and then added together. To do
 * the multiplication, values for 0x57 multiplied by each of these 3 factors
 * can be precomputed and stored in a table. To add them, the values from
 * the table are XOR'd together.
 *
 * AES also defines addition and multiplication of words, that is 4-byte
 * numbers represented as polynomials of 3 degrees where the coefficients
 * are the values of the bytes.
 *
 * The word [a0, a1, a2, a3] is a polynomial a3x^3 + a2x^2 + a1x + a0.
 *
 * Addition is performed by XOR'ing like powers of x. Multiplication
 * is performed in two steps, the first is an algebriac expansion as
 * you would do normally (where addition is XOR). But the result is
 * a polynomial larger than 3 degrees and thus it cannot fit in a word. So
 * next the result is modularly reduced by an AES-specific polynomial of
 * degree 4 which will always produce a polynomial of less than 4 degrees
 * such that it will fit in a word. In AES, this polynomial is x^4 + 1.
 *
 * The modular product of two polynomials 'a' and 'b' is thus:
 *
 * d(x) = d3x^3 + d2x^2 + d1x + d0
 * with
 * d0 = GF(a0, b0) ^ GF(a3, b1) ^ GF(a2, b2) ^ GF(a1, b3)
 * d1 = GF(a1, b0) ^ GF(a0, b1) ^ GF(a3, b2) ^ GF(a2, b3)
 * d2 = GF(a2, b0) ^ GF(a1, b1) ^ GF(a0, b2) ^ GF(a3, b3)
 * d3 = GF(a3, b0) ^ GF(a2, b1) ^ GF(a1, b2) ^ GF(a0, b3)
 *
 * As a matrix:
 *
 * [d0] = [a0 a3 a2 a1][b0]
 * [d1]   [a1 a0 a3 a2][b1]
 * [d2]   [a2 a1 a0 a3][b2]
 * [d3]   [a3 a2 a1 a0][b3]
 *
 * Special polynomials defined by AES (0x02 == {02}):
 * a(x)    = {03}x^3 + {01}x^2 + {01}x + {02}
 * a^-1(x) = {0b}x^3 + {0d}x^2 + {09}x + {0e}.
 *
 * These polynomials are used in the MixColumns() and InverseMixColumns()
 * operations, respectively, to cause each element in the state to affect
 * the output (referred to as diffusing).
 *
 * RotWord() uses: a0 = a1 = a2 = {00} and a3 = {01}, which is the
 * polynomial x3.
 *
 * The ShiftRows() method modifies the last 3 rows in the state (where
 * the state is 4 words with 4 bytes per word) by shifting bytes cyclically.
 * The 1st byte in the second row is moved to the end of the row. The 1st
 * and 2nd bytes in the third row are moved to the end of the row. The 1st,
 * 2nd, and 3rd bytes are moved in the fourth row.
 *
 * More details on how AES arithmetic works:
 *
 * In the polynomial representation of binary numbers, XOR performs addition
 * and subtraction and multiplication in GF(2^8) denoted as GF(a, b)
 * corresponds with the multiplication of polynomials modulo an irreducible
 * polynomial of degree 8. In other words, for AES, GF(a, b) will multiply
 * polynomial 'a' with polynomial 'b' and then do a modular reduction by
 * an AES-specific irreducible polynomial of degree 8.
 *
 * A polynomial is irreducible if its only divisors are one and itself. For
 * the AES algorithm, this irreducible polynomial is:
 *
 * m(x) = x^8 + x^4 + x^3 + x + 1,
 *
 * or {01}{1b} in hexadecimal notation, where each coefficient is a bit:
 * 100011011 = 283 = 0x11b.
 *
 * For example, GF(0x57, 0x83) = 0xc1 because
 *
 * 0x57 = 87  = 01010111 = x^6 + x^4 + x^2 + x + 1
 * 0x85 = 131 = 10000101 = x^7 + x + 1
 *
 * (x^6 + x^4 + x^2 + x + 1) * (x^7 + x + 1)
 * =  x^13 + x^11 + x^9 + x^8 + x^7 +
 *    x^7 + x^5 + x^3 + x^2 + x +
 *    x^6 + x^4 + x^2 + x + 1
 * =  x^13 + x^11 + x^9 + x^8 + x^6 + x^5 + x^4 + x^3 + 1 = y
 *    y modulo (x^8 + x^4 + x^3 + x + 1)
 * =  x^7 + x^6 + 1.
 *
 * The modular reduction by m(x) guarantees the result will be a binary
 * polynomial of less than degree 8, so that it can fit in a byte.
 *
 * The operation to multiply a binary polynomial b with x (the polynomial
 * x in binary representation is 00000010) is:
 *
 * b_7x^8 + b_6x^7 + b_5x^6 + b_4x^5 + b_3x^4 + b_2x^3 + b_1x^2 + b_0x^1
 *
 * To get GF(b, x) we must reduce that by m(x). If b_7 is 0 (that is the
 * most significant bit is 0 in b) then the result is already reduced. If
 * it is 1, then we can reduce it by subtracting m(x) via an XOR.
 *
 * It follows that multiplication by x (00000010 or 0x02) can be implemented
 * by performing a left shift followed by a conditional bitwise XOR with
 * 0x1b. This operation on bytes is denoted by xtime(). Multiplication by
 * higher powers of x can be implemented by repeated application of xtime().
 *
 * By adding intermediate results, multiplication by any constant can be
 * implemented. For instance:
 *
 * GF(0x57, 0x13) = 0xfe because:
 *
 * xtime(b) = (b & 128) ? (b << 1 ^ 0x11b) : (b << 1)
 *
 * Note: We XOR with 0x11b instead of 0x1b because in javascript our
 * datatype for b can be larger than 1 byte, so a left shift will not
 * automatically eliminate bits that overflow a byte ... by XOR'ing the
 * overflow bit with 1 (the extra one from 0x11b) we zero it out.
 *
 * GF(0x57, 0x02) = xtime(0x57) = 0xae
 * GF(0x57, 0x04) = xtime(0xae) = 0x47
 * GF(0x57, 0x08) = xtime(0x47) = 0x8e
 * GF(0x57, 0x10) = xtime(0x8e) = 0x07
 *
 * GF(0x57, 0x13) = GF(0x57, (0x01 ^ 0x02 ^ 0x10))
 *
 * And by the distributive property (since XOR is addition and GF() is
 * multiplication):
 *
 * = GF(0x57, 0x01) ^ GF(0x57, 0x02) ^ GF(0x57, 0x10)
 * = 0x57 ^ 0xae ^ 0x07
 * = 0xfe.
 */ function $c4523369f79044c5$var$initialize() {
    $c4523369f79044c5$var$init = true;
    /* Populate the Rcon table. These are the values given by
    [x^(i-1),{00},{00},{00}] where x^(i-1) are powers of x (and x = 0x02)
    in the field of GF(2^8), where i starts at 1.

    rcon[0] = [0x00, 0x00, 0x00, 0x00]
    rcon[1] = [0x01, 0x00, 0x00, 0x00] 2^(1-1) = 2^0 = 1
    rcon[2] = [0x02, 0x00, 0x00, 0x00] 2^(2-1) = 2^1 = 2
    ...
    rcon[9]  = [0x1B, 0x00, 0x00, 0x00] 2^(9-1)  = 2^8 = 0x1B
    rcon[10] = [0x36, 0x00, 0x00, 0x00] 2^(10-1) = 2^9 = 0x36

    We only store the first byte because it is the only one used.
  */ $c4523369f79044c5$var$rcon = [
        0x00,
        0x01,
        0x02,
        0x04,
        0x08,
        0x10,
        0x20,
        0x40,
        0x80,
        0x1B,
        0x36
    ];
    // compute xtime table which maps i onto GF(i, 0x02)
    var xtime = new Array(256);
    for(var i = 0; i < 128; ++i){
        xtime[i] = i << 1;
        xtime[i + 128] = i + 128 << 1 ^ 0x11B;
    }
    // compute all other tables
    $c4523369f79044c5$var$sbox = new Array(256);
    $c4523369f79044c5$var$isbox = new Array(256);
    $c4523369f79044c5$var$mix = new Array(4);
    $c4523369f79044c5$var$imix = new Array(4);
    for(var i = 0; i < 4; ++i){
        $c4523369f79044c5$var$mix[i] = new Array(256);
        $c4523369f79044c5$var$imix[i] = new Array(256);
    }
    var e = 0, ei = 0, e2, e4, e8, sx, sx2, me, ime;
    for(var i = 0; i < 256; ++i){
        /* We need to generate the SubBytes() sbox and isbox tables so that
      we can perform byte substitutions. This requires us to traverse
      all of the elements in GF, find their multiplicative inverses,
      and apply to each the following affine transformation:

      bi' = bi ^ b(i + 4) mod 8 ^ b(i + 5) mod 8 ^ b(i + 6) mod 8 ^
            b(i + 7) mod 8 ^ ci
      for 0 <= i < 8, where bi is the ith bit of the byte, and ci is the
      ith bit of a byte c with the value {63} or {01100011}.

      It is possible to traverse every possible value in a Galois field
      using what is referred to as a 'generator'. There are many
      generators (128 out of 256): 3,5,6,9,11,82 to name a few. To fully
      traverse GF we iterate 255 times, multiplying by our generator
      each time.

      On each iteration we can determine the multiplicative inverse for
      the current element.

      Suppose there is an element in GF 'e'. For a given generator 'g',
      e = g^x. The multiplicative inverse of e is g^(255 - x). It turns
      out that if use the inverse of a generator as another generator
      it will produce all of the corresponding multiplicative inverses
      at the same time. For this reason, we choose 5 as our inverse
      generator because it only requires 2 multiplies and 1 add and its
      inverse, 82, requires relatively few operations as well.

      In order to apply the affine transformation, the multiplicative
      inverse 'ei' of 'e' can be repeatedly XOR'd (4 times) with a
      bit-cycling of 'ei'. To do this 'ei' is first stored in 's' and
      'x'. Then 's' is left shifted and the high bit of 's' is made the
      low bit. The resulting value is stored in 's'. Then 'x' is XOR'd
      with 's' and stored in 'x'. On each subsequent iteration the same
      operation is performed. When 4 iterations are complete, 'x' is
      XOR'd with 'c' (0x63) and the transformed value is stored in 'x'.
      For example:

      s = 01000001
      x = 01000001

      iteration 1: s = 10000010, x ^= s
      iteration 2: s = 00000101, x ^= s
      iteration 3: s = 00001010, x ^= s
      iteration 4: s = 00010100, x ^= s
      x ^= 0x63

      This can be done with a loop where s = (s << 1) | (s >> 7). However,
      it can also be done by using a single 16-bit (in this case 32-bit)
      number 'sx'. Since XOR is an associative operation, we can set 'sx'
      to 'ei' and then XOR it with 'sx' left-shifted 1,2,3, and 4 times.
      The most significant bits will flow into the high 8 bit positions
      and be correctly XOR'd with one another. All that remains will be
      to cycle the high 8 bits by XOR'ing them all with the lower 8 bits
      afterwards.

      At the same time we're populating sbox and isbox we can precompute
      the multiplication we'll need to do to do MixColumns() later.
    */ // apply affine transformation
        sx = ei ^ ei << 1 ^ ei << 2 ^ ei << 3 ^ ei << 4;
        sx = sx >> 8 ^ sx & 255 ^ 0x63;
        // update tables
        $c4523369f79044c5$var$sbox[e] = sx;
        $c4523369f79044c5$var$isbox[sx] = e;
        /* Mixing columns is done using matrix multiplication. The columns
      that are to be mixed are each a single word in the current state.
      The state has Nb columns (4 columns). Therefore each column is a
      4 byte word. So to mix the columns in a single column 'c' where
      its rows are r0, r1, r2, and r3, we use the following matrix
      multiplication:

      [2 3 1 1]*[r0,c]=[r'0,c]
      [1 2 3 1] [r1,c] [r'1,c]
      [1 1 2 3] [r2,c] [r'2,c]
      [3 1 1 2] [r3,c] [r'3,c]

      r0, r1, r2, and r3 are each 1 byte of one of the words in the
      state (a column). To do matrix multiplication for each mixed
      column c' we multiply the corresponding row from the left matrix
      with the corresponding column from the right matrix. In total, we
      get 4 equations:

      r0,c' = 2*r0,c + 3*r1,c + 1*r2,c + 1*r3,c
      r1,c' = 1*r0,c + 2*r1,c + 3*r2,c + 1*r3,c
      r2,c' = 1*r0,c + 1*r1,c + 2*r2,c + 3*r3,c
      r3,c' = 3*r0,c + 1*r1,c + 1*r2,c + 2*r3,c

      As usual, the multiplication is as previously defined and the
      addition is XOR. In order to optimize mixing columns we can store
      the multiplication results in tables. If you think of the whole
      column as a word (it might help to visualize by mentally rotating
      the equations above by counterclockwise 90 degrees) then you can
      see that it would be useful to map the multiplications performed on
      each byte (r0, r1, r2, r3) onto a word as well. For instance, we
      could map 2*r0,1*r0,1*r0,3*r0 onto a word by storing 2*r0 in the
      highest 8 bits and 3*r0 in the lowest 8 bits (with the other two
      respectively in the middle). This means that a table can be
      constructed that uses r0 as an index to the word. We can do the
      same with r1, r2, and r3, creating a total of 4 tables.

      To construct a full c', we can just look up each byte of c in
      their respective tables and XOR the results together.

      Also, to build each table we only have to calculate the word
      for 2,1,1,3 for every byte ... which we can do on each iteration
      of this loop since we will iterate over every byte. After we have
      calculated 2,1,1,3 we can get the results for the other tables
      by cycling the byte at the end to the beginning. For instance
      we can take the result of table 2,1,1,3 and produce table 3,2,1,1
      by moving the right most byte to the left most position just like
      how you can imagine the 3 moved out of 2,1,1,3 and to the front
      to produce 3,2,1,1.

      There is another optimization in that the same multiples of
      the current element we need in order to advance our generator
      to the next iteration can be reused in performing the 2,1,1,3
      calculation. We also calculate the inverse mix column tables,
      with e,9,d,b being the inverse of 2,1,1,3.

      When we're done, and we need to actually mix columns, the first
      byte of each state word should be put through mix[0] (2,1,1,3),
      the second through mix[1] (3,2,1,1) and so forth. Then they should
      be XOR'd together to produce the fully mixed column.
    */ // calculate mix and imix table values
        sx2 = xtime[sx];
        e2 = xtime[e];
        e4 = xtime[e2];
        e8 = xtime[e4];
        me = sx2 << 24 ^ // 2
        sx << 16 ^ // 1
        sx << 8 ^ // 1
        (sx ^ sx2); // 3
        ime = (e2 ^ e4 ^ e8) << 24 ^ // E (14)
        (e ^ e8) << 16 ^ // 9
        (e ^ e4 ^ e8) << 8 ^ // D (13)
        (e ^ e2 ^ e8); // B (11)
        // produce each of the mix tables by rotating the 2,1,1,3 value
        for(var n = 0; n < 4; ++n){
            $c4523369f79044c5$var$mix[n][e] = me;
            $c4523369f79044c5$var$imix[n][sx] = ime;
            // cycle the right most byte to the left most position
            // ie: 2,1,1,3 becomes 3,2,1,1
            me = me << 24 | me >>> 8;
            ime = ime << 24 | ime >>> 8;
        }
        // get next element and inverse
        if (e === 0) // 1 is the inverse of 1
        e = ei = 1;
        else {
            // e = 2e + 2*2*2*(10e)) = multiply e by 82 (chosen generator)
            // ei = ei + 2*2*ei = multiply ei by 5 (inverse generator)
            e = e2 ^ xtime[xtime[xtime[e2 ^ e8]]];
            ei ^= xtime[xtime[ei]];
        }
    }
}
/**
 * Generates a key schedule using the AES key expansion algorithm.
 *
 * The AES algorithm takes the Cipher Key, K, and performs a Key Expansion
 * routine to generate a key schedule. The Key Expansion generates a total
 * of Nb*(Nr + 1) words: the algorithm requires an initial set of Nb words,
 * and each of the Nr rounds requires Nb words of key data. The resulting
 * key schedule consists of a linear array of 4-byte words, denoted [wi ],
 * with i in the range 0 <= i < Nb(Nr + 1).
 *
 * KeyExpansion(byte key[4*Nk], word w[Nb*(Nr+1)], Nk)
 * AES-128 (Nb=4, Nk=4, Nr=10)
 * AES-192 (Nb=4, Nk=6, Nr=12)
 * AES-256 (Nb=4, Nk=8, Nr=14)
 * Note: Nr=Nk+6.
 *
 * Nb is the number of columns (32-bit words) comprising the State (or
 * number of bytes in a block). For AES, Nb=4.
 *
 * @param key the key to schedule (as an array of 32-bit words).
 * @param decrypt true to modify the key schedule to decrypt, false not to.
 *
 * @return the generated key schedule.
 */ function $c4523369f79044c5$var$_expandKey(key, decrypt) {
    // copy the key's words to initialize the key schedule
    var w = key.slice(0);
    /* RotWord() will rotate a word, moving the first byte to the last
    byte's position (shifting the other bytes left).

    We will be getting the value of Rcon at i / Nk. 'i' will iterate
    from Nk to (Nb * Nr+1). Nk = 4 (4 byte key), Nb = 4 (4 words in
    a block), Nr = Nk + 6 (10). Therefore 'i' will iterate from
    4 to 44 (exclusive). Each time we iterate 4 times, i / Nk will
    increase by 1. We use a counter iNk to keep track of this.
   */ // go through the rounds expanding the key
    var temp, iNk = 1;
    var Nk = w.length;
    var Nr1 = Nk + 6 + 1;
    var end = $c4523369f79044c5$var$Nb * Nr1;
    for(var i = Nk; i < end; ++i){
        temp = w[i - 1];
        if (i % Nk === 0) {
            // temp = SubWord(RotWord(temp)) ^ Rcon[i / Nk]
            temp = $c4523369f79044c5$var$sbox[temp >>> 16 & 255] << 24 ^ $c4523369f79044c5$var$sbox[temp >>> 8 & 255] << 16 ^ $c4523369f79044c5$var$sbox[temp & 255] << 8 ^ $c4523369f79044c5$var$sbox[temp >>> 24] ^ $c4523369f79044c5$var$rcon[iNk] << 24;
            iNk++;
        } else if (Nk > 6 && i % Nk === 4) // temp = SubWord(temp)
        temp = $c4523369f79044c5$var$sbox[temp >>> 24] << 24 ^ $c4523369f79044c5$var$sbox[temp >>> 16 & 255] << 16 ^ $c4523369f79044c5$var$sbox[temp >>> 8 & 255] << 8 ^ $c4523369f79044c5$var$sbox[temp & 255];
        w[i] = w[i - Nk] ^ temp;
    }
    /* When we are updating a cipher block we always use the code path for
     encryption whether we are decrypting or not (to shorten code and
     simplify the generation of look up tables). However, because there
     are differences in the decryption algorithm, other than just swapping
     in different look up tables, we must transform our key schedule to
     account for these changes:

     1. The decryption algorithm gets its key rounds in reverse order.
     2. The decryption algorithm adds the round key before mixing columns
       instead of afterwards.

     We don't need to modify our key schedule to handle the first case,
     we can just traverse the key schedule in reverse order when decrypting.

     The second case requires a little work.

     The tables we built for performing rounds will take an input and then
     perform SubBytes() and MixColumns() or, for the decrypt version,
     InvSubBytes() and InvMixColumns(). But the decrypt algorithm requires
     us to AddRoundKey() before InvMixColumns(). This means we'll need to
     apply some transformations to the round key to inverse-mix its columns
     so they'll be correct for moving AddRoundKey() to after the state has
     had its columns inverse-mixed.

     To inverse-mix the columns of the state when we're decrypting we use a
     lookup table that will apply InvSubBytes() and InvMixColumns() at the
     same time. However, the round key's bytes are not inverse-substituted
     in the decryption algorithm. To get around this problem, we can first
     substitute the bytes in the round key so that when we apply the
     transformation via the InvSubBytes()+InvMixColumns() table, it will
     undo our substitution leaving us with the original value that we
     want -- and then inverse-mix that value.

     This change will correctly alter our key schedule so that we can XOR
     each round key with our already transformed decryption state. This
     allows us to use the same code path as the encryption algorithm.

     We make one more change to the decryption key. Since the decryption
     algorithm runs in reverse from the encryption algorithm, we reverse
     the order of the round keys to avoid having to iterate over the key
     schedule backwards when running the encryption algorithm later in
     decryption mode. In addition to reversing the order of the round keys,
     we also swap each round key's 2nd and 4th rows. See the comments
     section where rounds are performed for more details about why this is
     done. These changes are done inline with the other substitution
     described above.
  */ if (decrypt) {
        var tmp;
        var m0 = $c4523369f79044c5$var$imix[0];
        var m1 = $c4523369f79044c5$var$imix[1];
        var m2 = $c4523369f79044c5$var$imix[2];
        var m3 = $c4523369f79044c5$var$imix[3];
        var wnew = w.slice(0);
        end = w.length;
        for(var i = 0, wi = end - $c4523369f79044c5$var$Nb; i < end; i += $c4523369f79044c5$var$Nb, wi -= $c4523369f79044c5$var$Nb){
            // do not sub the first or last round key (round keys are Nb
            // words) as no column mixing is performed before they are added,
            // but do change the key order
            if (i === 0 || i === end - $c4523369f79044c5$var$Nb) {
                wnew[i] = w[wi];
                wnew[i + 1] = w[wi + 3];
                wnew[i + 2] = w[wi + 2];
                wnew[i + 3] = w[wi + 1];
            } else // substitute each round key byte because the inverse-mix
            // table will inverse-substitute it (effectively cancel the
            // substitution because round key bytes aren't sub'd in
            // decryption mode) and swap indexes 3 and 1
            for(var n = 0; n < $c4523369f79044c5$var$Nb; ++n){
                tmp = w[wi + n];
                wnew[i + (3 & -n)] = m0[$c4523369f79044c5$var$sbox[tmp >>> 24]] ^ m1[$c4523369f79044c5$var$sbox[tmp >>> 16 & 255]] ^ m2[$c4523369f79044c5$var$sbox[tmp >>> 8 & 255]] ^ m3[$c4523369f79044c5$var$sbox[tmp & 255]];
            }
        }
        w = wnew;
    }
    return w;
}
/**
 * Updates a single block (16 bytes) using AES. The update will either
 * encrypt or decrypt the block.
 *
 * @param w the key schedule.
 * @param input the input block (an array of 32-bit words).
 * @param output the updated output block.
 * @param decrypt true to decrypt the block, false to encrypt it.
 */ function $c4523369f79044c5$var$_updateBlock(w, input, output, decrypt) {
    /*
  Cipher(byte in[4*Nb], byte out[4*Nb], word w[Nb*(Nr+1)])
  begin
    byte state[4,Nb]
    state = in
    AddRoundKey(state, w[0, Nb-1])
    for round = 1 step 1 to Nr-1
      SubBytes(state)
      ShiftRows(state)
      MixColumns(state)
      AddRoundKey(state, w[round*Nb, (round+1)*Nb-1])
    end for
    SubBytes(state)
    ShiftRows(state)
    AddRoundKey(state, w[Nr*Nb, (Nr+1)*Nb-1])
    out = state
  end

  InvCipher(byte in[4*Nb], byte out[4*Nb], word w[Nb*(Nr+1)])
  begin
    byte state[4,Nb]
    state = in
    AddRoundKey(state, w[Nr*Nb, (Nr+1)*Nb-1])
    for round = Nr-1 step -1 downto 1
      InvShiftRows(state)
      InvSubBytes(state)
      AddRoundKey(state, w[round*Nb, (round+1)*Nb-1])
      InvMixColumns(state)
    end for
    InvShiftRows(state)
    InvSubBytes(state)
    AddRoundKey(state, w[0, Nb-1])
    out = state
  end
  */ // Encrypt: AddRoundKey(state, w[0, Nb-1])
    // Decrypt: AddRoundKey(state, w[Nr*Nb, (Nr+1)*Nb-1])
    var Nr = w.length / 4 - 1;
    var m0, m1, m2, m3, sub;
    if (decrypt) {
        m0 = $c4523369f79044c5$var$imix[0];
        m1 = $c4523369f79044c5$var$imix[1];
        m2 = $c4523369f79044c5$var$imix[2];
        m3 = $c4523369f79044c5$var$imix[3];
        sub = $c4523369f79044c5$var$isbox;
    } else {
        m0 = $c4523369f79044c5$var$mix[0];
        m1 = $c4523369f79044c5$var$mix[1];
        m2 = $c4523369f79044c5$var$mix[2];
        m3 = $c4523369f79044c5$var$mix[3];
        sub = $c4523369f79044c5$var$sbox;
    }
    var a, b, c, d, a2, b2, c2;
    a = input[0] ^ w[0];
    b = input[decrypt ? 3 : 1] ^ w[1];
    c = input[2] ^ w[2];
    d = input[decrypt ? 1 : 3] ^ w[3];
    var i = 3;
    /* In order to share code we follow the encryption algorithm when both
    encrypting and decrypting. To account for the changes required in the
    decryption algorithm, we use different lookup tables when decrypting
    and use a modified key schedule to account for the difference in the
    order of transformations applied when performing rounds. We also get
    key rounds in reverse order (relative to encryption). */ for(var round = 1; round < Nr; ++round){
        /* As described above, we'll be using table lookups to perform the
      column mixing. Each column is stored as a word in the state (the
      array 'input' has one column as a word at each index). In order to
      mix a column, we perform these transformations on each row in c,
      which is 1 byte in each word. The new column for c0 is c'0:

               m0      m1      m2      m3
      r0,c'0 = 2*r0,c0 + 3*r1,c0 + 1*r2,c0 + 1*r3,c0
      r1,c'0 = 1*r0,c0 + 2*r1,c0 + 3*r2,c0 + 1*r3,c0
      r2,c'0 = 1*r0,c0 + 1*r1,c0 + 2*r2,c0 + 3*r3,c0
      r3,c'0 = 3*r0,c0 + 1*r1,c0 + 1*r2,c0 + 2*r3,c0

      So using mix tables where c0 is a word with r0 being its upper
      8 bits and r3 being its lower 8 bits:

      m0[c0 >> 24] will yield this word: [2*r0,1*r0,1*r0,3*r0]
      ...
      m3[c0 & 255] will yield this word: [1*r3,1*r3,3*r3,2*r3]

      Therefore to mix the columns in each word in the state we
      do the following (& 255 omitted for brevity):
      c'0,r0 = m0[c0 >> 24] ^ m1[c1 >> 16] ^ m2[c2 >> 8] ^ m3[c3]
      c'0,r1 = m0[c0 >> 24] ^ m1[c1 >> 16] ^ m2[c2 >> 8] ^ m3[c3]
      c'0,r2 = m0[c0 >> 24] ^ m1[c1 >> 16] ^ m2[c2 >> 8] ^ m3[c3]
      c'0,r3 = m0[c0 >> 24] ^ m1[c1 >> 16] ^ m2[c2 >> 8] ^ m3[c3]

      However, before mixing, the algorithm requires us to perform
      ShiftRows(). The ShiftRows() transformation cyclically shifts the
      last 3 rows of the state over different offsets. The first row
      (r = 0) is not shifted.

      s'_r,c = s_r,(c + shift(r, Nb) mod Nb
      for 0 < r < 4 and 0 <= c < Nb and
      shift(1, 4) = 1
      shift(2, 4) = 2
      shift(3, 4) = 3.

      This causes the first byte in r = 1 to be moved to the end of
      the row, the first 2 bytes in r = 2 to be moved to the end of
      the row, the first 3 bytes in r = 3 to be moved to the end of
      the row:

      r1: [c0 c1 c2 c3] => [c1 c2 c3 c0]
      r2: [c0 c1 c2 c3]    [c2 c3 c0 c1]
      r3: [c0 c1 c2 c3]    [c3 c0 c1 c2]

      We can make these substitutions inline with our column mixing to
      generate an updated set of equations to produce each word in the
      state (note the columns have changed positions):

      c0 c1 c2 c3 => c0 c1 c2 c3
      c0 c1 c2 c3    c1 c2 c3 c0  (cycled 1 byte)
      c0 c1 c2 c3    c2 c3 c0 c1  (cycled 2 bytes)
      c0 c1 c2 c3    c3 c0 c1 c2  (cycled 3 bytes)

      Therefore:

      c'0 = 2*r0,c0 + 3*r1,c1 + 1*r2,c2 + 1*r3,c3
      c'0 = 1*r0,c0 + 2*r1,c1 + 3*r2,c2 + 1*r3,c3
      c'0 = 1*r0,c0 + 1*r1,c1 + 2*r2,c2 + 3*r3,c3
      c'0 = 3*r0,c0 + 1*r1,c1 + 1*r2,c2 + 2*r3,c3

      c'1 = 2*r0,c1 + 3*r1,c2 + 1*r2,c3 + 1*r3,c0
      c'1 = 1*r0,c1 + 2*r1,c2 + 3*r2,c3 + 1*r3,c0
      c'1 = 1*r0,c1 + 1*r1,c2 + 2*r2,c3 + 3*r3,c0
      c'1 = 3*r0,c1 + 1*r1,c2 + 1*r2,c3 + 2*r3,c0

      ... and so forth for c'2 and c'3. The important distinction is
      that the columns are cycling, with c0 being used with the m0
      map when calculating c0, but c1 being used with the m0 map when
      calculating c1 ... and so forth.

      When performing the inverse we transform the mirror image and
      skip the bottom row, instead of the top one, and move upwards:

      c3 c2 c1 c0 => c0 c3 c2 c1  (cycled 3 bytes) *same as encryption
      c3 c2 c1 c0    c1 c0 c3 c2  (cycled 2 bytes)
      c3 c2 c1 c0    c2 c1 c0 c3  (cycled 1 byte)  *same as encryption
      c3 c2 c1 c0    c3 c2 c1 c0

      If you compare the resulting matrices for ShiftRows()+MixColumns()
      and for InvShiftRows()+InvMixColumns() the 2nd and 4th columns are
      different (in encrypt mode vs. decrypt mode). So in order to use
      the same code to handle both encryption and decryption, we will
      need to do some mapping.

      If in encryption mode we let a=c0, b=c1, c=c2, d=c3, and r<N> be
      a row number in the state, then the resulting matrix in encryption
      mode for applying the above transformations would be:

      r1: a b c d
      r2: b c d a
      r3: c d a b
      r4: d a b c

      If we did the same in decryption mode we would get:

      r1: a d c b
      r2: b a d c
      r3: c b a d
      r4: d c b a

      If instead we swap d and b (set b=c3 and d=c1), then we get:

      r1: a b c d
      r2: d a b c
      r3: c d a b
      r4: b c d a

      Now the 1st and 3rd rows are the same as the encryption matrix. All
      we need to do then to make the mapping exactly the same is to swap
      the 2nd and 4th rows when in decryption mode. To do this without
      having to do it on each iteration, we swapped the 2nd and 4th rows
      in the decryption key schedule. We also have to do the swap above
      when we first pull in the input and when we set the final output. */ a2 = m0[a >>> 24] ^ m1[b >>> 16 & 255] ^ m2[c >>> 8 & 255] ^ m3[d & 255] ^ w[++i];
        b2 = m0[b >>> 24] ^ m1[c >>> 16 & 255] ^ m2[d >>> 8 & 255] ^ m3[a & 255] ^ w[++i];
        c2 = m0[c >>> 24] ^ m1[d >>> 16 & 255] ^ m2[a >>> 8 & 255] ^ m3[b & 255] ^ w[++i];
        d = m0[d >>> 24] ^ m1[a >>> 16 & 255] ^ m2[b >>> 8 & 255] ^ m3[c & 255] ^ w[++i];
        a = a2;
        b = b2;
        c = c2;
    }
    /*
    Encrypt:
    SubBytes(state)
    ShiftRows(state)
    AddRoundKey(state, w[Nr*Nb, (Nr+1)*Nb-1])

    Decrypt:
    InvShiftRows(state)
    InvSubBytes(state)
    AddRoundKey(state, w[0, Nb-1])
   */ // Note: rows are shifted inline
    output[0] = sub[a >>> 24] << 24 ^ sub[b >>> 16 & 255] << 16 ^ sub[c >>> 8 & 255] << 8 ^ sub[d & 255] ^ w[++i];
    output[decrypt ? 3 : 1] = sub[b >>> 24] << 24 ^ sub[c >>> 16 & 255] << 16 ^ sub[d >>> 8 & 255] << 8 ^ sub[a & 255] ^ w[++i];
    output[2] = sub[c >>> 24] << 24 ^ sub[d >>> 16 & 255] << 16 ^ sub[a >>> 8 & 255] << 8 ^ sub[b & 255] ^ w[++i];
    output[decrypt ? 1 : 3] = sub[d >>> 24] << 24 ^ sub[a >>> 16 & 255] << 16 ^ sub[b >>> 8 & 255] << 8 ^ sub[c & 255] ^ w[++i];
}
/**
 * Deprecated. Instead, use:
 *
 * forge.cipher.createCipher('AES-<mode>', key);
 * forge.cipher.createDecipher('AES-<mode>', key);
 *
 * Creates a deprecated AES cipher object. This object's mode will default to
 * CBC (cipher-block-chaining).
 *
 * The key and iv may be given as a string of bytes, an array of bytes, a
 * byte buffer, or an array of 32-bit words.
 *
 * @param options the options to use.
 *          key the symmetric key to use.
 *          output the buffer to write to.
 *          decrypt true for decryption, false for encryption.
 *          mode the cipher mode to use (default: 'CBC').
 *
 * @return the cipher.
 */ function $c4523369f79044c5$var$_createCipher(options) {
    options = options || {};
    var mode = (options.mode || "CBC").toUpperCase();
    var algorithm = "AES-" + mode;
    var cipher;
    if (options.decrypt) cipher = $aX5SS.cipher.createDecipher(algorithm, options.key);
    else cipher = $aX5SS.cipher.createCipher(algorithm, options.key);
    // backwards compatible start API
    var start = cipher.start;
    cipher.start = function(iv, options) {
        // backwards compatibility: support second arg as output buffer
        var output = null;
        if (options instanceof $aX5SS.util.ByteBuffer) {
            output = options;
            options = {};
        }
        options = options || {};
        options.output = output;
        options.iv = iv;
        start.call(cipher, options);
    };
    return cipher;
}


var $72b25d4f06f6ecd8$exports = {};
/**
 * A Javascript implementation of AES Cipher Suites for TLS.
 *
 * @author Dave Longley
 *
 * Copyright (c) 2009-2015 Digital Bazaar, Inc.
 *
 */ 
var $aX5SS = parcelRequire("aX5SS");

var $790e0c8e72a790e4$exports = {};
/**
 * A Javascript implementation of Transport Layer Security (TLS).
 *
 * @author Dave Longley
 *
 * Copyright (c) 2009-2014 Digital Bazaar, Inc.
 *
 * The TLS Handshake Protocol involves the following steps:
 *
 * - Exchange hello messages to agree on algorithms, exchange random values,
 * and check for session resumption.
 *
 * - Exchange the necessary cryptographic parameters to allow the client and
 * server to agree on a premaster secret.
 *
 * - Exchange certificates and cryptographic information to allow the client
 * and server to authenticate themselves.
 *
 * - Generate a master secret from the premaster secret and exchanged random
 * values.
 *
 * - Provide security parameters to the record layer.
 *
 * - Allow the client and server to verify that their peer has calculated the
 * same security parameters and that the handshake occurred without tampering
 * by an attacker.
 *
 * Up to 4 different messages may be sent during a key exchange. The server
 * certificate, the server key exchange, the client certificate, and the
 * client key exchange.
 *
 * A typical handshake (from the client's perspective).
 *
 * 1. Client sends ClientHello.
 * 2. Client receives ServerHello.
 * 3. Client receives optional Certificate.
 * 4. Client receives optional ServerKeyExchange.
 * 5. Client receives ServerHelloDone.
 * 6. Client sends optional Certificate.
 * 7. Client sends ClientKeyExchange.
 * 8. Client sends optional CertificateVerify.
 * 9. Client sends ChangeCipherSpec.
 * 10. Client sends Finished.
 * 11. Client receives ChangeCipherSpec.
 * 12. Client receives Finished.
 * 13. Client sends/receives application data.
 *
 * To reuse an existing session:
 *
 * 1. Client sends ClientHello with session ID for reuse.
 * 2. Client receives ServerHello with same session ID if reusing.
 * 3. Client receives ChangeCipherSpec message if reusing.
 * 4. Client receives Finished.
 * 5. Client sends ChangeCipherSpec.
 * 6. Client sends Finished.
 *
 * Note: Client ignores HelloRequest if in the middle of a handshake.
 *
 * Record Layer:
 *
 * The record layer fragments information blocks into TLSPlaintext records
 * carrying data in chunks of 2^14 bytes or less. Client message boundaries are
 * not preserved in the record layer (i.e., multiple client messages of the
 * same ContentType MAY be coalesced into a single TLSPlaintext record, or a
 * single message MAY be fragmented across several records).
 *
 * struct {
 *   uint8 major;
 *   uint8 minor;
 * } ProtocolVersion;
 *
 * struct {
 *   ContentType type;
 *   ProtocolVersion version;
 *   uint16 length;
 *   opaque fragment[TLSPlaintext.length];
 * } TLSPlaintext;
 *
 * type:
 *   The higher-level protocol used to process the enclosed fragment.
 *
 * version:
 *   The version of the protocol being employed. TLS Version 1.2 uses version
 *   {3, 3}. TLS Version 1.0 uses version {3, 1}. Note that a client that
 *   supports multiple versions of TLS may not know what version will be
 *   employed before it receives the ServerHello.
 *
 * length:
 *   The length (in bytes) of the following TLSPlaintext.fragment. The length
 *   MUST NOT exceed 2^14 = 16384 bytes.
 *
 * fragment:
 *   The application data. This data is transparent and treated as an
 *   independent block to be dealt with by the higher-level protocol specified
 *   by the type field.
 *
 * Implementations MUST NOT send zero-length fragments of Handshake, Alert, or
 * ChangeCipherSpec content types. Zero-length fragments of Application data
 * MAY be sent as they are potentially useful as a traffic analysis
 * countermeasure.
 *
 * Note: Data of different TLS record layer content types MAY be interleaved.
 * Application data is generally of lower precedence for transmission than
 * other content types. However, records MUST be delivered to the network in
 * the same order as they are protected by the record layer. Recipients MUST
 * receive and process interleaved application layer traffic during handshakes
 * subsequent to the first one on a connection.
 *
 * struct {
 *   ContentType type;       // same as TLSPlaintext.type
 *   ProtocolVersion version;// same as TLSPlaintext.version
 *   uint16 length;
 *   opaque fragment[TLSCompressed.length];
 * } TLSCompressed;
 *
 * length:
 *   The length (in bytes) of the following TLSCompressed.fragment.
 *   The length MUST NOT exceed 2^14 + 1024.
 *
 * fragment:
 *   The compressed form of TLSPlaintext.fragment.
 *
 * Note: A CompressionMethod.null operation is an identity operation; no fields
 * are altered. In this implementation, since no compression is supported,
 * uncompressed records are always the same as compressed records.
 *
 * Encryption Information:
 *
 * The encryption and MAC functions translate a TLSCompressed structure into a
 * TLSCiphertext. The decryption functions reverse the process. The MAC of the
 * record also includes a sequence number so that missing, extra, or repeated
 * messages are detectable.
 *
 * struct {
 *   ContentType type;
 *   ProtocolVersion version;
 *   uint16 length;
 *   select (SecurityParameters.cipher_type) {
 *     case stream: GenericStreamCipher;
 *     case block:  GenericBlockCipher;
 *     case aead:   GenericAEADCipher;
 *   } fragment;
 * } TLSCiphertext;
 *
 * type:
 *   The type field is identical to TLSCompressed.type.
 *
 * version:
 *   The version field is identical to TLSCompressed.version.
 *
 * length:
 *   The length (in bytes) of the following TLSCiphertext.fragment.
 *   The length MUST NOT exceed 2^14 + 2048.
 *
 * fragment:
 *   The encrypted form of TLSCompressed.fragment, with the MAC.
 *
 * Note: Only CBC Block Ciphers are supported by this implementation.
 *
 * The TLSCompressed.fragment structures are converted to/from block
 * TLSCiphertext.fragment structures.
 *
 * struct {
 *   opaque IV[SecurityParameters.record_iv_length];
 *   block-ciphered struct {
 *     opaque content[TLSCompressed.length];
 *     opaque MAC[SecurityParameters.mac_length];
 *     uint8 padding[GenericBlockCipher.padding_length];
 *     uint8 padding_length;
 *   };
 * } GenericBlockCipher;
 *
 * The MAC is generated as described in Section 6.2.3.1.
 *
 * IV:
 *   The Initialization Vector (IV) SHOULD be chosen at random, and MUST be
 *   unpredictable. Note that in versions of TLS prior to 1.1, there was no
 *   IV field, and the last ciphertext block of the previous record (the "CBC
 *   residue") was used as the IV. This was changed to prevent the attacks
 *   described in [CBCATT]. For block ciphers, the IV length is of length
 *   SecurityParameters.record_iv_length, which is equal to the
 *   SecurityParameters.block_size.
 *
 * padding:
 *   Padding that is added to force the length of the plaintext to be an
 *   integral multiple of the block cipher's block length. The padding MAY be
 *   any length up to 255 bytes, as long as it results in the
 *   TLSCiphertext.length being an integral multiple of the block length.
 *   Lengths longer than necessary might be desirable to frustrate attacks on
 *   a protocol that are based on analysis of the lengths of exchanged
 *   messages. Each uint8 in the padding data vector MUST be filled with the
 *   padding length value. The receiver MUST check this padding and MUST use
 *   the bad_record_mac alert to indicate padding errors.
 *
 * padding_length:
 *   The padding length MUST be such that the total size of the
 *   GenericBlockCipher structure is a multiple of the cipher's block length.
 *   Legal values range from zero to 255, inclusive. This length specifies the
 *   length of the padding field exclusive of the padding_length field itself.
 *
 * The encrypted data length (TLSCiphertext.length) is one more than the sum of
 * SecurityParameters.block_length, TLSCompressed.length,
 * SecurityParameters.mac_length, and padding_length.
 *
 * Example: If the block length is 8 bytes, the content length
 * (TLSCompressed.length) is 61 bytes, and the MAC length is 20 bytes, then the
 * length before padding is 82 bytes (this does not include the IV. Thus, the
 * padding length modulo 8 must be equal to 6 in order to make the total length
 * an even multiple of 8 bytes (the block length). The padding length can be
 * 6, 14, 22, and so on, through 254. If the padding length were the minimum
 * necessary, 6, the padding would be 6 bytes, each containing the value 6.
 * Thus, the last 8 octets of the GenericBlockCipher before block encryption
 * would be xx 06 06 06 06 06 06 06, where xx is the last octet of the MAC.
 *
 * Note: With block ciphers in CBC mode (Cipher Block Chaining), it is critical
 * that the entire plaintext of the record be known before any ciphertext is
 * transmitted. Otherwise, it is possible for the attacker to mount the attack
 * described in [CBCATT].
 *
 * Implementation note: Canvel et al. [CBCTIME] have demonstrated a timing
 * attack on CBC padding based on the time required to compute the MAC. In
 * order to defend against this attack, implementations MUST ensure that
 * record processing time is essentially the same whether or not the padding
 * is correct. In general, the best way to do this is to compute the MAC even
 * if the padding is incorrect, and only then reject the packet. For instance,
 * if the pad appears to be incorrect, the implementation might assume a
 * zero-length pad and then compute the MAC. This leaves a small timing
 * channel, since MAC performance depends, to some extent, on the size of the
 * data fragment, but it is not believed to be large enough to be exploitable,
 * due to the large block size of existing MACs and the small size of the
 * timing signal.
 */ 
var $aX5SS = parcelRequire("aX5SS");
var $70d0df810a6d39b2$exports = {};
/**
 * Javascript implementation of Abstract Syntax Notation Number One.
 *
 * @author Dave Longley
 *
 * Copyright (c) 2010-2015 Digital Bazaar, Inc.
 *
 * An API for storing data using the Abstract Syntax Notation Number One
 * format using DER (Distinguished Encoding Rules) encoding. This encoding is
 * commonly used to store data for PKI, i.e. X.509 Certificates, and this
 * implementation exists for that purpose.
 *
 * Abstract Syntax Notation Number One (ASN.1) is used to define the abstract
 * syntax of information without restricting the way the information is encoded
 * for transmission. It provides a standard that allows for open systems
 * communication. ASN.1 defines the syntax of information data and a number of
 * simple data types as well as a notation for describing them and specifying
 * values for them.
 *
 * The RSA algorithm creates public and private keys that are often stored in
 * X.509 or PKCS#X formats -- which use ASN.1 (encoded in DER format). This
 * class provides the most basic functionality required to store and load DSA
 * keys that are encoded according to ASN.1.
 *
 * The most common binary encodings for ASN.1 are BER (Basic Encoding Rules)
 * and DER (Distinguished Encoding Rules). DER is just a subset of BER that
 * has stricter requirements for how data must be encoded.
 *
 * Each ASN.1 structure has a tag (a byte identifying the ASN.1 structure type)
 * and a byte array for the value of this ASN1 structure which may be data or a
 * list of ASN.1 structures.
 *
 * Each ASN.1 structure using BER is (Tag-Length-Value):
 *
 * | byte 0 | bytes X | bytes Y |
 * |--------|---------|----------
 * |  tag   | length  |  value  |
 *
 * ASN.1 allows for tags to be of "High-tag-number form" which allows a tag to
 * be two or more octets, but that is not supported by this class. A tag is
 * only 1 byte. Bits 1-5 give the tag number (ie the data type within a
 * particular 'class'), 6 indicates whether or not the ASN.1 value is
 * constructed from other ASN.1 values, and bits 7 and 8 give the 'class'. If
 * bits 7 and 8 are both zero, the class is UNIVERSAL. If only bit 7 is set,
 * then the class is APPLICATION. If only bit 8 is set, then the class is
 * CONTEXT_SPECIFIC. If both bits 7 and 8 are set, then the class is PRIVATE.
 * The tag numbers for the data types for the class UNIVERSAL are listed below:
 *
 * UNIVERSAL 0 Reserved for use by the encoding rules
 * UNIVERSAL 1 Boolean type
 * UNIVERSAL 2 Integer type
 * UNIVERSAL 3 Bitstring type
 * UNIVERSAL 4 Octetstring type
 * UNIVERSAL 5 Null type
 * UNIVERSAL 6 Object identifier type
 * UNIVERSAL 7 Object descriptor type
 * UNIVERSAL 8 External type and Instance-of type
 * UNIVERSAL 9 Real type
 * UNIVERSAL 10 Enumerated type
 * UNIVERSAL 11 Embedded-pdv type
 * UNIVERSAL 12 UTF8String type
 * UNIVERSAL 13 Relative object identifier type
 * UNIVERSAL 14-15 Reserved for future editions
 * UNIVERSAL 16 Sequence and Sequence-of types
 * UNIVERSAL 17 Set and Set-of types
 * UNIVERSAL 18-22, 25-30 Character string types
 * UNIVERSAL 23-24 Time types
 *
 * The length of an ASN.1 structure is specified after the tag identifier.
 * There is a definite form and an indefinite form. The indefinite form may
 * be used if the encoding is constructed and not all immediately available.
 * The indefinite form is encoded using a length byte with only the 8th bit
 * set. The end of the constructed object is marked using end-of-contents
 * octets (two zero bytes).
 *
 * The definite form looks like this:
 *
 * The length may take up 1 or more bytes, it depends on the length of the
 * value of the ASN.1 structure. DER encoding requires that if the ASN.1
 * structure has a value that has a length greater than 127, more than 1 byte
 * will be used to store its length, otherwise just one byte will be used.
 * This is strict.
 *
 * In the case that the length of the ASN.1 value is less than 127, 1 octet
 * (byte) is used to store the "short form" length. The 8th bit has a value of
 * 0 indicating the length is "short form" and not "long form" and bits 7-1
 * give the length of the data. (The 8th bit is the left-most, most significant
 * bit: also known as big endian or network format).
 *
 * In the case that the length of the ASN.1 value is greater than 127, 2 to
 * 127 octets (bytes) are used to store the "long form" length. The first
 * byte's 8th bit is set to 1 to indicate the length is "long form." Bits 7-1
 * give the number of additional octets. All following octets are in base 256
 * with the most significant digit first (typical big-endian binary unsigned
 * integer storage). So, for instance, if the length of a value was 257, the
 * first byte would be set to:
 *
 * 10000010 = 130 = 0x82.
 *
 * This indicates there are 2 octets (base 256) for the length. The second and
 * third bytes (the octets just mentioned) would store the length in base 256:
 *
 * octet 2: 00000001 = 1 * 256^1 = 256
 * octet 3: 00000001 = 1 * 256^0 = 1
 * total = 257
 *
 * The algorithm for converting a js integer value of 257 to base-256 is:
 *
 * var value = 257;
 * var bytes = [];
 * bytes[0] = (value >>> 8) & 0xFF; // most significant byte first
 * bytes[1] = value & 0xFF;        // least significant byte last
 *
 * On the ASN.1 UNIVERSAL Object I